[{"C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\index.js":"1","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\App.js":"2","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\widgets\\device_variables\\device_variables.js":"3","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\location\\location.js":"4","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\device\\device.js":"5"},{"size":320,"mtime":1681473157208,"results":"6","hashOfConfig":"7"},{"size":3430,"mtime":1681473157201,"results":"8","hashOfConfig":"7"},{"size":7311,"mtime":1683308976727,"results":"9","hashOfConfig":"7"},{"size":8697,"mtime":1681473157207,"results":"10","hashOfConfig":"7"},{"size":1489,"mtime":1683308812049,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"xkhjgn",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\index.js",["31","32"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Device_variables } from './widgets/device_variables/device_variables';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <Device_variables />\r\n);\r\n\r\n\r\n","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\App.js",["33","34","35","36","37","38","39"],[],"import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst {Account, Device, Services} = require('@tago-io/sdk'); \r\n\r\n    \r\n    const notify = (message) => toast.success(message);\r\n    const error = (message) => toast.error(message) \r\n    \r\n\r\nfunction App() {\r\n   const account = new Account({token:\"191363cf-b92e-4700-8d9f-ca21d9e9783b\"});\r\n   const my_device = new Device({token:\"1604825b-a5ea-4217-a359-3b0a1ce3232f\"});\r\n\r\n   const [arrayOfdevices,setArray] = useState([]);\r\n\r\n    async function listdevices(){\r\n\r\n         let list_response =  await account.analysis.list();\r\n         await account.analysis.run(\"642474606f1fa600090faf53\")\r\n         const esn_variables = (await my_device.getData({ qty: 200 })).filter(obj => obj.variable === \"esn\")//a cada 100 variáveis eu tenho uma média de 16 variáveis ESN\r\n       \r\n       }\r\n\r\n   \r\n        window.TagoIO.onStart((widget) => {\r\n            window.widget = widget;\r\n        })\r\n        window.TagoIO.ready();\r\n\r\n\r\n\r\n        return(\r\n             <div className=\"container\">\r\n                <ToastContainer />\r\n                    <div className=\"box\">\r\n                        \r\n                        <div className =\"cabecalho\">\r\n                            <div className =\"title\">Enviar Comando</div>\r\n                        </div>\r\n                        \r\n                        \r\n                        <div className =\"fieldOfSelection\">\r\n                \r\n                            <div className=\" label_dev\">\r\n                                <img className =\"drop\" alt='' src=\"https://img.icons8.com/external-zen-filled-royyan-wijaya/2x/external-list-dropdown-business-zen-filled-royyan-wijaya.png\" />\r\n                                <div className =\"title_label\">Select the device to configure it</div> \r\n                            </div>\r\n                \r\n                \r\n                              <div className=\"input\">\r\n                                    <select id=\"devices\" className =\"devices\">\r\n                                    {arrayOfdevices.map((item) =>{\r\n                                        try{\r\n                                            return(\r\n                                                <option value={`${item.id},${item.name}`}> {item.name} </option>\r\n                                            )\r\n                                        }catch(err){\r\n                                           error(err)\r\n                                        }\r\n                                      \r\n                                    })}\r\n                                    </select>\r\n                                </div>  \r\n                                \r\n                \r\n                            \r\n                \r\n                            <div className=\"rodape\">\r\n                                 <button className=\"button\" onClick={() => listdevices()}>\r\n                                    Sent MQTT Message\r\n                                </button> \r\n                            </div>\r\n                \r\n                \r\n                        </div>\r\n                        \r\n                    \r\n                \r\n                    </div>  \r\n                    \r\n                   \r\n                </div>\r\n           \r\n        )\r\n}\r\n\r\nexport default App;","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\widgets\\device_variables\\device_variables.js",["40","41","42","43","44"],[],"import './device_variables.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst { tago_device } = require('../../classes/device/device.js');\r\nconst { location_apis } = require('../../classes/location/location.js')\r\n\r\n\r\nfunction Device_variables(){\r\n  const [device_variables, set_device_variables] = useState([]);\r\n\r\n  const device_methods = new tago_device();\r\n  const location_funcs = new location_apis();\r\n\r\n\r\n   useEffect(() => {\r\n    window.TagoIO.onStart( async(widget) => {\r\n      window.widget = widget;\r\n\r\n      let device_id = widget.display.variables[0].origin.id;\r\n      let request = await device_methods.get_device_variables(device_id); \r\n       console.log(request.filter((x) => x.metadata.media === \"STX\").length)\r\n      set_device_variables(request.filter((x) => x.metadata.media === \"STX\"));\r\n  })\r\n  window.TagoIO.ready(); \r\n  },[]) \r\n\r\n\r\n\r\n\r\n  \r\n\r\n   function add_0_to_left(value){\r\n\r\n      if( String(value).length === 1 ){\r\n        return \"0\" + value;\r\n      }else{\r\n        return value;\r\n      }\r\n\r\n   }\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n        <div className='div-mother'>\r\n        <div className='div-filho'>\r\n\r\n      <div className='text-div-mother'>\r\n         <h1>See all variables that the selected device sent!</h1>\r\n         <br/>\r\n        </div>\r\n       \r\n                <div className='data_variables'>\r\n\r\n                        <table border=\"1\" className='variable_tables'>\r\n                            <tr>\r\n                                <td>link</td>\r\n                                <td>Date and Time</td>\r\n                                <td>Coordinates</td>\r\n                                  \r\n                            </tr>\r\n                            {device_variables.map(data => { \r\n\r\n                               \r\n\r\n                                  const hex_2_bin = (hexadecimal_content) => {\r\n                                    return (\"00000000\" + parseInt(hexadecimal_content, 16).toString(2)).substr(-8);\r\n                                  };\r\n\r\n                                 const catch_payload = (stu_message) => {\r\n                                    //This function is catching the hexadecimal message sent by device\r\n                                    let firstTag = stu_message.indexOf(\">\", stu_message.indexOf(\"<payload\"));\r\n                                    let secondTag = stu_message.indexOf(\"</payload>\", firstTag);\r\n                                \r\n                                    return stu_message.substring(firstTag + 3, secondTag);\r\n                                  };\r\n                                \r\n                                  \r\n                                  const decode_lat = (file_content, cardinal_position) => {\r\n                                    let hexadecimal_lat = file_content.substring(0, 6);\r\n                                    let integer_lat = String(parseInt(hexadecimal_lat, 16)); //estou convertendo para inteiro um valor hexa, por isso eu coloco o 16 como parâmetro\r\n                                     \r\n                                    let final_lat = integer_lat / 10_000; \r\n                                    let ready_coordinate = cardinal_position === \"south\"\r\n                                                                                      ? \"-\" + String(final_lat.toFixed(8))\r\n                                                                                      : String(final_lat.toFixed(8));\r\n                                \r\n                                    return ready_coordinate; \r\n                                  };\r\n                                \r\n \r\n                                  const decode_lng = (file_content, cardinal_position) => {\r\n                                    let hexadecimal_lng = file_content.substring(6, 12);\r\n                                    let integer_lng = parseInt(hexadecimal_lng, 16);\r\n                                \r\n                                    let final_lng = integer_lng / 10_000; \r\n                                    let ready_coordinate = cardinal_position === \"weast\"\r\n                                                                                     ? \"-\" + String(final_lng.toFixed(8))\r\n                                                                                     : String(final_lng.toFixed(8));\r\n                                \r\n                                    return ready_coordinate; \r\n                                  };\r\n\r\n\r\n                                  const decode_binary_values = (payload) => {\r\n                                    let values_object = new Object();\r\n                                    let binary = hex_2_bin(payload.substring(12, 14));\r\n\r\n                                    let value_of_each_byte = {\r\n                                      0: (byte) => { byte === \"0\"   ?values_object.cardinal_position_s_n = \"south\"    :values_object.cardinal_position_s_n = \"north\"; },\r\n                                      1: (byte) => { byte === \"0\"   ?values_object.cardinal_position_w_e = \"weast\"    :values_object.cardinal_position_w_e = \"east\";},\r\n                                      2: (byte) => { byte === \"0\"   ?values_object.origin = \"GPS\"                     :values_object.origin = \"GPS-DR\";},\r\n                                      3: (byte) => { byte === \"0\"   ?values_object.mode = 2                           :values_object.mode = 3; },\r\n                                    };\r\n\r\n                                    for (let i = 0; i <= 3; i++) { value_of_each_byte[String(i)](binary[i]); }//i --> binary position / binary[i] --> binary value\r\n\r\n                                    return values_object;\r\n                                  }\r\n\r\n\r\n                                  let payload = catch_payload(data.metadata.xml);\r\n                                  let bin_values_decoded = decode_binary_values(payload);\r\n\r\n                                  let latitude = Number(decode_lat(payload, bin_values_decoded.cardinal_position_s_n));\r\n                                  let longitude = Number(decode_lng(payload, bin_values_decoded.cardinal_position_w_e));\r\n\r\n                                  var link = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\r\n                                \r\n                            \r\n                              return( \r\n                                <tr>\r\n                                    <td className='data_variable'>{data.metadata.origin}</td>\r\n\r\n                                     <td>{String(data.time)}</td>  \r\n\r\n                                    <td className='b'><a href={link} target=\"_blank\"> Google link</a></td>\r\n\r\n                                     <td className={data.id}></td>{/* Date and time */}\r\n                                     <td className={data.id}></td>{/* Coordinates */}\r\n\r\n                                </tr>\r\n                              )\r\n\r\n                               \r\n  \r\n\r\n\r\n                            })}\r\n\r\n                        </table>\r\n                        \r\n                            \r\n                    \r\n                </div>\r\n\r\n\r\n\r\n\r\n                </div> \r\n\r\n\r\n           \r\n\r\n            </div>         \r\n         \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport { Device_variables };","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\location\\location.js",["45","46"],[],"const axios = require('axios');\r\n\r\n\r\nexport class location_apis {\r\n\r\n\r\n     prepare_mac_parameterers_for_requisition = (wifi_fields, esn) => {//private method\r\n            let wifi_parameters_list = new Array();\r\n    \r\n            if(wifi_fields === undefined){\r\n                return; \r\n            }else{\r\n                wifi_fields.forEach(key => {\r\n                if(!esn.metadata[key]){//if there isn´t nothing field with the specific wifi name, will retun the function.\r\n                  return\r\n                }\r\n            \r\n                let wifi_fields_array = esn.metadata[key].split(\",\");\r\n                wifi_parameters_list.push({\r\n                  macAddress: wifi_fields_array[0],\r\n                  signalStrength: wifi_fields_array[1],\r\n                  signalToNoiseRatio: 0,\r\n                })\r\n            \r\n              });\r\n            } \r\n            \r\n        return wifi_parameters_list;\r\n     }\r\n    \r\n\r\n\r\n\r\n\r\n      prepare_lbs_parameters_for_requesition = (keyTag,esn,dataType) => {\r\n        if(keyTag === undefined){ return; }\r\n\r\n        let lbsList = new Array();   \r\n          \r\n              keyTag.forEach(key => {\r\n      \r\n                  if(!esn.metadata[key]){ return; }// if there isn´t nothing field with the specific lbs, will retun the function.\r\n              \r\n                  let arrayFieldsLbs = (esn.metadata[key]).split(',');\r\n                  if (arrayFieldsLbs.length < 3) { return; }\r\n                  if (arrayFieldsLbs[4] === \"FFFF\" || arrayFieldsLbs[7] === \"0000\") { return; };\r\n      \r\n                  if (arrayFieldsLbs.length > 10) {\r\n\r\n                    if(dataType === \"lte\"){\r\n                        lbsList.push({\r\n                            cell: arrayFieldsLbs[0],\r\n                            earfcn: arrayFieldsLbs[1],\r\n                            pci: arrayFieldsLbs[2],\r\n                            rsrp: arrayFieldsLbs[3],\r\n                            rssi: arrayFieldsLbs[4],\r\n                            rsrq: arrayFieldsLbs[5],\r\n                            sinr: arrayFieldsLbs[6],\r\n                            lac: arrayFieldsLbs[7],\r\n                            cellid:arrayFieldsLbs[8],\r\n                            mcc:arrayFieldsLbs[9],\r\n                            mnc:arrayFieldsLbs[10],\r\n                            txPower:arrayFieldsLbs[11]\r\n                        });\r\n                        }else{\r\n                            lbsList.push({\r\n                                cell: arrayFieldsLbs[0],\r\n                                bcch: arrayFieldsLbs[1],\r\n                                rxl: arrayFieldsLbs[2],\r\n                                rxq: arrayFieldsLbs[3],\r\n                                mcc: arrayFieldsLbs[4],\r\n                                mnc: arrayFieldsLbs[5],\r\n                                bsic: arrayFieldsLbs[6],\r\n                                cellid: arrayFieldsLbs[7],\r\n                                rla: arrayFieldsLbs[8],\r\n                                txp: arrayFieldsLbs[9],\r\n                                lac: arrayFieldsLbs[10],\r\n                                ta: arrayFieldsLbs[11],\r\n                            });\r\n                        }\r\n\r\n                  }else {\r\n                    if(dataType === \"lte\"){\r\n                        lbsList.push({\r\n                      cell: arrayFieldsLbs[0],\r\n                      earfcn: arrayFieldsLbs[1],\r\n                      pci: arrayFieldsLbs[2],\r\n                      rsrp: arrayFieldsLbs[3],\r\n                      rssi: arrayFieldsLbs[4],\r\n                      rsrq: arrayFieldsLbs[5],\r\n                      sinr: arrayFieldsLbs[6]\r\n                      });  \r\n                    \r\n                    }else{\r\n                        lbsList.push({\r\n                            cell: arrayFieldsLbs[0],\r\n                            bcch: arrayFieldsLbs[1],\r\n                            rxl: arrayFieldsLbs[2],\r\n                            bsic: arrayFieldsLbs[3],\r\n                            cellid: arrayFieldsLbs[4],\r\n                            mcc: arrayFieldsLbs[5],\r\n                            mnc: arrayFieldsLbs[6],\r\n                            lac: arrayFieldsLbs[7],\r\n                            });\r\n                    }\r\n\r\n\r\n                  }\r\n        \r\n              });\r\n      \r\n\r\n            \r\n            return lbsList;\r\n      \r\n      }//end of function parseToObjectLBS\r\n     \r\n     \r\n     \r\n     \r\n     \r\n     get_address_through_coordinates = async(latitude, longitude) =>{//public method\r\n        const request = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\r\n        \r\n        if(request.data.address !== undefined){\r\n          let address = request.data.address;\r\n\r\n          return address.quarter === undefined\r\n                              ? `${address.road} - ${address.suburb} - ${address.state} - ${address.city} - ${address.postcode}`\r\n                              : `${address.road} - ${address.quarter} - ${address.state} - ${address.city} - ${address.postcode}`; \r\n        }else{\r\n         return {address: \"no data available\"};\r\n        }\r\n        \r\n      }\r\n\r\n\r\n\r\n\r\n\r\n       get_coordinates_through_mac_datas = async(wifi_fields, esn) =>{\r\n          \r\n         let list = this.prepare_mac_parameterers_for_requisition(wifi_fields, esn);\r\n        \r\n            try{\r\n                    /* if the mode that i sent to a function is the same the wifi, i want that the function made a macAddress requisition */\r\n                    const result = await axios({\r\n                        method: \"POST\",\r\n                        url: \"https://www.googleapis.com/geolocation/v1/geolocate\",\r\n                        params: {\r\n                          key: \"AIzaSyDq2lk5DBMUg2ymbDimMunBbvQwk-4MeLg\",\r\n                        },\r\n                        data: {\r\n                          homeMobileCountryCode: 0,\r\n                          homeMobileNetworkCode: 0,\r\n                          radioType: \"gsm\",\r\n                          carrier: \"Vodafone\",\r\n                          considerIp: false,\r\n                          wifiAccessPoints: list\r\n                        },\r\n                    })\r\n        \r\n\r\n                    if (!result) { return {lat:0, lng:0} };\r\n                    return result.data.location;\r\n\r\n            }catch(e){ return {lat:0, lng:0} }\r\n   \r\n     } \r\n\r\n\r\n\r\n\r\n\r\n     get_coordinates_through_lbs_datas = async(lbs_fields, esn, data_type) =>{\r\n         try{\r\n                 let list = this.prepare_lbs_parameters_for_requesition(lbs_fields, esn, data_type);\r\n             \r\n                 let cellTowers = list.map((lbs) => {/* I create a array with several objects, this array will be used how parameter in the google API  */\r\n                      return {\r\n                         cellId: data_type === \"lte\" ?  parseInt(lbs.cellid) :parseInt(lbs.cellid),\r\n                         locationAreaCode :data_type === \"lte\" ?parseInt(lbs.lac) :parseInt(lbs.lac),\r\n                         mobileCountryCode: parseInt(lbs.mcc),\r\n                         mobileNetworkCode: parseInt(lbs.mnc),\r\n                        };\r\n                  });\r\n          \r\n                 \r\n                  \r\n                 const lbs0 = list.find((x) => x.cell === \"LBS0\");\r\n                 if(!lbs0){ return {lat:0, lng:0} };\r\n          \r\n            \r\n                    \r\n            /*  Google api will return geography coordinates accordingly with the lbs Datas returned of const cellTowers(objects array) */\r\n                const result = await axios({\r\n                    method: \"POST\",\r\n                    url: \"https://www.googleapis.com/geolocation/v1/geolocate\",\r\n                    params: {\r\n                      key: \"AIzaSyDq2lk5DBMUg2ymbDimMunBbvQwk-4MeLg\",\r\n                    },\r\n                    data: {\r\n                       homeMobileCountryCode: parseInt(lbs0.mcc),\r\n                       homeMobileNetworkCode: parseInt(lbs0.mnc),\r\n                       radioType: data_type === \"lte\" ?\"LTE\" :\"gsm\",//define o tipo de dados que a minha api vai receber GSM | LTE\r\n                       carrier: \"Vodafone\",\r\n                       considerIp: false,\r\n                       cellTowers: data_type === \"lte\" ? [cellTowers[0]] :cellTowers\r\n                      }\r\n                    }).catch((err) => console.log())\r\n                            \r\n                          \r\n                    if(!result) { return {lat:0, lng:0} };\r\n                    return result.data.location;\r\n                    \r\n            }catch(e){ return {lat:0, lng:0}; }\r\n           \r\n        \r\n   \r\n     }\r\n\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\device\\device.js",[],[],{"ruleId":"47","severity":1,"message":"48","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":11},{"ruleId":"51","severity":1,"message":"52","line":10,"column":5,"nodeType":"53","messageId":"54","endLine":10,"endColumn":25},{"ruleId":"47","severity":1,"message":"55","line":2,"column":17,"nodeType":"49","messageId":"50","endLine":2,"endColumn":26},{"ruleId":"47","severity":1,"message":"56","line":5,"column":25,"nodeType":"49","messageId":"50","endLine":5,"endColumn":33},{"ruleId":"47","severity":1,"message":"57","line":8,"column":11,"nodeType":"49","messageId":"50","endLine":8,"endColumn":17},{"ruleId":"47","severity":1,"message":"58","line":16,"column":26,"nodeType":"49","messageId":"50","endLine":16,"endColumn":34},{"ruleId":"47","severity":1,"message":"59","line":20,"column":14,"nodeType":"49","messageId":"50","endLine":20,"endColumn":27},{"ruleId":"47","severity":1,"message":"60","line":22,"column":16,"nodeType":"49","messageId":"50","endLine":22,"endColumn":29},{"ruleId":"61","severity":1,"message":"62","line":54,"column":64,"nodeType":"63","messageId":"64","endLine":54,"endColumn":66},{"ruleId":"47","severity":1,"message":"65","line":13,"column":9,"nodeType":"49","messageId":"50","endLine":13,"endColumn":23},{"ruleId":"66","severity":1,"message":"67","line":26,"column":5,"nodeType":"68","endLine":26,"endColumn":7,"suggestions":"69"},{"ruleId":"47","severity":1,"message":"70","line":33,"column":13,"nodeType":"49","messageId":"50","endLine":33,"endColumn":26},{"ruleId":"71","severity":1,"message":"72","line":109,"column":57,"nodeType":"73","messageId":"74","endLine":109,"endColumn":69},{"ruleId":"75","severity":1,"message":"76","line":140,"column":55,"nodeType":"53","messageId":"77","endLine":140,"endColumn":86,"fix":"78"},{"ruleId":"79","severity":1,"message":"80","line":8,"column":40,"nodeType":"73","messageId":"74","endLine":8,"endColumn":51},{"ruleId":"79","severity":1,"message":"80","line":38,"column":23,"nodeType":"73","messageId":"74","endLine":38,"endColumn":34},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Device_variables must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'useEffect' is defined but never used.","'Services' is assigned a value but never used.","'notify' is assigned a value but never used.","'setArray' is assigned a value but never used.","'list_response' is assigned a value but never used.","'esn_variables' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'location_funcs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'device_methods'. Either include it or remove the dependency array.","ArrayExpression",["81"],"'add_0_to_left' is defined but never used.","no-new-object","The object literal notation {} is preferable.","NewExpression","preferLiteral","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"82","text":"83"},"no-array-constructor","The array literal notation [] is preferable.",{"desc":"84","fix":"85"},[6671,6671]," rel=\"noreferrer\"","Update the dependencies array to be: [device_methods]",{"range":"86","text":"87"},[865,867],"[device_methods]"]