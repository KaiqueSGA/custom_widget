[{"C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\index.js":"1","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\App.js":"2","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\widgets\\device_variables\\device_variables.js":"3","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\device\\device.js":"4","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\location\\location.js":"5"},{"size":320,"mtime":1681473157208,"results":"6","hashOfConfig":"7"},{"size":3430,"mtime":1681473157201,"results":"8","hashOfConfig":"7"},{"size":7342,"mtime":1681473157211,"results":"9","hashOfConfig":"7"},{"size":1424,"mtime":1681473157204,"results":"10","hashOfConfig":"7"},{"size":8697,"mtime":1681473157207,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"xkhjgn",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\index.js",["31","32"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Device_variables } from './widgets/device_variables/device_variables';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <Device_variables />\r\n);\r\n\r\n\r\n","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\App.js",["33","34","35","36","37","38","39"],[],"import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst {Account, Device, Services} = require('@tago-io/sdk'); \r\n\r\n    \r\n    const notify = (message) => toast.success(message);\r\n    const error = (message) => toast.error(message) \r\n    \r\n\r\nfunction App() {\r\n   const account = new Account({token:\"191363cf-b92e-4700-8d9f-ca21d9e9783b\"});\r\n   const my_device = new Device({token:\"1604825b-a5ea-4217-a359-3b0a1ce3232f\"});\r\n\r\n   const [arrayOfdevices,setArray] = useState([]);\r\n\r\n    async function listdevices(){\r\n\r\n         let list_response =  await account.analysis.list();\r\n         await account.analysis.run(\"642474606f1fa600090faf53\")\r\n         const esn_variables = (await my_device.getData({ qty: 200 })).filter(obj => obj.variable === \"esn\")//a cada 100 variáveis eu tenho uma média de 16 variáveis ESN\r\n       \r\n       }\r\n\r\n   \r\n        window.TagoIO.onStart((widget) => {\r\n            window.widget = widget;\r\n        })\r\n        window.TagoIO.ready();\r\n\r\n\r\n\r\n        return(\r\n             <div className=\"container\">\r\n                <ToastContainer />\r\n                    <div className=\"box\">\r\n                        \r\n                        <div className =\"cabecalho\">\r\n                            <div className =\"title\">Enviar Comando</div>\r\n                        </div>\r\n                        \r\n                        \r\n                        <div className =\"fieldOfSelection\">\r\n                \r\n                            <div className=\" label_dev\">\r\n                                <img className =\"drop\" alt='' src=\"https://img.icons8.com/external-zen-filled-royyan-wijaya/2x/external-list-dropdown-business-zen-filled-royyan-wijaya.png\" />\r\n                                <div className =\"title_label\">Select the device to configure it</div> \r\n                            </div>\r\n                \r\n                \r\n                              <div className=\"input\">\r\n                                    <select id=\"devices\" className =\"devices\">\r\n                                    {arrayOfdevices.map((item) =>{\r\n                                        try{\r\n                                            return(\r\n                                                <option value={`${item.id},${item.name}`}> {item.name} </option>\r\n                                            )\r\n                                        }catch(err){\r\n                                           error(err)\r\n                                        }\r\n                                      \r\n                                    })}\r\n                                    </select>\r\n                                </div>  \r\n                                \r\n                \r\n                            \r\n                \r\n                            <div className=\"rodape\">\r\n                                 <button className=\"button\" onClick={() => listdevices()}>\r\n                                    Sent MQTT Message\r\n                                </button> \r\n                            </div>\r\n                \r\n                \r\n                        </div>\r\n                        \r\n                    \r\n                \r\n                    </div>  \r\n                    \r\n                   \r\n                </div>\r\n           \r\n        )\r\n}\r\n\r\nexport default App;","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\widgets\\device_variables\\device_variables.js",["40","41"],[],"import './device_variables.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { tago_device } = require('../../classes/device/device.js');\r\nconst { location_apis } = require('../../classes/location/location.js')\r\n\r\n\r\nfunction Device_variables(){\r\n  const [account_devices, set_account_devices] = useState([]);\r\n  const [device_variables, set_device_variables] = useState([]);\r\n\r\n  const device_methods = new tago_device();\r\n  const location_funcs = new location_apis();\r\n\r\n    window.TagoIO.onStart((widget) => {\r\n        window.widget = widget;\r\n    })\r\n    window.TagoIO.ready();\r\n\r\n\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        device_methods.list()\r\n           .then((resp) => set_account_devices(resp))\r\n           .catch((err) => console.log(err))\r\n    },[])\r\n\r\n    \r\n    \r\n\r\n    return(\r\n        <>\r\n\r\n        <div className='div-mother'>\r\n        <div className='div-filho'>\r\n\r\n        <div className='text-div-mother'>\r\n         <h1>HELLO MY FRIEND!</h1>\r\n         <br/>\r\n         <h3>Choose the device that you wish see the variables:</h3>\r\n         </div>\r\n         <div className=\"input\">\r\n                    <select id=\"devices\" className =\"devices\">\r\n                        {account_devices.map((item) =>{\r\n                          try{\r\n                             return(\r\n                                 <option value={`${item.id},${item.name}`}> {item.name} </option>\r\n                             )\r\n                            }catch(err){\r\n                              console.log(err)\r\n                            }\r\n                                      \r\n                        })}\r\n                    </select>\r\n\r\n                    <button onClick={async() =>  { let request = await device_methods.get_device_variables(); set_device_variables(request.filter(obj => obj.variable === \"esn\")); }}> Show variables</button>\r\n                </div> \r\n\r\n\r\n\r\n                <div className='data_variables'>\r\n\r\n                    \r\n                            \r\n\r\n                        <table border=\"1\" className='variable_tables'>\r\n                            <tr>\r\n                                <td>Origin</td>\r\n                                <td>Coordinates</td>\r\n                                  \r\n                            </tr>\r\n                            {device_variables.map(data => {\r\n\r\n                                setTimeout(() => {// This delay is necessary because firt i need to create an element with the corresponding tag and after i catch the element through of id \r\n                                    const element_id = data.id;\r\n                                    const scope = data; \r\n\r\n                                    document.getElementById(data.id).addEventListener('change', async function(){\r\n                                      \r\n                                        if(this.value === \"MAC\"){ \r\n                                          let element_to_insert_the_new_value = document.getElementsByClassName(element_id)[0];\r\n                                          let element_to_insert_the_address = document.getElementsByClassName(element_id)[1]; \r\n\r\n                                          let mac_coordinates = await location_funcs.get_coordinates_through_mac_datas([\"mac0\", \"mac1\", \"mac2\"],scope); \r\n                                          let address = await location_funcs.get_address_through_coordinates(mac_coordinates.lat, mac_coordinates.lng);\r\n                                         \r\n                                          element_to_insert_the_new_value.innerText = `${mac_coordinates.lat},${mac_coordinates.lng}`;\r\n                                          element_to_insert_the_address.innerText = address;\r\n                                        }\r\n                                        else if(this.value === \"LBS\"){\r\n                                          let element_to_insert_the_new_value = document.getElementsByClassName(element_id)[0];\r\n                                          let element_to_insert_the_address = document.getElementsByClassName(element_id)[1];//Position 1 because i yhave 2 elements with the same tags, the second element will render the address\r\n\r\n                                          let lbs_coordinates = await location_funcs.get_coordinates_through_lbs_datas([\"lbs0\", \"lbs1\", \"lbs2\"],scope, scope.metadata.lbs_mode === \"LTE\" ?\"lte\" :\"gsm\" ); \r\n                                          let address = await location_funcs.get_address_through_coordinates(lbs_coordinates.lat, lbs_coordinates.lng);\r\n                                         \r\n                                          element_to_insert_the_new_value.innerText = `${lbs_coordinates.lat},${lbs_coordinates.lng}`; \r\n                                          element_to_insert_the_address.innerText = address;\r\n                                        }\r\n                                        else{ \r\n                                          let element_to_insert_the_coordinates = document.getElementsByClassName(element_id)[0];\r\n                                          let element_to_insert_the_address = document.getElementsByClassName(element_id)[1]; \r\n\r\n                                          let gps_coordinates = { lat:scope.metadata.lat, lng:scope.metadata.lon };\r\n                                          let address = await location_funcs.get_address_through_coordinates(gps_coordinates.lat, gps_coordinates.lng);\r\n                                          \r\n                                          element_to_insert_the_coordinates.innerText = `${gps_coordinates.lat},${gps_coordinates.lng}`;\r\n                                          element_to_insert_the_address.innerText = address;\r\n                                        \r\n                                        }\r\n\r\n                                    })\r\n\r\n                                },10);\r\n                            \r\n                              return( \r\n                                <tr>\r\n                                    <td className='data_variable'>{data.metadata.origin}</td>\r\n\r\n                                    <td className='b'>\r\n                                        <select id={data.id} className =\"coordinate-types\">\r\n                                            <option>Select the data type that you want to see...</option>\r\n                                            <option value=\"LBS\" >LBS coordinates</option>\r\n                                            <option value=\"MAC\" >MAC coordinates</option>\r\n                                            <option value=\"GPS\" >GPS coordinates</option>\r\n                                        </select>\r\n\r\n                                     \r\n                                     </td>\r\n\r\n                                     <td className={data.id}></td>\r\n                                     <td className={data.id}></td>\r\n\r\n                                </tr>\r\n                              )\r\n\r\n                               \r\n  \r\n\r\n\r\n                            })}\r\n\r\n                        </table>\r\n                        \r\n                            \r\n                    \r\n                </div>\r\n\r\n\r\n\r\n\r\n                </div> \r\n\r\n\r\n           \r\n\r\n            </div>         \r\n         \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport { Device_variables };","C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\device\\device.js",[],[],"C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\src\\classes\\location\\location.js",["42","43"],[],"const axios = require('axios');\r\n\r\n\r\nexport class location_apis {\r\n\r\n\r\n     prepare_mac_parameterers_for_requisition = (wifi_fields, esn) => {//private method\r\n            let wifi_parameters_list = new Array();\r\n    \r\n            if(wifi_fields === undefined){\r\n                return; \r\n            }else{\r\n                wifi_fields.forEach(key => {\r\n                if(!esn.metadata[key]){//if there isn´t nothing field with the specific wifi name, will retun the function.\r\n                  return\r\n                }\r\n            \r\n                let wifi_fields_array = esn.metadata[key].split(\",\");\r\n                wifi_parameters_list.push({\r\n                  macAddress: wifi_fields_array[0],\r\n                  signalStrength: wifi_fields_array[1],\r\n                  signalToNoiseRatio: 0,\r\n                })\r\n            \r\n              });\r\n            } \r\n            \r\n        return wifi_parameters_list;\r\n     }\r\n    \r\n\r\n\r\n\r\n\r\n      prepare_lbs_parameters_for_requesition = (keyTag,esn,dataType) => {\r\n        if(keyTag === undefined){ return; }\r\n\r\n        let lbsList = new Array();   \r\n          \r\n              keyTag.forEach(key => {\r\n      \r\n                  if(!esn.metadata[key]){ return; }// if there isn´t nothing field with the specific lbs, will retun the function.\r\n              \r\n                  let arrayFieldsLbs = (esn.metadata[key]).split(',');\r\n                  if (arrayFieldsLbs.length < 3) { return; }\r\n                  if (arrayFieldsLbs[4] === \"FFFF\" || arrayFieldsLbs[7] === \"0000\") { return; };\r\n      \r\n                  if (arrayFieldsLbs.length > 10) {\r\n\r\n                    if(dataType === \"lte\"){\r\n                        lbsList.push({\r\n                            cell: arrayFieldsLbs[0],\r\n                            earfcn: arrayFieldsLbs[1],\r\n                            pci: arrayFieldsLbs[2],\r\n                            rsrp: arrayFieldsLbs[3],\r\n                            rssi: arrayFieldsLbs[4],\r\n                            rsrq: arrayFieldsLbs[5],\r\n                            sinr: arrayFieldsLbs[6],\r\n                            lac: arrayFieldsLbs[7],\r\n                            cellid:arrayFieldsLbs[8],\r\n                            mcc:arrayFieldsLbs[9],\r\n                            mnc:arrayFieldsLbs[10],\r\n                            txPower:arrayFieldsLbs[11]\r\n                        });\r\n                        }else{\r\n                            lbsList.push({\r\n                                cell: arrayFieldsLbs[0],\r\n                                bcch: arrayFieldsLbs[1],\r\n                                rxl: arrayFieldsLbs[2],\r\n                                rxq: arrayFieldsLbs[3],\r\n                                mcc: arrayFieldsLbs[4],\r\n                                mnc: arrayFieldsLbs[5],\r\n                                bsic: arrayFieldsLbs[6],\r\n                                cellid: arrayFieldsLbs[7],\r\n                                rla: arrayFieldsLbs[8],\r\n                                txp: arrayFieldsLbs[9],\r\n                                lac: arrayFieldsLbs[10],\r\n                                ta: arrayFieldsLbs[11],\r\n                            });\r\n                        }\r\n\r\n                  }else {\r\n                    if(dataType === \"lte\"){\r\n                        lbsList.push({\r\n                      cell: arrayFieldsLbs[0],\r\n                      earfcn: arrayFieldsLbs[1],\r\n                      pci: arrayFieldsLbs[2],\r\n                      rsrp: arrayFieldsLbs[3],\r\n                      rssi: arrayFieldsLbs[4],\r\n                      rsrq: arrayFieldsLbs[5],\r\n                      sinr: arrayFieldsLbs[6]\r\n                      });  \r\n                    \r\n                    }else{\r\n                        lbsList.push({\r\n                            cell: arrayFieldsLbs[0],\r\n                            bcch: arrayFieldsLbs[1],\r\n                            rxl: arrayFieldsLbs[2],\r\n                            bsic: arrayFieldsLbs[3],\r\n                            cellid: arrayFieldsLbs[4],\r\n                            mcc: arrayFieldsLbs[5],\r\n                            mnc: arrayFieldsLbs[6],\r\n                            lac: arrayFieldsLbs[7],\r\n                            });\r\n                    }\r\n\r\n\r\n                  }\r\n        \r\n              });\r\n      \r\n\r\n            \r\n            return lbsList;\r\n      \r\n      }//end of function parseToObjectLBS\r\n     \r\n     \r\n     \r\n     \r\n     \r\n     get_address_through_coordinates = async(latitude, longitude) =>{//public method\r\n        const request = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);\r\n        \r\n        if(request.data.address !== undefined){\r\n          let address = request.data.address;\r\n\r\n          return address.quarter === undefined\r\n                              ? `${address.road} - ${address.suburb} - ${address.state} - ${address.city} - ${address.postcode}`\r\n                              : `${address.road} - ${address.quarter} - ${address.state} - ${address.city} - ${address.postcode}`; \r\n        }else{\r\n         return {address: \"no data available\"};\r\n        }\r\n        \r\n      }\r\n\r\n\r\n\r\n\r\n\r\n       get_coordinates_through_mac_datas = async(wifi_fields, esn) =>{\r\n          \r\n         let list = this.prepare_mac_parameterers_for_requisition(wifi_fields, esn);\r\n        \r\n            try{\r\n                    /* if the mode that i sent to a function is the same the wifi, i want that the function made a macAddress requisition */\r\n                    const result = await axios({\r\n                        method: \"POST\",\r\n                        url: \"https://www.googleapis.com/geolocation/v1/geolocate\",\r\n                        params: {\r\n                          key: \"AIzaSyDq2lk5DBMUg2ymbDimMunBbvQwk-4MeLg\",\r\n                        },\r\n                        data: {\r\n                          homeMobileCountryCode: 0,\r\n                          homeMobileNetworkCode: 0,\r\n                          radioType: \"gsm\",\r\n                          carrier: \"Vodafone\",\r\n                          considerIp: false,\r\n                          wifiAccessPoints: list\r\n                        },\r\n                    })\r\n        \r\n\r\n                    if (!result) { return {lat:0, lng:0} };\r\n                    return result.data.location;\r\n\r\n            }catch(e){ return {lat:0, lng:0} }\r\n   \r\n     } \r\n\r\n\r\n\r\n\r\n\r\n     get_coordinates_through_lbs_datas = async(lbs_fields, esn, data_type) =>{\r\n         try{\r\n                 let list = this.prepare_lbs_parameters_for_requesition(lbs_fields, esn, data_type);\r\n             \r\n                 let cellTowers = list.map((lbs) => {/* I create a array with several objects, this array will be used how parameter in the google API  */\r\n                      return {\r\n                         cellId: data_type === \"lte\" ?  parseInt(lbs.cellid) :parseInt(lbs.cellid),\r\n                         locationAreaCode :data_type === \"lte\" ?parseInt(lbs.lac) :parseInt(lbs.lac),\r\n                         mobileCountryCode: parseInt(lbs.mcc),\r\n                         mobileNetworkCode: parseInt(lbs.mnc),\r\n                        };\r\n                  });\r\n          \r\n                 \r\n                  \r\n                 const lbs0 = list.find((x) => x.cell === \"LBS0\");\r\n                 if(!lbs0){ return {lat:0, lng:0} };\r\n          \r\n            \r\n                    \r\n            /*  Google api will return geography coordinates accordingly with the lbs Datas returned of const cellTowers(objects array) */\r\n                const result = await axios({\r\n                    method: \"POST\",\r\n                    url: \"https://www.googleapis.com/geolocation/v1/geolocate\",\r\n                    params: {\r\n                      key: \"AIzaSyDq2lk5DBMUg2ymbDimMunBbvQwk-4MeLg\",\r\n                    },\r\n                    data: {\r\n                       homeMobileCountryCode: parseInt(lbs0.mcc),\r\n                       homeMobileNetworkCode: parseInt(lbs0.mnc),\r\n                       radioType: data_type === \"lte\" ?\"LTE\" :\"gsm\",//define o tipo de dados que a minha api vai receber GSM | LTE\r\n                       carrier: \"Vodafone\",\r\n                       considerIp: false,\r\n                       cellTowers: data_type === \"lte\" ? [cellTowers[0]] :cellTowers\r\n                      }\r\n                    }).catch((err) => console.log())\r\n                            \r\n                          \r\n                    if(!result) { return {lat:0, lng:0} };\r\n                    return result.data.location;\r\n                    \r\n            }catch(e){ return {lat:0, lng:0}; }\r\n           \r\n        \r\n   \r\n     }\r\n\r\n\r\n}\r\n\r\n\r\n",{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":11},{"ruleId":"48","severity":1,"message":"49","line":10,"column":5,"nodeType":"50","messageId":"51","endLine":10,"endColumn":25},{"ruleId":"44","severity":1,"message":"52","line":2,"column":17,"nodeType":"46","messageId":"47","endLine":2,"endColumn":26},{"ruleId":"44","severity":1,"message":"53","line":5,"column":25,"nodeType":"46","messageId":"47","endLine":5,"endColumn":33},{"ruleId":"44","severity":1,"message":"54","line":8,"column":11,"nodeType":"46","messageId":"47","endLine":8,"endColumn":17},{"ruleId":"44","severity":1,"message":"55","line":16,"column":26,"nodeType":"46","messageId":"47","endLine":16,"endColumn":34},{"ruleId":"44","severity":1,"message":"56","line":20,"column":14,"nodeType":"46","messageId":"47","endLine":20,"endColumn":27},{"ruleId":"44","severity":1,"message":"57","line":22,"column":16,"nodeType":"46","messageId":"47","endLine":22,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":54,"column":64,"nodeType":"60","messageId":"61","endLine":54,"endColumn":66},{"ruleId":"62","severity":1,"message":"63","line":28,"column":7,"nodeType":"64","endLine":28,"endColumn":9,"suggestions":"65"},{"ruleId":"58","severity":1,"message":"59","line":46,"column":53,"nodeType":"60","messageId":"61","endLine":46,"endColumn":55},{"ruleId":"66","severity":1,"message":"67","line":8,"column":40,"nodeType":"68","messageId":"69","endLine":8,"endColumn":51},{"ruleId":"66","severity":1,"message":"67","line":38,"column":23,"nodeType":"68","messageId":"69","endLine":38,"endColumn":34},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Device_variables must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'useEffect' is defined but never used.","'Services' is assigned a value but never used.","'notify' is assigned a value but never used.","'setArray' is assigned a value but never used.","'list_response' is assigned a value but never used.","'esn_variables' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'device_methods'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",{"desc":"71","fix":"72"},"Update the dependencies array to be: [device_methods]",{"range":"73","text":"74"},[772,774],"[device_methods]"]