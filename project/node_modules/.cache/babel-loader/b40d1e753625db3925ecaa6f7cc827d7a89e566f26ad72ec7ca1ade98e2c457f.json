{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RouterConstructor = void 0;\nconst service_1 = __importDefault(require(\"./service\"));\nclass RouterConstructor {}\nexports.RouterConstructor = RouterConstructor;\nclass AnalysisRouter {\n  /**\r\n   * Create an Analysis Router.\r\n   * Use router.register to register new routes for your analysis.\r\n   * Use router.exec() to execute the router and run your functions.\r\n   * Example:\r\n   *      router.register(myFunction).whenInputFormID('create-device-input');\r\n   *      router.exec();\r\n   */\n  constructor(params) {\n    this.params = params;\n    this.services = [];\n  }\n  register(func) {\n    const service = new service_1.default(func);\n    this.services.push(service);\n    return service;\n  }\n  /**\r\n   * Start the router. It will pick the service if all conditions are match\r\n   * and send all parameter provided to the final function.\r\n   * @returns json with status and services that run\r\n   */\n  async exec() {\n    const my_list = [];\n    for (const service of this.services) {\n      if (!service.verifyConditionsTrue(this.params.scope, this.params.environment)) {\n        continue;\n      }\n      service.runService(this.params);\n      my_list.push(service.getServiceName());\n    }\n    return {\n      status: !!my_list.length,\n      services: my_list\n    };\n  }\n}\nexports.default = AnalysisRouter;","map":{"version":3,"mappings":";;;;;;;;;;;AAMA;AAGA,MAAMA,iBAAiB;AAgDdC;AAxCT,MAAMC,cAAc;EAGlB;;;;;;;;EAQAC,YAAoBC,MAAyB;IAAzB,WAAM,GAANA,MAAM;IAV1B,aAAQ,GAAoB,EAAE;EAUkB;EAEzCC,QAAQ,CAACC,IAA4C;IAC1D,MAAMC,OAAO,GAAG,IAAIC,iBAAa,CAACF,IAAI,CAAC;IACvC,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACH,OAAO,CAAC;IAE3B,OAAOA,OAAO;EAChB;EAEA;;;;;EAKO,MAAMI,IAAI;IACf,MAAMC,OAAO,GAAa,EAAE;IAC5B,KAAK,MAAML,OAAO,IAAI,IAAI,CAACE,QAAQ,EAAE;MACnC,IAAI,CAACF,OAAO,CAACM,oBAAoB,CAAC,IAAI,CAACT,MAAM,CAACU,KAAK,EAAE,IAAI,CAACV,MAAM,CAACW,WAAW,CAAC,EAAE;QAC7E;;MAGFR,OAAO,CAACS,UAAU,CAAC,IAAI,CAACZ,MAAM,CAAC;MAC/BQ,OAAO,CAACF,IAAI,CAACH,OAAO,CAACU,cAAc,EAAE,CAAC;;IAGxC,OAAO;MAAEC,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM;MAAEV,QAAQ,EAAEG;IAAO,CAAE;EACxD;;AAIFX,kBAAeC,cAAc","names":["RouterConstructor","exports","AnalysisRouter","constructor","params","register","func","service","service_1","services","push","exec","my_list","verifyConditionsTrue","scope","environment","runService","getServiceName","status","length"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\router\\router.ts"],"sourcesContent":["import { Data } from \"../../../common/common.types\";\r\nimport Account from \"../../Account/Account\";\r\nimport { MQTTResourceAction } from \"../../Account/actions.types\";\r\nimport { DeviceCreateInfo } from \"../../Account/devices.types\";\r\nimport { TagoContext } from \"../../Analysis/analysis.types\";\r\nimport Device from \"../../Device/Device\";\r\nimport RouterService from \"./service\";\r\n\r\ntype Scope = (Data | DeviceCreateInfo | { input_form_button_id: string } | MQTTResourceAction)[];\r\nclass RouterConstructor {\r\n  scope: Scope;\r\n  environment: { [key: string]: string };\r\n  account?: Account;\r\n  config_dev?: Device;\r\n  context?: TagoContext;\r\n}\r\n\r\nclass AnalysisRouter {\r\n  services: RouterService[] = [];\r\n\r\n  /**\r\n   * Create an Analysis Router.\r\n   * Use router.register to register new routes for your analysis.\r\n   * Use router.exec() to execute the router and run your functions.\r\n   * Example:\r\n   *      router.register(myFunction).whenInputFormID('create-device-input');\r\n   *      router.exec();\r\n   */\r\n  constructor(private params: RouterConstructor) {}\r\n\r\n  public register(func: (parameters: RouterConstructor) => any) {\r\n    const service = new RouterService(func);\r\n    this.services.push(service);\r\n\r\n    return service;\r\n  }\r\n\r\n  /**\r\n   * Start the router. It will pick the service if all conditions are match\r\n   * and send all parameter provided to the final function.\r\n   * @returns json with status and services that run\r\n   */\r\n  public async exec() {\r\n    const my_list: string[] = [];\r\n    for (const service of this.services) {\r\n      if (!service.verifyConditionsTrue(this.params.scope, this.params.environment)) {\r\n        continue;\r\n      }\r\n\r\n      service.runService(this.params);\r\n      my_list.push(service.getServiceName());\r\n    }\r\n\r\n    return { status: !!my_list.length, services: my_list };\r\n  }\r\n}\r\n\r\nexport { RouterConstructor };\r\nexport default AnalysisRouter;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}