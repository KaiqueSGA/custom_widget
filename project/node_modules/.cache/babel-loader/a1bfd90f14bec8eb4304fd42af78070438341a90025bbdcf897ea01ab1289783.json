{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Account_1 = __importDefault(require(\"../Account/Account\"));\nvar path_1 = __importDefault(require(\"path\"));\n/**\n * Upload a file and return it's URL.\n */\nfunction uploadFile(_x, _x2) {\n  return _uploadFile.apply(this, arguments);\n}\nfunction _uploadFile() {\n  _uploadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account, options) {\n    var _yield$account$info, account_id, fixed_path, body;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (account instanceof Account_1.default) {\n              _context.next = 2;\n              break;\n            }\n            throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n          case 2:\n            _context.next = 4;\n            return account.info();\n          case 4:\n            _yield$account$info = _context.sent;\n            account_id = _yield$account$info.id;\n            if (!options.path) {\n              _context.next = 10;\n              break;\n            }\n            if (options.path.includes(\"/\")) {\n              _context.next = 9;\n              break;\n            }\n            throw \"Invalid file path: \".concat(options.path);\n          case 9:\n            if (options.path.startsWith(\"/\")) {\n              options.path = options.path.substring(1);\n            }\n          case 10:\n            fixed_path = path_1.default.join(options.path || \"\", options.filename);\n            body = {\n              file: options.file_base64,\n              filename: fixed_path\n            };\n            _context.next = 14;\n            return account.files.uploadBase64([_objectSpread(_objectSpread({}, body), {}, {\n              public: options.public || true\n            })]);\n          case 14:\n            return _context.abrupt(\"return\", \"https://api.tago.io/file/\".concat(account_id, \"/\").concat(fixed_path));\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _uploadFile.apply(this, arguments);\n}\nexports.default = uploadFile;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AAEA;AAIA;;;AAAA,SAGeA,UAAU;EAAA;AAAA;AAAA;EAAA,yEAAzB,iBAA0BC,OAAgB,EAAEC,OAA0B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IAC9DD,OAAO,YAAYE,iBAAO;cAAA;cAAA;YAAA;YAAA,MACxB,kEAAkE;UAAA;YAAA;YAAA,OAGzCF,OAAO,CAACG,IAAI,EAAE;UAAA;YAAA;YAAnCC,UAAU,uBAAdC,EAAE;YAAA,KAENJ,OAAO,CAACK,IAAI;cAAA;cAAA;YAAA;YAAA,IACTL,OAAO,CAACK,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC;cAAA;cAAA;YAAA;YAAA,mCACDN,OAAO,CAACK,IAAI;UAAA;YAG1C,IAAIL,OAAO,CAACK,IAAI,CAACE,UAAU,CAAC,GAAG,CAAC,EAAE;cAChCP,OAAO,CAACK,IAAI,GAAGL,OAAO,CAACK,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;;UACzC;YAGGC,UAAU,GAAGC,cAAI,CAACC,IAAI,CAACX,OAAO,CAACK,IAAI,IAAI,EAAE,EAAEL,OAAO,CAACY,QAAQ,CAAC;YAE5DC,IAAI,GAAG;cAAEC,IAAI,EAAEd,OAAO,CAACe,WAAW;cAAEH,QAAQ,EAAEH;YAAU,CAAE;YAAA;YAAA,OAC1DV,OAAO,CAACiB,KAAK,CAACC,YAAY,CAAC,iCAAMJ,IAAI;cAAEK,MAAM,EAAElB,OAAO,CAACkB,MAAM,IAAI;YAAI,GAAG,CAAC;UAAA;YAAA,oEAE5Cf,UAAU,cAAIM,UAAU;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC5D;EAAA;AAAA;AAEDU,kBAAerB,UAAU","names":["uploadFile","account","options","Account_1","info","account_id","id","path","includes","startsWith","substring","fixed_path","path_1","join","filename","body","file","file_base64","files","uploadBase64","public","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\uploadFile.ts"],"sourcesContent":["import Account from \"../Account/Account\";\nimport { UploadFileOptions } from \"./utils.types\";\nimport path from \"path\";\n\ntype FileURL = string;\n\n/**\n * Upload a file and return it's URL.\n */\nasync function uploadFile(account: Account, options: UploadFileOptions): Promise<FileURL> {\n  if (!(account instanceof Account)) {\n    throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n  }\n\n  const { id: account_id } = await account.info();\n\n  if (options.path) {\n    if (!options.path.includes(\"/\")) {\n      throw `Invalid file path: ${options.path}`;\n    }\n\n    if (options.path.startsWith(\"/\")) {\n      options.path = options.path.substring(1);\n    }\n  }\n\n  const fixed_path = path.join(options.path || \"\", options.filename);\n\n  const body = { file: options.file_base64, filename: fixed_path };\n  await account.files.uploadBase64([{ ...body, public: options.public || true }]);\n\n  return `https://api.tago.io/file/${account_id}/${fixed_path}`;\n}\n\nexport default uploadFile;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}