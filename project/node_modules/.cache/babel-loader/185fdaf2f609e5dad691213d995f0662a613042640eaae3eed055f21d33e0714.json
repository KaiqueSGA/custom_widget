{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @internal\n */\nvar noRegionWarning = false;\n/**\n * Object of Regions Definition\n * @internal\n */\nvar regionsDefinition = {\n  \"usa-1\": {\n    api: \"https://api.tago.io\",\n    realtime: \"wss://realtime.tago.io\"\n  },\n  env: undefined // ? process object should be on trycatch.\n};\n/**\n * Get connection URI for Realtime and API\n * @internal\n * @param region Region\n */\nfunction getConnectionURI(region) {\n  var value = regionsDefinition[region];\n  if (value) {\n    return value;\n  }\n  if (region !== undefined && !region !== null && region !== \"env\") {\n    throw new ReferenceError(\"> TagoIO-SDK: Invalid region \".concat(region, \".\"));\n  }\n  try {\n    var api = process.env.TAGOIO_API;\n    var realtime = process.env.TAGOIO_REALTIME;\n    if (!api && region !== \"env\") {\n      throw \"Invalid Env\";\n    }\n    return {\n      api: api,\n      realtime: realtime\n    };\n  } catch (error) {\n    if (!noRegionWarning) {\n      console.info(\"> TagoIO-SDK: No region or env defined, using fallback as usa-1.\");\n      noRegionWarning = true;\n    }\n    return regionsDefinition[\"usa-1\"];\n  }\n}\nexports.default = getConnectionURI;","map":{"version":3,"mappings":";;;;;AAAA;;;AAGA,IAAIA,eAAe,GAAG,KAAK;AAO3B;;;;AAIA,IAAMC,iBAAiB,GAAG;EACxB,OAAO,EAAE;IACPC,GAAG,EAAE,qBAAqB;IAC1BC,QAAQ,EAAE;GACX;EACDC,GAAG,EAAEC,SAAiB,CAAE;CACzB;AAED;;;;;AAKA,SAASC,gBAAgB,CAACC,MAAgB;EACxC,IAAMC,KAAK,GAAGP,iBAAiB,CAACM,MAAM,CAAC;EAEvC,IAAIC,KAAK,EAAE;IACT,OAAOA,KAAK;;EAGd,IAAID,MAAM,KAAKF,SAAS,IAAI,CAACE,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,EAAE;IAChE,MAAM,IAAIE,cAAc,wCAAiCF,MAAM,OAAI;;EAGrE,IAAI;IACF,IAAML,GAAG,GAAGQ,OAAO,CAACN,GAAG,CAACO,UAAU;IAClC,IAAMR,QAAQ,GAAGO,OAAO,CAACN,GAAG,CAACQ,eAAe;IAE5C,IAAI,CAACV,GAAG,IAAIK,MAAM,KAAK,KAAK,EAAE;MAC5B,MAAM,aAAa;;IAGrB,OAAO;MAAEL,GAAG,EAAHA,GAAG;MAAEC,QAAQ,EAARA;IAAQ,CAAE;GACzB,CAAC,OAAOU,KAAK,EAAE;IACd,IAAI,CAACb,eAAe,EAAE;MACpBc,OAAO,CAACC,IAAI,CAAC,kEAAkE,CAAC;MAChFf,eAAe,GAAG,IAAI;;IAGxB,OAAOC,iBAAiB,CAAC,OAAO,CAAC;;AAErC;AAIAe,kBAAeV,gBAAgB","names":["noRegionWarning","regionsDefinition","api","realtime","env","undefined","getConnectionURI","region","value","ReferenceError","process","TAGOIO_API","TAGOIO_REALTIME","error","console","info","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\regions.ts"],"sourcesContent":["/**\n * @internal\n */\nlet noRegionWarning = false;\n\ninterface RegionsObj {\n  api: string;\n  realtime: string;\n}\n\n/**\n * Object of Regions Definition\n * @internal\n */\nconst regionsDefinition = {\n  \"usa-1\": {\n    api: \"https://api.tago.io\",\n    realtime: \"wss://realtime.tago.io\",\n  },\n  env: undefined as void, // ? process object should be on trycatch.\n};\n\n/**\n * Get connection URI for Realtime and API\n * @internal\n * @param region Region\n */\nfunction getConnectionURI(region?: Regions): RegionsObj {\n  const value = regionsDefinition[region];\n\n  if (value) {\n    return value;\n  }\n\n  if (region !== undefined && !region !== null && region !== \"env\") {\n    throw new ReferenceError(`> TagoIO-SDK: Invalid region ${region}.`);\n  }\n\n  try {\n    const api = process.env.TAGOIO_API;\n    const realtime = process.env.TAGOIO_REALTIME;\n\n    if (!api && region !== \"env\") {\n      throw \"Invalid Env\";\n    }\n\n    return { api, realtime };\n  } catch (error) {\n    if (!noRegionWarning) {\n      console.info(\"> TagoIO-SDK: No region or env defined, using fallback as usa-1.\");\n      noRegionWarning = true;\n    }\n\n    return regionsDefinition[\"usa-1\"];\n  }\n}\n\ntype Regions = \"usa-1\" | \"env\";\n\nexport default getConnectionURI;\nexport { Regions };\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}