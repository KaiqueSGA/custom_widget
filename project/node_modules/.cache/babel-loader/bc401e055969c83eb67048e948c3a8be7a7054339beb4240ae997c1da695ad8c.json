{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar lodash_1 = require(\"lodash\");\nvar sleep_1 = __importDefault(require(\"../../common/sleep\"));\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Device = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Device, _TagoIOModule_1$defau);\n  var _super = _createSuper(Device);\n  function Device() {\n    _classCallCheck(this, Device);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Device, [{\n    key: \"info\",\n    value:\n    /**\r\n     * Get information about the current device\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.info();\r\n     * ```\r\n     */\n    function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/info\",\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_input\", \"last_output\"]);\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function info() {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\r\n     * Send data to device\r\n     * @param data An array or one object with data to be send to TagoIO using device token\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.sendData({\r\n     *   variable: \"temperature\",\r\n     *   unit: \"F\",\r\n     *   value: 55,\r\n     *   time: \"2015-11-03 13:44:33\",\r\n     *   location: { lat: 42.2974279, lng: -85.628292 },\r\n     * });\r\n     * ```\r\n     */\n  }, {\n    key: \"sendData\",\n    value: function () {\n      var _sendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = Array.isArray(data) ? data : [data];\n                _context2.next = 3;\n                return this.doRequest({\n                  path: \"/data\",\n                  method: \"POST\",\n                  body: data\n                });\n              case 3:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function sendData(_x) {\n        return _sendData.apply(this, arguments);\n      }\n      return sendData;\n    }()\n    /**\r\n     * Get data from TagoIO Device.\r\n     * @param queryParams Object with query params\r\n     * @returns An array of TagoIO registers\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.getData({\r\n     *   query: \"last_item\",\r\n     *   variable: \"humidity\",\r\n     * });\r\n     * ```\r\n     */\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(queryParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.query) === \"default\") {\n                  delete queryParams.query;\n                }\n                _context3.next = 3;\n                return this.doRequest({\n                  path: \"/data\",\n                  method: \"GET\",\n                  params: queryParams\n                });\n              case 3:\n                result = _context3.sent;\n                if (typeof result === \"number\") {\n                  result = [{\n                    id: \"none\",\n                    origin: \"?\",\n                    time: new Date(),\n                    value: result,\n                    variable: \"?\"\n                  }];\n                }\n                return _context3.abrupt(\"return\", result.map(function (item) {\n                  return (0, dateParser_1.default)(item, [\"time\", \"created_at\"]);\n                }));\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getData(_x2) {\n        return _getData.apply(this, arguments);\n      }\n      return getData;\n    }()\n    /**\r\n     * Edit data in a Mutable-type device.\r\n     *\r\n     * @param data Array or object with the data to be edited, each object with the data's ID.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.editData({\r\n     *   id: \"id_of_the_data_item\",\r\n     *   value: 123,\r\n     *   time: \"2022-04-01 12:34:56\",\r\n     *   location: { lat: 42.2974279, lng: -85.628292 },\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns Success message with the amount of data items updated.\r\n     */\n  }, {\n    key: \"editData\",\n    value: function () {\n      var _editData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = Array.isArray(data) ? data : [data];\n                _context4.next = 3;\n                return this.doRequest({\n                  path: \"/data\",\n                  method: \"PUT\",\n                  body: data\n                });\n              case 3:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function editData(_x3) {\n        return _editData.apply(this, arguments);\n      }\n      return editData;\n    }()\n    /**\r\n     * Delete data from device\r\n     * @param queryParams\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.deleteData({\r\n     *   query: \"last_item\",\r\n     *   variable: \"humidity\",\r\n     *   value: 10\r\n     * });\r\n     * ```\r\n     */\n  }, {\n    key: \"deleteData\",\n    value: function () {\n      var _deleteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(queryParams) {\n        var _queryParams;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!queryParams) {\n                  queryParams = {\n                    query: \"last_item\"\n                  };\n                }\n                if (((_queryParams = queryParams) === null || _queryParams === void 0 ? void 0 : _queryParams.query) === \"default\") {\n                  delete queryParams.query;\n                }\n                _context5.next = 4;\n                return this.doRequest({\n                  path: \"/data\",\n                  method: \"DELETE\",\n                  params: queryParams\n                });\n              case 4:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function deleteData(_x4) {\n        return _deleteData.apply(this, arguments);\n      }\n      return deleteData;\n    }()\n    /**\r\n     * Get parameters from device\r\n     * @param onlyUnRead set true to get only unread parameters\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.getParameters();\r\n     * ```\r\n     */\n  }, {\n    key: \"getParameters\",\n    value: function () {\n      var _getParameters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(status) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                params = {};\n                if (status === \"onlyRead\") {\n                  params.sent_status = true;\n                } else if (status === \"onlyUnRead\") {\n                  params.sent_status = false;\n                }\n                // ? Support for old call (onlyUnRead?: boolean)\n                // @ts-expect-error\n                if (status === true) {\n                  params.sent_status = false;\n                }\n                _context6.next = 5;\n                return this.doRequest({\n                  path: \"/device/params\",\n                  method: \"GET\",\n                  params: params\n                });\n              case 5:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getParameters(_x5) {\n        return _getParameters.apply(this, arguments);\n      }\n      return getParameters;\n    }()\n    /**\r\n     * Mark parameter as read\r\n     * @param parameterID Parameter identification\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const result = await myDevice.setParameterAsRead(\"parameter_id\");\r\n     * ```\r\n     *\r\n     */\n  }, {\n    key: \"setParameterAsRead\",\n    value: function () {\n      var _setParameterAsRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(parameterID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/device/params/\".concat(parameterID),\n                  method: \"PUT\",\n                  body: {\n                    sent: true\n                  }\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function setParameterAsRead(_x6) {\n        return _setParameterAsRead.apply(this, arguments);\n      }\n      return setParameterAsRead;\n    }()\n    /**\r\n     * Get Data Streaming\r\n     *\r\n     * @experimental\r\n     * @param params Data Query\r\n     * @param options Stream options\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * for await (const items of myDevice.getDataStreaming()) {\r\n     *  console.log(items);\r\n     * }\r\n     * ```\r\n     */\n  }, {\n    key: \"getDataStreaming\",\n    value: function getDataStreaming(params, options) {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var poolingRecordQty, poolingTime, neverStop, qty, skip, stop;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                poolingRecordQty = (options === null || options === void 0 ? void 0 : options.poolingRecordQty) || 1000;\n                poolingTime = (options === null || options === void 0 ? void 0 : options.poolingTime) || 1000; // 1 seg\n                neverStop = (options === null || options === void 0 ? void 0 : options.neverStop) || false;\n                if (!(poolingRecordQty > 10000)) {\n                  _context9.next = 5;\n                  break;\n                }\n                throw new Error(\"The maximum of poolingRecordQty is 10000\");\n              case 5:\n                qty = Math.ceil(poolingRecordQty);\n                skip = 0;\n                stop = false;\n              case 8:\n                if (stop) {\n                  _context9.next = 15;\n                  break;\n                }\n                _context9.next = 11;\n                return _awaitAsyncGenerator((0, sleep_1.default)(poolingTime));\n              case 11:\n                _context9.next = 13;\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                  var data;\n                  return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return _this.getData(_objectSpread(_objectSpread({}, params), {}, {\n                            qty: qty,\n                            skip: skip,\n                            query: \"default\",\n                            ordination: \"ascending\"\n                          }));\n                        case 2:\n                          data = _context8.sent;\n                          skip += data.length;\n                          if (!neverStop) {\n                            stop = data.length === 0 || data.length < poolingRecordQty;\n                          }\n                          return _context8.abrupt(\"return\", data);\n                        case 6:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))();\n              case 13:\n                _context9.next = 8;\n                break;\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    }\n    /**\r\n     * Stream data to device\r\n     *\r\n     * @experimental\r\n     * @param data An array or one object with data to be send to TagoIO using device token\r\n     * @param options Stream options\r\n     * @example\r\n     * ```js\r\n     * const myDevice = new Device({ token: \"my_device_token\" });\r\n     *\r\n     * const data = [\r\n     *     {\r\n     *       variable: \"temperature\",\r\n     *       unit: \"F\",\r\n     *       value: 55,\r\n     *       time: \"2015-11-03 13:44:33\",\r\n     *       location: { lat: 42.2974279, lng: -85.628292 },\r\n     *     },\r\n     *     {\r\n     *       variable: \"temperature\",\r\n     *       unit: \"F\",\r\n     *       value: 53,\r\n     *       time: \"2015-11-03 13:44:33\",\r\n     *       location: { lat: 43.2974279, lng: -86.628292 },\r\n     *     },\r\n     *     // ...\r\n     *   ];\r\n     *\r\n     *   const result = await myDevice.sendDataStreaming(data, {\r\n     *     poolingRecordQty: 1000,\r\n     *     poolingTime: 1000,\r\n     *   });\r\n     * ```\r\n     */\n  }, {\n    key: \"sendDataStreaming\",\n    value: function () {\n      var _sendDataStreaming = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(data, options) {\n        var poolingRecordQty, poolingTime, dataChunk, _iterator, _step, items;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                poolingRecordQty = (options === null || options === void 0 ? void 0 : options.poolingRecordQty) || 1000;\n                poolingTime = (options === null || options === void 0 ? void 0 : options.poolingTime) || 1000; // 1 seg\n                if (Array.isArray(data)) {\n                  _context10.next = 4;\n                  break;\n                }\n                return _context10.abrupt(\"return\", Promise.reject(\"Only data array is allowed\"));\n              case 4:\n                dataChunk = (0, lodash_1.chunk)(data, poolingRecordQty);\n                _iterator = _createForOfIteratorHelper(dataChunk);\n                _context10.prev = 6;\n                _iterator.s();\n              case 8:\n                if ((_step = _iterator.n()).done) {\n                  _context10.next = 16;\n                  break;\n                }\n                items = _step.value;\n                _context10.next = 12;\n                return this.sendData(items);\n              case 12:\n                _context10.next = 14;\n                return (0, sleep_1.default)(poolingTime);\n              case 14:\n                _context10.next = 8;\n                break;\n              case 16:\n                _context10.next = 21;\n                break;\n              case 18:\n                _context10.prev = 18;\n                _context10.t0 = _context10[\"catch\"](6);\n                _iterator.e(_context10.t0);\n              case 21:\n                _context10.prev = 21;\n                _iterator.f();\n                return _context10.finish(21);\n              case 24:\n                return _context10.abrupt(\"return\", \"\".concat(data.length, \" Data added.\"));\n              case 25:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[6, 18, 21, 24]]);\n      }));\n      function sendDataStreaming(_x7, _x8) {\n        return _sendDataStreaming.apply(this, arguments);\n      }\n      return sendDataStreaming;\n    }()\n  }]);\n  return Device;\n}(TagoIOModule_1.default);\nexports.default = Device;","map":{"version":3,"mappings":"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","names":["Device","doRequest","path","method","result","data","Array","isArray","body","queryParams","query","params","id","origin","time","Date","value","variable","map","item","status","sent_status","parameterID","sent","options","poolingRecordQty","poolingTime","neverStop","Error","qty","Math","ceil","skip","stop","getData","ordination","length","Promise","reject","dataChunk","items","sendData","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Device\\Device.ts"],"sourcesContent":["import { chunk } from \"lodash\";\r\nimport { Data, DataCreate, DataEdit, GenericID } from \"../../common/common.types\";\r\nimport sleep from \"../../common/sleep\";\r\nimport TagoIOModule from \"../../common/TagoIOModule\";\r\nimport { ConfigurationParams } from \"../Account/devices.types\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport { DataQuery, DataQueryStreaming, DeviceConstructorParams, DeviceInfo, OptionsStreaming } from \"./device.types\";\r\n\r\nclass Device extends TagoIOModule<DeviceConstructorParams> {\r\n  /**\r\n   * Get information about the current device\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.info();\r\n   * ```\r\n   */\r\n  public async info(): Promise<DeviceInfo> {\r\n    let result = await this.doRequest<DeviceInfo>({\r\n      path: \"/info\",\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_input\", \"last_output\"]);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Send data to device\r\n   * @param data An array or one object with data to be send to TagoIO using device token\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.sendData({\r\n   *   variable: \"temperature\",\r\n   *   unit: \"F\",\r\n   *   value: 55,\r\n   *   time: \"2015-11-03 13:44:33\",\r\n   *   location: { lat: 42.2974279, lng: -85.628292 },\r\n   * });\r\n   * ```\r\n   */\r\n  public async sendData(data: DataCreate | DataCreate[]): Promise<string> {\r\n    data = Array.isArray(data) ? data : [data];\r\n\r\n    const result = await this.doRequest<string>({\r\n      path: \"/data\",\r\n      method: \"POST\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get data from TagoIO Device.\r\n   * @param queryParams Object with query params\r\n   * @returns An array of TagoIO registers\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.getData({\r\n   *   query: \"last_item\",\r\n   *   variable: \"humidity\",\r\n   * });\r\n   * ```\r\n   */\r\n  public async getData(queryParams?: DataQuery): Promise<Data[]> {\r\n    if (queryParams?.query === \"default\") {\r\n      delete queryParams.query;\r\n    }\r\n\r\n    let result = await this.doRequest<Data[] | number>({\r\n      path: \"/data\",\r\n      method: \"GET\",\r\n      params: queryParams,\r\n    });\r\n\r\n    if (typeof result === \"number\") {\r\n      result = [\r\n        {\r\n          id: \"none\",\r\n          origin: \"?\",\r\n          time: new Date(),\r\n          value: result,\r\n          variable: \"?\",\r\n        },\r\n      ] as Data[];\r\n    }\r\n\r\n    return result.map((item) => dateParser(item, [\"time\", \"created_at\"]));\r\n  }\r\n\r\n  /**\r\n   * Edit data in a Mutable-type device.\r\n   *\r\n   * @param data Array or object with the data to be edited, each object with the data's ID.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.editData({\r\n   *   id: \"id_of_the_data_item\",\r\n   *   value: 123,\r\n   *   time: \"2022-04-01 12:34:56\",\r\n   *   location: { lat: 42.2974279, lng: -85.628292 },\r\n   * });\r\n   * ```\r\n   *\r\n   * @returns Success message with the amount of data items updated.\r\n   */\r\n  public async editData(data: DataEdit | DataEdit[]): Promise<string> {\r\n    data = Array.isArray(data) ? data : [data];\r\n\r\n    const result = await this.doRequest<string>({\r\n      path: \"/data\",\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete data from device\r\n   * @param queryParams\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.deleteData({\r\n   *   query: \"last_item\",\r\n   *   variable: \"humidity\",\r\n   *   value: 10\r\n   * });\r\n   * ```\r\n   */\r\n  public async deleteData(queryParams?: DataQuery): Promise<string> {\r\n    if (!queryParams) {\r\n      queryParams = { query: \"last_item\" };\r\n    }\r\n\r\n    if (queryParams?.query === \"default\") {\r\n      delete queryParams.query;\r\n    }\r\n\r\n    const result = await this.doRequest<string>({\r\n      path: \"/data\",\r\n      method: \"DELETE\",\r\n      params: queryParams,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get parameters from device\r\n   * @param onlyUnRead set true to get only unread parameters\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.getParameters();\r\n   * ```\r\n   */\r\n  public async getParameters(status: \"all\" | \"onlyUnRead\" | \"onlyRead\"): Promise<ConfigurationParams[]> {\r\n    const params: { sent_status?: boolean } = {};\r\n\r\n    if (status === \"onlyRead\") {\r\n      params.sent_status = true;\r\n    } else if (status === \"onlyUnRead\") {\r\n      params.sent_status = false;\r\n    }\r\n\r\n    // ? Support for old call (onlyUnRead?: boolean)\r\n    // @ts-expect-error\r\n    if (status === true) {\r\n      params.sent_status = false;\r\n    }\r\n\r\n    const result = await this.doRequest<ConfigurationParams[]>({\r\n      path: \"/device/params\",\r\n      method: \"GET\",\r\n      params: params,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Mark parameter as read\r\n   * @param parameterID Parameter identification\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const result = await myDevice.setParameterAsRead(\"parameter_id\");\r\n   * ```\r\n   *\r\n   */\r\n  public async setParameterAsRead(parameterID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/params/${parameterID}`,\r\n      method: \"PUT\",\r\n      body: { sent: true },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Data Streaming\r\n   *\r\n   * @experimental\r\n   * @param params Data Query\r\n   * @param options Stream options\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * for await (const items of myDevice.getDataStreaming()) {\r\n   *  console.log(items);\r\n   * }\r\n   * ```\r\n   */\r\n  public async *getDataStreaming(params?: DataQueryStreaming, options?: OptionsStreaming) {\r\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\r\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\r\n    const neverStop = options?.neverStop || false;\r\n\r\n    if (poolingRecordQty > 10000) {\r\n      throw new Error(\"The maximum of poolingRecordQty is 10000\");\r\n    }\r\n\r\n    const qty: number = Math.ceil(poolingRecordQty);\r\n    let skip: number = 0;\r\n    let stop: boolean = false;\r\n\r\n    while (!stop) {\r\n      await sleep(poolingTime);\r\n\r\n      yield (async () => {\r\n        const data = await this.getData({ ...params, qty, skip, query: \"default\", ordination: \"ascending\" });\r\n        skip += data.length;\r\n\r\n        if (!neverStop) {\r\n          stop = data.length === 0 || data.length < poolingRecordQty;\r\n        }\r\n\r\n        return data;\r\n      })();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stream data to device\r\n   *\r\n   * @experimental\r\n   * @param data An array or one object with data to be send to TagoIO using device token\r\n   * @param options Stream options\r\n   * @example\r\n   * ```js\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const data = [\r\n   *     {\r\n   *       variable: \"temperature\",\r\n   *       unit: \"F\",\r\n   *       value: 55,\r\n   *       time: \"2015-11-03 13:44:33\",\r\n   *       location: { lat: 42.2974279, lng: -85.628292 },\r\n   *     },\r\n   *     {\r\n   *       variable: \"temperature\",\r\n   *       unit: \"F\",\r\n   *       value: 53,\r\n   *       time: \"2015-11-03 13:44:33\",\r\n   *       location: { lat: 43.2974279, lng: -86.628292 },\r\n   *     },\r\n   *     // ...\r\n   *   ];\r\n   *\r\n   *   const result = await myDevice.sendDataStreaming(data, {\r\n   *     poolingRecordQty: 1000,\r\n   *     poolingTime: 1000,\r\n   *   });\r\n   * ```\r\n   */\r\n  public async sendDataStreaming(data: DataCreate[], options: Omit<OptionsStreaming, \"neverStop\">) {\r\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\r\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\r\n\r\n    if (!Array.isArray(data)) {\r\n      return Promise.reject(\"Only data array is allowed\");\r\n    }\r\n\r\n    const dataChunk = chunk(data, poolingRecordQty);\r\n    for (const items of dataChunk) {\r\n      await this.sendData(items);\r\n\r\n      await sleep(poolingTime);\r\n    }\r\n\r\n    return `${data.length} Data added.`;\r\n  }\r\n}\r\n\r\nexport default Device;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}