{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Actions extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list with all actions from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/action\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_triggered\"]));\n    return result;\n  }\n  /**\n   * Generates and retrieves a new action from the account\n   * @param actionObj Object data to create new TagoIO Action\n   */\n  async create(actionObj) {\n    const result = await this.doRequest({\n      path: \"/action\",\n      method: \"POST\",\n      body: actionObj\n    });\n    return result;\n  }\n  /**\n   * Modify any property of the action.\n   * @param actionID Action ID\n   * @param actionObj Action Object with data to be replaced\n   */\n  async edit(actionID, actionObj) {\n    const result = await this.doRequest({\n      path: `/action/${actionID}`,\n      method: \"PUT\",\n      body: actionObj\n    });\n    return result;\n  }\n  /**\n   * Deletes an action from the account\n   * @param actionID Action ID\n   */\n  async delete(actionID) {\n    const result = await this.doRequest({\n      path: `/action/${actionID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Gets information about the action\n   * @param actionID Action ID\n   */\n  async info(actionID) {\n    let result = await this.doRequest({\n      path: `/action/${actionID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_triggered\"]);\n    return result;\n  }\n}\nexports.default = Actions;","map":{"version":3,"mappings":";;;;;;;;;;AACA;AACA;AAGA,MAAMA,OAAQ,SAAQC,sBAAiC;EACrD;;;;;;;;;;;;;;EAcO,MAAMC,IAAI,CAACC,QAAsB;IACtC,IAAIC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAe;MAC9CC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNC,IAAI,EAAEN,QAAQ,EAAEM,IAAI,IAAI,CAAC;QACzBC,MAAM,EAAEP,QAAQ,EAAEO,MAAM,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;QAC1CC,MAAM,EAAER,QAAQ,EAAEQ,MAAM,IAAI,EAAE;QAC9BC,MAAM,EAAET,QAAQ,EAAES,MAAM,IAAI,EAAE;QAC9BC,OAAO,EAAEV,QAAQ,EAAEU,OAAO,GAAG,GAAGV,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,IAAIV,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG;;KAElF,CAAC;IAEFT,MAAM,GAAGA,MAAM,CAACU,GAAG,CAAEC,IAAI,IAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAE/F,OAAOX,MAAM;EACf;EAEA;;;;EAIO,MAAMY,MAAM,CAACC,SAA2B;IAC7C,MAAMb,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAqB;MACtDC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,MAAM;MACdW,IAAI,EAAED;KACP,CAAC;IAEF,OAAOb,MAAM;EACf;EAEA;;;;;EAKO,MAAMe,IAAI,CAACC,QAAmB,EAAEH,SAAoC;IACzE,MAAMb,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,WAAWc,QAAQ,EAAE;MAC3Bb,MAAM,EAAE,KAAK;MACbW,IAAI,EAAED;KACP,CAAC;IAEF,OAAOb,MAAM;EACf;EAEA;;;;EAIO,MAAMiB,MAAM,CAACD,QAAmB;IACrC,MAAMhB,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,WAAWc,QAAQ,EAAE;MAC3Bb,MAAM,EAAE;KACT,CAAC;IAEF,OAAOH,MAAM;EACf;EAEA;;;;EAIO,MAAMkB,IAAI,CAACF,QAAmB;IACnC,IAAIhB,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAa;MAC5CC,IAAI,EAAE,WAAWc,QAAQ,EAAE;MAC3Bb,MAAM,EAAE;KACT,CAAC;IAEFH,MAAM,GAAG,wBAAU,EAACA,MAAM,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAE3E,OAAOA,MAAM;EACf;;AAGFmB,kBAAevB,OAAO","names":["Actions","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","create","actionObj","body","edit","actionID","delete","info","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Actions.ts"],"sourcesContent":["import { GenericID } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { ActionCreateInfo, ActionInfo, ActionQuery } from \"./actions.types\";\n\nclass Actions extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all actions from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: ActionQuery): Promise<ActionInfo[]> {\n    let result = await this.doRequest<ActionInfo[]>({\n      path: \"/action\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_triggered\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new action from the account\n   * @param actionObj Object data to create new TagoIO Action\n   */\n  public async create(actionObj: ActionCreateInfo): Promise<{ action: string }> {\n    const result = await this.doRequest<{ action: string }>({\n      path: \"/action\",\n      method: \"POST\",\n      body: actionObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the action.\n   * @param actionID Action ID\n   * @param actionObj Action Object with data to be replaced\n   */\n  public async edit(actionID: GenericID, actionObj: Partial<ActionCreateInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/action/${actionID}`,\n      method: \"PUT\",\n      body: actionObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes an action from the account\n   * @param actionID Action ID\n   */\n  public async delete(actionID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/action/${actionID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Gets information about the action\n   * @param actionID Action ID\n   */\n  public async info(actionID: GenericID): Promise<ActionInfo> {\n    let result = await this.doRequest<ActionInfo>({\n      path: `/action/${actionID}`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_triggered\"]);\n\n    return result;\n  }\n}\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}