{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nconst modules_1 = require(\"../../modules\");\nclass Dictionaries extends TagoIOModule_1.default {\n  /**\r\n   * Retrieve a list with all dictionaries from an account.\r\n   *\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\", \"slug\", \"languages\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   *\r\n   * @param queryObj Search query params.\r\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/dictionary\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\", \"slug\", \"languages\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]));\n    return result;\n  }\n  /**\r\n   * Generate a new dictionary for the account.\r\n   *\r\n   * @param dictionaryObj Object with data to create new dictionary.\r\n   */\n  async create(dictionaryObj) {\n    const result = await this.doRequest({\n      path: \"/dictionary\",\n      method: \"POST\",\n      body: dictionaryObj\n    });\n    return result;\n  }\n  /**\r\n   * Modify any property of a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param dictionaryObj Dictionary Object data to be replaced.\r\n   */\n  async edit(dictionaryID, dictionaryObj) {\n    const result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}`,\n      method: \"PUT\",\n      body: dictionaryObj\n    });\n    return result;\n  }\n  /**\r\n   * Delete a dictionary from the account.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\n  async delete(dictionaryID) {\n    const result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}`,\n      method: \"DELETE\"\n    });\n    modules_1.Cache.clearCache();\n    return result;\n  }\n  /**\r\n   * Get information about a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\n  async info(dictionaryID) {\n    let result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\"]);\n    return result;\n  }\n  async languageEdit(dictionaryID, locale, languageObj) {\n    const result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}/${locale}`,\n      method: \"PUT\",\n      body: languageObj\n    });\n    modules_1.Cache.clearCache();\n    return result;\n  }\n  /**\r\n   * Delete a language from a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   */\n  async languageDelete(dictionaryID, locale) {\n    const result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}/${locale}`,\n      method: \"DELETE\"\n    });\n    modules_1.Cache.clearCache();\n    return result;\n  }\n  /**\r\n   * Get information about a dictionary by ID.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\n  async languageInfo(dictionaryID, locale, queryObj) {\n    const result = await this.doRequest({\n      path: `/dictionary/${dictionaryID}/${locale}`,\n      method: \"GET\",\n      params: {\n        // Default to not getting the fallback language info if language is not found\n        // as this route is mainly used to edit a dictionary\n        fallback: queryObj?.fallback || false\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Get information about a dictionary querying by slug instead of the dictionary's ID.\r\n   *\r\n   * @param slug Dictionary slug.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\n  async languageInfoBySlug(slug, locale, queryObj) {\n    const result = await this.doRequest({\n      path: `/dictionary/${slug}/${locale}`,\n      method: \"GET\",\n      params: {\n        // Default to getting the fallback language info if language is not found\n        // as this route is mainly used to use the dictionary strings in applications\n        fallback: queryObj?.fallback || true\n      }\n    });\n    return result;\n  }\n}\nexports.default = Dictionaries;","map":{"version":3,"mappings":"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","names":["Dictionaries","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","create","dictionaryObj","body","edit","dictionaryID","delete","modules_1","clearCache","info","languageEdit","locale","languageObj","languageDelete","languageInfo","fallback","languageInfoBySlug","slug","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dictionaries.ts"],"sourcesContent":["import { GenericID } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport dateParser from \"../Utils/dateParser\";\r\n\r\nimport {\r\n  DictionaryCreateInfo,\r\n  DictionaryInfo,\r\n  DictionaryQuery,\r\n  LanguageData,\r\n  LanguageEditData,\r\n  LanguageInfoQuery,\r\n} from \"./dictionaries.types\";\r\n\r\nimport { Cache } from \"../../modules\";\r\n\r\nclass Dictionaries extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieve a list with all dictionaries from an account.\r\n   *\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\", \"slug\", \"languages\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   *\r\n   * @param queryObj Search query params.\r\n   */\r\n  public async list(queryObj?: DictionaryQuery): Promise<DictionaryInfo[]> {\r\n    let result = await this.doRequest<DictionaryInfo[]>({\r\n      path: \"/dictionary\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\", \"slug\", \"languages\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate a new dictionary for the account.\r\n   *\r\n   * @param dictionaryObj Object with data to create new dictionary.\r\n   */\r\n  public async create(dictionaryObj: DictionaryCreateInfo): Promise<{ dictionary: string }> {\r\n    const result = await this.doRequest<{ dictionary: string }>({\r\n      path: \"/dictionary\",\r\n      method: \"POST\",\r\n      body: dictionaryObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param dictionaryObj Dictionary Object data to be replaced.\r\n   */\r\n  public async edit(dictionaryID: GenericID, dictionaryObj: Partial<DictionaryCreateInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"PUT\",\r\n      body: dictionaryObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a dictionary from the account.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\r\n  public async delete(dictionaryID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\r\n  public async info(dictionaryID: GenericID): Promise<DictionaryInfo> {\r\n    let result = await this.doRequest<DictionaryInfo>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"GET\",\r\n    });\r\n    result = dateParser(result, [\"created_at\", \"updated_at\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  public async languageEdit(dictionaryID: GenericID, locale: string, languageObj: LanguageEditData): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"PUT\",\r\n      body: languageObj,\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a language from a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   */\r\n  public async languageDelete(dictionaryID: GenericID, locale: string): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary by ID.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\r\n  public async languageInfo(\r\n    dictionaryID: GenericID,\r\n    locale: string,\r\n    queryObj?: LanguageInfoQuery\r\n  ): Promise<LanguageData> {\r\n    const result = await this.doRequest<LanguageData>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"GET\",\r\n      params: {\r\n        // Default to not getting the fallback language info if language is not found\r\n        // as this route is mainly used to edit a dictionary\r\n        fallback: queryObj?.fallback || false,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary querying by slug instead of the dictionary's ID.\r\n   *\r\n   * @param slug Dictionary slug.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\r\n  public async languageInfoBySlug(slug: string, locale: string, queryObj?: LanguageInfoQuery): Promise<LanguageData> {\r\n    const result = await this.doRequest<LanguageData>({\r\n      path: `/dictionary/${slug}/${locale}`,\r\n      method: \"GET\",\r\n      params: {\r\n        // Default to getting the fallback language info if language is not found\r\n        // as this route is mainly used to use the dictionary strings in applications\r\n        fallback: queryObj?.fallback || true,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Dictionaries;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}