{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Buckets extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list with all buckets from account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/bucket\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]));\n    return result;\n  }\n  /**\n   * Generates and retrieves a new bucket for the account\n   * @param bucketObj Object with data to create new bucket\n   */\n  async create(bucketObj) {\n    const result = await this.doRequest({\n      path: \"/bucket\",\n      method: \"POST\",\n      body: bucketObj\n    });\n    return result;\n  }\n  /**\n   * Modifies any property of the bucket.\n   * @param bucketID Bucket ID\n   * @param bucketObj Bucket Object data to be replaced\n   */\n  async edit(bucketID, bucketObj) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}`,\n      method: \"PUT\",\n      body: bucketObj\n    });\n    return result;\n  }\n  /**\n   * Deletes a bucket from the account\n   * @param bucketID Bucket ID\n   */\n  async delete(bucketID) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Gets information about the bucket\n   * @param bucketID Bucket ID\n   */\n  async info(bucketID) {\n    let result = await this.doRequest({\n      path: `/bucket/${bucketID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\"]);\n    return result;\n  }\n  /**\n   * Get Amount of data on the Bucket\n   * @param bucketID Bucket ID\n   */\n  async amount(bucketID) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}/data_amount`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * List variables inside the bucket\n   * @default\n   * ```json\n   * optionsObj: {\n   *   showAmount: false\n   *   showDeleted: false\n   *   resolveOriginName: false\n   * }\n   * ```\n   * @param bucketID Bucket ID\n   * @param optionsObj Request options\n   */\n  async listVariables(bucketID, optionsObj) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}/variable`,\n      method: \"GET\",\n      params: {\n        amount: optionsObj?.showAmount || false,\n        deleted: optionsObj?.showDeleted || false,\n        resolveOriginName: optionsObj?.resolveOriginName || false\n      }\n    });\n    return result;\n  }\n  /**\n   * Delete a bucket variable\n   * @param bucketID Bucket ID\n   * @param deleteParams Variable Details\n   */\n  async deleteVariable(bucketID, deleteParams) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}/variable`,\n      method: \"DELETE\",\n      body: deleteParams || {}\n    });\n    return result;\n  }\n  /**\n   * Get all device associated with bucket\n   * @param bucketID Bucket ID\n   */\n  async getDevicesAssociated(bucketID) {\n    const result = await this.doRequest({\n      path: `/bucket/${bucketID}/device`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Export Data from Bucket\n   * @param buckets Array of JSON with get details\n   * @param output Type of output\n   * @param optionsObj Options of request\n   */\n  async exportData(buckets, output, optionsObj) {\n    const result = await this.doRequest({\n      path: `/data/export?output=${output}`,\n      method: \"POST\",\n      body: {\n        buckets,\n        ...optionsObj\n      }\n    });\n    return result;\n  }\n}\nexports.default = Buckets;","map":{"version":3,"mappings":"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","names":["Buckets","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","create","bucketObj","body","edit","bucketID","delete","info","listVariables","optionsObj","showAmount","deleted","showDeleted","resolveOriginName","deleteVariable","deleteParams","getDevicesAssociated","exportData","buckets","output","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Buckets.ts"],"sourcesContent":["import { ExportOption, GenericID } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport {\n  BucketCreateInfo,\n  BucketDeviceInfo,\n  BucketInfo,\n  BucketQuery,\n  ExportBucket,\n  ExportBucketOption,\n  ListVariablesOptions,\n  VariablesInfo,\n} from \"./buckets.types\";\n\nclass Buckets extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all buckets from account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: BucketQuery): Promise<BucketInfo[]> {\n    let result = await this.doRequest<BucketInfo[]>({\n      path: \"/bucket\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new bucket for the account\n   * @param bucketObj Object with data to create new bucket\n   */\n  public async create(bucketObj: BucketCreateInfo): Promise<{ bucket: string }> {\n    const result = await this.doRequest<{ bucket: string }>({\n      path: \"/bucket\",\n      method: \"POST\",\n      body: bucketObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Modifies any property of the bucket.\n   * @param bucketID Bucket ID\n   * @param bucketObj Bucket Object data to be replaced\n   */\n  public async edit(bucketID: GenericID, bucketObj: Partial<BucketCreateInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/bucket/${bucketID}`,\n      method: \"PUT\",\n      body: bucketObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a bucket from the account\n   * @param bucketID Bucket ID\n   */\n  public async delete(bucketID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/bucket/${bucketID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Gets information about the bucket\n   * @param bucketID Bucket ID\n   */\n  public async info(bucketID: GenericID): Promise<BucketInfo> {\n    let result = await this.doRequest<BucketInfo>({\n      path: `/bucket/${bucketID}`,\n      method: \"GET\",\n    });\n    result = dateParser(result, [\"created_at\", \"updated_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Get Amount of data on the Bucket\n   * @param bucketID Bucket ID\n   */\n  public async amount(bucketID: GenericID): Promise<number> {\n    const result = await this.doRequest<number>({\n      path: `/bucket/${bucketID}/data_amount`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * List variables inside the bucket\n   * @default\n   * ```json\n   * optionsObj: {\n   *   showAmount: false\n   *   showDeleted: false\n   *   resolveOriginName: false\n   * }\n   * ```\n   * @param bucketID Bucket ID\n   * @param optionsObj Request options\n   */\n  public async listVariables(bucketID: GenericID, optionsObj?: ListVariablesOptions): Promise<VariablesInfo[]> {\n    const result = await this.doRequest<VariablesInfo[]>({\n      path: `/bucket/${bucketID}/variable`,\n      method: \"GET\",\n      params: {\n        amount: optionsObj?.showAmount || false,\n        deleted: optionsObj?.showDeleted || false,\n        resolveOriginName: optionsObj?.resolveOriginName || false,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete a bucket variable\n   * @param bucketID Bucket ID\n   * @param deleteParams Variable Details\n   */\n  public async deleteVariable(\n    bucketID: GenericID,\n    deleteParams: { variable: string; origin: string }\n  ): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/bucket/${bucketID}/variable`,\n      method: \"DELETE\",\n      body: deleteParams || {},\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all device associated with bucket\n   * @param bucketID Bucket ID\n   */\n  public async getDevicesAssociated(bucketID: GenericID): Promise<BucketDeviceInfo[]> {\n    const result = await this.doRequest<BucketDeviceInfo[]>({\n      path: `/bucket/${bucketID}/device`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Export Data from Bucket\n   * @param buckets Array of JSON with get details\n   * @param output Type of output\n   * @param optionsObj Options of request\n   */\n  public async exportData(\n    buckets: ExportBucket,\n    output: ExportOption,\n    optionsObj?: ExportBucketOption\n  ): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/data/export?output=${output}`,\n      method: \"POST\",\n      body: {\n        buckets,\n        ...optionsObj,\n      },\n    });\n\n    return result;\n  }\n}\n\nexport default Buckets;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}