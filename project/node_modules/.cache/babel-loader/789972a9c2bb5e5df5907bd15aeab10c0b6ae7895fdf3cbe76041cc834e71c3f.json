{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst Console_1 = __importDefault(require(\"../Services/Console\"));\nconst apiSocket_1 = __importStar(require(\"../../infrastructure/apiSocket\"));\nconst JSONParseSafe_1 = require(\"../../common/JSONParseSafe\");\n/**\r\n * This class is used to instance an analysis\r\n *\r\n * It's can run locally or on TagoIO.\r\n */\nclass Analysis extends TagoIOModule_1.default {\n  constructor(analysis) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      token: \"unknown\"\n    };\n    super(params);\n    this.started = false;\n    this.analysis = analysis;\n    if (params.autostart !== false) {\n      this.start();\n    }\n  }\n  start() {\n    if (this.started) {\n      return;\n    } else {\n      this.started = true;\n    }\n    if (!process.env.T_ANALYSIS_CONTEXT) {\n      this.localRuntime();\n    } else {\n      this.runOnTagoIO();\n    }\n  }\n  runOnTagoIO() {\n    if (!this.analysis || typeof this.analysis !== \"function\") {\n      throw \"Invalid analysis function\";\n    }\n    const context = {\n      log: console.log,\n      token: process.env.T_ANALYSIS_TOKEN,\n      environment: (0, JSONParseSafe_1.JSONParseSafe)(process.env.T_ANALYSIS_ENV, []),\n      analysis_id: process.env.T_ANALYSIS_ID\n    };\n    const data = (0, JSONParseSafe_1.JSONParseSafe)(process.env.T_ANALYSIS_DATA, []);\n    this.analysis(context, data);\n  }\n  stringifyMsg(msg) {\n    return typeof msg === \"object\" && !Array.isArray(msg) ? JSON.stringify(msg) : String(msg);\n  }\n  /**\r\n   * Run Analysis\r\n   * @internal\r\n   * @param environment\r\n   * @param data\r\n   * @param analysis_id\r\n   * @param token\r\n   */\n  runLocal(environment, data, analysis_id, token) {\n    var _this = this;\n    if (!this.analysis || typeof this.analysis !== \"function\") {\n      throw \"Invalid analysis function\";\n    }\n    const tagoConsole = new Console_1.default({\n      token,\n      region: this.params.region\n    });\n    const log = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      if (!process.env.T_ANALYSIS_AUTO_RUN) {\n        console.log(...args);\n      }\n      if (args[0]?.stack) {\n        args[0] = args[0].stack;\n      }\n      const argsStrings = Object.keys(args).map(x => _this.stringifyMsg(args[x]));\n      tagoConsole.log(argsStrings.join(\" \")).catch(console.error);\n    };\n    const context = {\n      log,\n      token,\n      environment,\n      analysis_id\n    };\n    if (this.analysis.constructor.name === \"AsyncFunction\") {\n      this.analysis(context, data || []).catch(log);\n    } else {\n      try {\n        this.analysis(context, data || []);\n      } catch (error) {\n        log(error);\n      }\n    }\n  }\n  localRuntime() {\n    if (this.params.token === \"unknown\") {\n      throw \"To run analysis locally, you needs a token\";\n    }\n    const socket = (0, apiSocket_1.default)(this.params);\n    socket.on(\"connect\", () => console.info(\"Connected to TagoIO, Getting analysis information...\"));\n    socket.on(\"disconnect\", () => console.info(\"Disconnected from TagoIO.\\n\\n\"));\n    socket.on(\"error\", e => console.error(\"Connection error\", e));\n    socket.on(\"ready\", analysis => console.info(`Analysis [${analysis.name}] Started.`));\n    socket.on(apiSocket_1.channels.analysisTrigger, scope => {\n      this.runLocal(scope.environment, scope.data, scope.analysis_id, scope.token);\n    });\n  }\n  static use(analysis, params) {\n    return new Analysis(analysis, params);\n  }\n}\nexports.default = Analysis;","map":{"version":3,"mappings":"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","names":["Analysis","TagoIOModule_1","constructor","analysis","params","token","autostart","start","started","process","env","T_ANALYSIS_CONTEXT","localRuntime","runOnTagoIO","context","log","console","T_ANALYSIS_TOKEN","environment","T_ANALYSIS_ENV","analysis_id","T_ANALYSIS_ID","data","T_ANALYSIS_DATA","stringifyMsg","msg","Array","isArray","JSON","stringify","String","runLocal","tagoConsole","Console_1","region","args","T_ANALYSIS_AUTO_RUN","stack","argsStrings","Object","keys","map","x","join","catch","error","name","socket","on","info","e","apiSocket_1","analysisTrigger","scope","use","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Analysis\\Analysis.ts"],"sourcesContent":["import TagoIOModule from \"../../common/TagoIOModule\";\r\nimport ConsoleService from \"../Services/Console\";\r\nimport apiSocket, { channels } from \"../../infrastructure/apiSocket\";\r\nimport { AnalysisConstructorParams, analysisFunction, AnalysisEnvironment } from \"./analysis.types\";\r\nimport { JSONParseSafe } from \"../../common/JSONParseSafe\";\r\n\r\n/**\r\n * This class is used to instance an analysis\r\n *\r\n * It's can run locally or on TagoIO.\r\n */\r\nclass Analysis extends TagoIOModule<AnalysisConstructorParams> {\r\n  private analysis: analysisFunction;\r\n  public started = false;\r\n\r\n  constructor(analysis: analysisFunction, params: AnalysisConstructorParams = { token: \"unknown\" }) {\r\n    super(params);\r\n    this.analysis = analysis;\r\n\r\n    if (params.autostart !== false) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  public start() {\r\n    if (this.started) {\r\n      return;\r\n    } else {\r\n      this.started = true;\r\n    }\r\n\r\n    if (!process.env.T_ANALYSIS_CONTEXT) {\r\n      this.localRuntime();\r\n    } else {\r\n      this.runOnTagoIO();\r\n    }\r\n  }\r\n\r\n  private runOnTagoIO() {\r\n    if (!this.analysis || typeof this.analysis !== \"function\") {\r\n      throw \"Invalid analysis function\";\r\n    }\r\n\r\n    const context = {\r\n      log: console.log,\r\n      token: process.env.T_ANALYSIS_TOKEN,\r\n      environment: JSONParseSafe(process.env.T_ANALYSIS_ENV, []),\r\n      analysis_id: process.env.T_ANALYSIS_ID,\r\n    };\r\n\r\n    const data = JSONParseSafe(process.env.T_ANALYSIS_DATA, []);\r\n\r\n    this.analysis(context, data);\r\n  }\r\n\r\n  private stringifyMsg(msg: any) {\r\n    return typeof msg === \"object\" && !Array.isArray(msg) ? JSON.stringify(msg) : String(msg);\r\n  }\r\n\r\n  /**\r\n   * Run Analysis\r\n   * @internal\r\n   * @param environment\r\n   * @param data\r\n   * @param analysis_id\r\n   * @param token\r\n   */\r\n  private runLocal(environment: AnalysisEnvironment[], data: any[], analysis_id: string, token: string) {\r\n    if (!this.analysis || typeof this.analysis !== \"function\") {\r\n      throw \"Invalid analysis function\";\r\n    }\r\n\r\n    const tagoConsole = new ConsoleService({ token, region: this.params.region });\r\n\r\n    const log = (...args: any[]) => {\r\n      if (!process.env.T_ANALYSIS_AUTO_RUN) {\r\n        console.log(...args);\r\n      }\r\n\r\n      if (args[0]?.stack) {\r\n        args[0] = args[0].stack;\r\n      }\r\n\r\n      const argsStrings = Object.keys(args).map((x: any) => this.stringifyMsg(args[x]));\r\n\r\n      tagoConsole.log(argsStrings.join(\" \")).catch(console.error);\r\n    };\r\n\r\n    const context = {\r\n      log,\r\n      token,\r\n      environment,\r\n      analysis_id,\r\n    };\r\n\r\n    if (this.analysis.constructor.name === \"AsyncFunction\") {\r\n      this.analysis(context, data || []).catch(log);\r\n    } else {\r\n      try {\r\n        this.analysis(context, data || []);\r\n      } catch (error) {\r\n        log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private localRuntime() {\r\n    if (this.params.token === \"unknown\") {\r\n      throw \"To run analysis locally, you needs a token\";\r\n    }\r\n\r\n    const socket = apiSocket(this.params);\r\n\r\n    socket.on(\"connect\", () => console.info(\"Connected to TagoIO, Getting analysis information...\"));\r\n\r\n    socket.on(\"disconnect\", () => console.info(\"Disconnected from TagoIO.\\n\\n\"));\r\n\r\n    socket.on(\"error\", (e: Error) => console.error(\"Connection error\", e));\r\n\r\n    socket.on(\"ready\", (analysis: any) => console.info(`Analysis [${analysis.name}] Started.`));\r\n\r\n    socket.on(channels.analysisTrigger, (scope: any) => {\r\n      this.runLocal(scope.environment, scope.data, scope.analysis_id, scope.token);\r\n    });\r\n  }\r\n\r\n  public static use(analysis: analysisFunction, params?: AnalysisConstructorParams) {\r\n    return new Analysis(analysis, params);\r\n  }\r\n}\r\n\r\nexport default Analysis;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}