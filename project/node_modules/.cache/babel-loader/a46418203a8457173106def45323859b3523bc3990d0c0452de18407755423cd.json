{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common/\");\nfunction isValidMode(mode) {\n  return mode === \"basic\" || mode === \"dark\" || mode === \"light\" || mode === \"sattelite\";\n}\nfunction convertFilterBy(filterBy) {\n  switch (filterBy) {\n    case \"values\":\n      return \"value\";\n    case \"devices\":\n      return \"device\";\n    // When filterBy is null, the default is \"variable\" for legacy\n    default:\n      return \"variable\";\n  }\n}\nfunction convertFilterVariables(filterVariable) {\n  if (!Array.isArray(filterVariable)) {\n    return [];\n  }\n  // Remove duplicate strings\n  return [...Array.from(new Set(filterVariable?.map(e => e?.variable) || []))];\n}\nfunction convertGeofence(oldDisplay) {\n  if (!oldDisplay?.geo_variable) {\n    return null;\n  }\n  return {\n    enable_user: oldDisplay?.geo_enable_user,\n    events: oldDisplay?.geo_events || [],\n    events_label: oldDisplay?.geo_events_label,\n    limit: oldDisplay?.geo_limit,\n    type_enable_user: oldDisplay?.geo_type_enable_user || \"circle\",\n    variable: {\n      bucket: oldDisplay?.geo_variable?.origin?.bucket,\n      origin: oldDisplay?.geo_variable?.origin?.id,\n      variable: oldDisplay?.geo_variable?.variable\n    }\n  };\n}\n/**\n * Some icons use the old form\n */\nfunction parserIcon(cssClass) {\n  switch (cssClass) {\n    case \"flaticon flaticon-car95\":\n      return \"car\";\n    case \"flaticon flaticon-pin56\":\n      return \"location\";\n    case \"flaticon flaticon-home152\":\n      return \"residence\";\n    case \"flaticon flaticon-vehicle12\":\n      return \"bus\";\n    case \"flaticon flaticon-scooter8\":\n      return \"motorcycle\";\n    case \"flaticon flaticon-delivery51\":\n      return \"truck\";\n    case \"flaticon flaticon-mail10\":\n      return \"mail\";\n    case \"flaticon flaticon-home153\":\n      return \"residence\";\n    default:\n      return cssClass;\n  }\n}\nfunction convertGroupBy(oldGroupBy) {\n  if (oldGroupBy === \"date\") {\n    return \"time\";\n  }\n  return oldGroupBy ?? \"time\";\n}\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const geofence = convertGeofence(oldDisplay);\n  const filterBy = convertFilterBy(oldDisplay?.filter_by);\n  const canListByDevice = !!oldDisplay.filter_devices?.find(e => e?.name) || false;\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      center_options: {\n        center_all_variables: true,\n        show_only_last_values: false,\n        variables: []\n      },\n      custom_text: {\n        ...(oldDisplay?.filter_title ? {\n          SEARCH_FOR_FILTER: oldDisplay?.filter_title\n        } : {})\n      },\n      direction_variable: oldDisplay?.show_directions ? {\n        show_current_direction: !!oldDisplay?.show_current_direction,\n        variable: {\n          origin: oldDisplay?.direction_variable?.origin?.id,\n          variable: oldDisplay?.direction_variable?.variable\n        }\n      } : {},\n      filter_by: filterBy,\n      filter_list_by: canListByDevice && filterBy === \"device\" ? \"device\" : \"variable\",\n      filter_variables: convertFilterVariables(oldDisplay?.filter_variable),\n      group_by: convertGroupBy(oldDisplay?.group_by),\n      group_markers: oldDisplay?.group_markers ?? true,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      infobox_config: {\n        date_format: \"\",\n        image: {\n          behavior: \"landscape\",\n          object_fit: \"contain\",\n          position: \"top\"\n        },\n        show_window_closed: oldDisplay?.infowindow_closed ? oldDisplay?.infowindow_closed : true\n      },\n      initial_mode: isValidMode(oldDisplay?.mode) ? oldDisplay?.mode : \"basic\",\n      intervals: oldDisplay?.intervals?.map(common_1.convertInterval) || [],\n      max_points: oldWidget?.data?.[0]?.query === \"last_location\" ? 1 : oldDisplay?.max_points,\n      show_directions: !!oldDisplay?.show_directions,\n      show_filter: !!oldDisplay?.show_filter,\n      show_icons_for_all: oldDisplay?.icons_for_all,\n      show_lines: !!oldDisplay?.connect_markers,\n      show_lines_animated: !!oldDisplay?.ant_path,\n      variables: [],\n      ...(geofence ? {\n        geofence\n      } : {}),\n      ...(oldDisplay?.initial_zoom !== 0 ? {\n        initial_zoom: oldDisplay?.initial_zoom\n      } : {})\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"map\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    if (oldWidget?.query === \"last_location\") {\n      newStructure.display.max_points = 1;\n    }\n    for (const item of oldWidget.data) {\n      if (item.is_hide || item?.is_global_time_data) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n        /**\n         * Getting the icon svg\n         */\n        const icon = oldDisplay?.map_icons?.[item.origin]?.css_class || null;\n        const color = oldDisplay?.map_icons?.[item.origin]?.color || null;\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[key]);\n        const hasConditions = oldDisplay?.vars_conditions?.[`${item?.origin}`]?.variable === variable;\n        const iconType = hasConditions ? \"conditional\" : \"fixed\";\n        const iconConditions = hasConditions ? oldDisplay?.vars_conditions?.[`${item?.origin}`]?.conditions : null;\n        /**\n         * If the pin was not set, the default value is the\n         * map-marker.\n         */\n        if (iconConditions && !iconConditions?.url) {\n          iconConditions.url = \"https://svg.internal.tago.io/map-marker.svg\";\n        }\n        const aliasType = oldDisplay?.vars_that_have_conditions?.[key] ? \"icon\" : \"text\";\n        const iconLabelConditions = oldDisplay?.conditions?.[key] || [];\n        const image = {\n          static_image: oldDisplay?.vars_images?.[key]\n        } || null;\n        const url = oldDisplay?.vars_url?.[key]?.url || null;\n        const label = oldDisplay?.vars_url?.[key]?.alias || null;\n        const link = url || label ? {\n          ...(url ? {\n            url\n          } : {}),\n          ...(label ? {\n            label\n          } : {})\n        } : null;\n        const filterDevices = oldDisplay?.filter_devices || [];\n        const findFilterDevice = filterDevices.find(e => e?.id === item?.origin);\n        newStructure.display.variables.push({\n          alias_type: aliasType,\n          icon_conditions: iconLabelConditions,\n          infobox: {\n            ...(image || link ? {\n              ...(image ? {\n                image\n              } : {}),\n              ...(link ? {\n                link\n              } : {})\n            } : {})\n          },\n          origin: item?.origin,\n          pin_config: {\n            color,\n            icon: parserIcon(icon),\n            ...(iconType ? {\n              icon_type: iconType\n            } : {}),\n            ...(iconConditions ? {\n              icon_conditions: iconConditions\n            } : {})\n          },\n          variable,\n          ...(alias ? {\n            alias\n          } : {}),\n          ...(numberFormat ? {\n            number_format: numberFormat\n          } : {}),\n          ...(formula ? {\n            formula\n          } : {}),\n          ...(findFilterDevice ? {\n            originName: findFilterDevice?.name\n          } : {})\n        });\n      }\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula || widget?.display?.numberformat || widget?.display?.map_icons || widget?.display?.ignore_00 || widget?.display?.connect_markers || widget?.display?.watermark !== undefined);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["isValidMode","mode","convertFilterBy","filterBy","convertFilterVariables","filterVariable","Array","isArray","from","Set","map","e","variable","convertGeofence","oldDisplay","geo_variable","enable_user","geo_enable_user","events","geo_events","events_label","geo_events_label","limit","geo_limit","type_enable_user","geo_type_enable_user","bucket","origin","id","parserIcon","cssClass","convertGroupBy","oldGroupBy","convert","oldWidget","display","geofence","filter_by","canListByDevice","filter_devices","find","name","newStructure","dashboard","center_options","center_all_variables","show_only_last_values","variables","custom_text","filter_title","SEARCH_FOR_FILTER","direction_variable","show_directions","show_current_direction","filter_list_by","filter_variables","filter_variable","group_by","group_markers","header_buttons","help","infobox_config","date_format","image","behavior","object_fit","position","show_window_closed","infowindow_closed","initial_mode","intervals","common_1","max_points","data","query","show_filter","show_icons_for_all","icons_for_all","show_lines","connect_markers","show_lines_animated","ant_path","initial_zoom","label","realtime","type","item","is_hide","is_global_time_data","key","icon","map_icons","css_class","color","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","hasConditions","vars_conditions","iconType","iconConditions","conditions","url","aliasType","vars_that_have_conditions","iconLabelConditions","static_image","vars_images","vars_url","link","filterDevices","findFilterDevice","push","alias_type","icon_conditions","infobox","pin_config","icon_type","number_format","originName","exports","isOldStructure","widget","isOld","numberformat","ignore_00","watermark","undefined"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\map.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old MAP to new MAP\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, convertInterval } from \"./common/\";\n\nfunction isValidMode(mode: string): boolean {\n  return mode === \"basic\" || mode === \"dark\" || mode === \"light\" || mode === \"sattelite\";\n}\n\nfunction convertFilterBy(filterBy: string): string {\n  switch (filterBy) {\n    case \"values\":\n      return \"value\";\n    case \"devices\":\n      return \"device\";\n    // When filterBy is null, the default is \"variable\" for legacy\n    default:\n      return \"variable\";\n  }\n}\n\nfunction convertFilterVariables(filterVariable: any): any {\n  if (!Array.isArray(filterVariable)) {\n    return [];\n  }\n\n  // Remove duplicate strings\n  return [...Array.from(new Set(filterVariable?.map((e) => e?.variable) || []))];\n}\n\nfunction convertGeofence(oldDisplay: any): any {\n  if (!oldDisplay?.geo_variable) {\n    return null;\n  }\n  return {\n    enable_user: oldDisplay?.geo_enable_user,\n    events: oldDisplay?.geo_events || [],\n    events_label: oldDisplay?.geo_events_label,\n    limit: oldDisplay?.geo_limit,\n    type_enable_user: oldDisplay?.geo_type_enable_user || \"circle\",\n    variable: {\n      bucket: oldDisplay?.geo_variable?.origin?.bucket,\n      origin: oldDisplay?.geo_variable?.origin?.id,\n      variable: oldDisplay?.geo_variable?.variable,\n    },\n  };\n}\n\n/**\n * Some icons use the old form\n */\nfunction parserIcon(cssClass: string): string {\n  switch (cssClass) {\n    case \"flaticon flaticon-car95\":\n      return \"car\";\n    case \"flaticon flaticon-pin56\":\n      return \"location\";\n    case \"flaticon flaticon-home152\":\n      return \"residence\";\n    case \"flaticon flaticon-vehicle12\":\n      return \"bus\";\n    case \"flaticon flaticon-scooter8\":\n      return \"motorcycle\";\n    case \"flaticon flaticon-delivery51\":\n      return \"truck\";\n    case \"flaticon flaticon-mail10\":\n      return \"mail\";\n    case \"flaticon flaticon-home153\":\n      return \"residence\";\n    default:\n      return cssClass;\n  }\n}\n\nfunction convertGroupBy(oldGroupBy: string): string {\n  if (oldGroupBy === \"date\") {\n    return \"time\";\n  }\n  return oldGroupBy ?? \"time\";\n}\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n  const geofence = convertGeofence(oldDisplay);\n  const filterBy = convertFilterBy(oldDisplay?.filter_by);\n  const canListByDevice = !!oldDisplay.filter_devices?.find((e: any) => e?.name) || false;\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      center_options: {\n        center_all_variables: true,\n        show_only_last_values: false,\n        variables: [],\n      },\n      custom_text: {\n        ...(oldDisplay?.filter_title ? { SEARCH_FOR_FILTER: oldDisplay?.filter_title } : {}),\n      },\n      direction_variable: oldDisplay?.show_directions\n        ? {\n            show_current_direction: !!oldDisplay?.show_current_direction,\n            variable: {\n              origin: oldDisplay?.direction_variable?.origin?.id,\n              variable: oldDisplay?.direction_variable?.variable,\n            },\n          }\n        : {},\n      filter_by: filterBy,\n      filter_list_by: canListByDevice && filterBy === \"device\" ? \"device\" : \"variable\", // The old widget does not have this feature\n      filter_variables: convertFilterVariables(oldDisplay?.filter_variable),\n      group_by: convertGroupBy(oldDisplay?.group_by),\n      group_markers: oldDisplay?.group_markers ?? true,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      infobox_config: {\n        date_format: \"\",\n        image: {\n          behavior: \"landscape\",\n          object_fit: \"contain\",\n          position: \"top\",\n        },\n        show_window_closed: oldDisplay?.infowindow_closed ? oldDisplay?.infowindow_closed : true,\n      },\n      initial_mode: isValidMode(oldDisplay?.mode) ? oldDisplay?.mode : \"basic\",\n      intervals: oldDisplay?.intervals?.map(convertInterval) || [],\n      max_points: oldWidget?.data?.[0]?.query === \"last_location\" ? 1 : oldDisplay?.max_points,\n      show_directions: !!oldDisplay?.show_directions,\n      show_filter: !!oldDisplay?.show_filter,\n      show_icons_for_all: oldDisplay?.icons_for_all,\n      show_lines: !!oldDisplay?.connect_markers,\n      show_lines_animated: !!oldDisplay?.ant_path,\n      variables: [],\n      ...(geofence ? { geofence } : {}),\n      ...(oldDisplay?.initial_zoom !== 0 ? { initial_zoom: oldDisplay?.initial_zoom } : {}),\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"map\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    if (oldWidget?.query === \"last_location\") {\n      newStructure.display.max_points = 1;\n    }\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide || item?.is_global_time_data) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n        /**\n         * Getting the icon svg\n         */\n        const icon = oldDisplay?.map_icons?.[item.origin]?.css_class || null;\n        const color = oldDisplay?.map_icons?.[item.origin]?.color || null;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\n\n        const hasConditions = oldDisplay?.vars_conditions?.[`${item?.origin}`]?.variable === variable;\n        const iconType = hasConditions ? \"conditional\" : \"fixed\";\n\n        const iconConditions = hasConditions ? oldDisplay?.vars_conditions?.[`${item?.origin}`]?.conditions : null;\n\n        /**\n         * If the pin was not set, the default value is the\n         * map-marker.\n         */\n        if (iconConditions && !iconConditions?.url) {\n          iconConditions.url = \"https://svg.internal.tago.io/map-marker.svg\";\n        }\n\n        const aliasType = oldDisplay?.vars_that_have_conditions?.[key] ? \"icon\" : \"text\";\n        const iconLabelConditions = oldDisplay?.conditions?.[key] || [];\n\n        const image = { static_image: oldDisplay?.vars_images?.[key] } || null;\n\n        const url = oldDisplay?.vars_url?.[key]?.url || null;\n        const label = oldDisplay?.vars_url?.[key]?.alias || null;\n        const link =\n          url || label\n            ? {\n                ...(url ? { url } : {}),\n                ...(label ? { label } : {}),\n              }\n            : null;\n\n        const filterDevices = oldDisplay?.filter_devices || [];\n        const findFilterDevice = filterDevices.find((e: any) => e?.id === item?.origin);\n\n        newStructure.display.variables.push({\n          alias_type: aliasType,\n          icon_conditions: iconLabelConditions,\n          infobox: {\n            ...(image || link\n              ? {\n                  ...(image ? { image } : {}),\n                  ...(link ? { link } : {}),\n                }\n              : {}),\n          },\n          origin: item?.origin,\n          pin_config: {\n            color,\n            icon: parserIcon(icon),\n            ...(iconType ? { icon_type: iconType } : {}),\n            ...(iconConditions ? { icon_conditions: iconConditions } : {}),\n          },\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n          ...(formula ? { formula } : {}),\n          ...(findFilterDevice ? { originName: findFilterDevice?.name } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.vars_formula ||\n    widget?.display?.numberformat ||\n    widget?.display?.map_icons ||\n    widget?.display?.ignore_00 ||\n    widget?.display?.connect_markers ||\n    widget?.display?.watermark !== undefined\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}