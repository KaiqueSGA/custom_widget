{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Email = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Email, _TagoIOModule_1$defau);\n  var _super = _createSuper(Email);\n  function Email() {\n    _classCallCheck(this, Email);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Email, [{\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(email) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (email.html && email.message) {\n                  console.warn(new Error(\"HTML field will overwrite message field\"));\n                }\n                _context.next = 3;\n                return this.doRequest({\n                  path: \"/analysis/services/email/send\",\n                  method: \"POST\",\n                  body: email\n                });\n              case 3:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }]);\n  return Email;\n}(TagoIOModule_1.default);\nexports.default = Email;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AAA8E,IAuGxEA,KAAM;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA,uEAeH,iBAAWC,KAAU;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC1B,IAAIA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACE,OAAO,EAAE;kBAC/BC,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,CAAC,yCAAyC,CAAC,CAAC;;gBACnE;gBAAA,OAEoB,IAAI,CAACC,SAAS,CAAS;kBAC1CC,IAAI,EAAE,+BAA+B;kBACrCC,MAAM,EAAE,MAAM;kBACdC,IAAI,EAAET;iBACP,CAAC;cAAA;gBAJIU,MAAM;gBAAA,iCAMLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EA3BiBC,sBAAiC;AA8BrDC,kBAAeb,KAAK","names":["Email","email","html","message","console","warn","Error","doRequest","path","method","body","result","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Services\\Email.ts"],"sourcesContent":["import TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\n\ninterface AttachmentOptions {\n  /**\n   * Archive itself\n   */\n  archive: string;\n  /**\n   * Name for the archive\n   */\n  filename: string;\n}\n\ninterface TemplateOptions {\n  /**\n   * Template name\n   *\n   * You can create an e-mail template on TagoRUN options at\n   * https://admin.tago.io/run\n   */\n  name: string;\n  /**\n   * Parameters to parse on Template\n   *\n   * You can use that parameter as local variable\n   * using $PARAMETER_KEY$\n   *\n   * example: params = { name: 'John' }\n   * will be $name$ on template document\n   */\n  params?: {\n    [key: string]: string | number;\n  };\n}\n\ninterface EmailBase {\n  /**\n   * E-mail address to be sent\n   *\n   * example: \"myclien@tago.io\"\n   */\n  to: string;\n  /**\n   * Name of origin\n   *\n   * example: \"My Run\"\n   */\n  from?: string;\n  /**\n   * Subject of the e-mail\n   *\n   * only allow with message or html\n   */\n  subject: string;\n  /**\n   * Attachment for the e-mail\n   */\n  attachment?: AttachmentOptions;\n}\n\ninterface EmailRawText {\n  /**\n   * Message in raw text for email body\n   */\n  message: string;\n}\n\ninterface EmailHTML {\n  /**\n   * HTML email body\n   */\n  html: string;\n}\n\ninterface EmailWithTemplate {\n  /**\n   * E-mail address to be sent\n   *\n   * example: \"myclien@tago.io\"\n   */\n  to: string;\n  /**\n   * Name of origin\n   *\n   * example: \"My Run\"\n   */\n  from?: string;\n  /**\n   * Attachment for the e-mail\n   */\n  attachment?: AttachmentOptions;\n  /**\n   * Use TagoRUN E-Mail Template\n   *\n   * Tip: If you use template together with attachment the\n   * back-end will generate a parameter called 'URL';\n   */\n  template?: TemplateOptions;\n}\n\ntype EmailWithHTML = EmailBase & EmailHTML;\ntype EmailWithRawText = EmailBase & EmailRawText;\n\nclass Email extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Send email\n   * @param email E-mail Object\n   *\n   * @example\n   * ```json\n   * { to: \"client(at)company.com\", subject: \"Reports\", message: \"Hello client, it's your report\" }\n   * { to: \"client(at)company.com\", subject: \"Reports\", html: \"<p>Hello client, it's your report</p>\" }\n   * { to: \"client(at)company.com\", template: { name: \"my_template\" } }\n   * ```\n   */\n  public async send(email: EmailWithRawText): Promise<string>;\n  public async send(email: EmailWithHTML): Promise<string>;\n  public async send(email: EmailWithTemplate): Promise<string>;\n  public async send(email: any): Promise<string> {\n    if (email.html && email.message) {\n      console.warn(new Error(\"HTML field will overwrite message field\"));\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/analysis/services/email/send\",\n      method: \"POST\",\n      body: email,\n    });\n\n    return result;\n  }\n}\n\nexport default Email;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}