{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar RouterService = /*#__PURE__*/function () {\n  function RouterService(service) {\n    _classCallCheck(this, RouterService);\n    this.whenList = [];\n    this.serviceFunction = service;\n  }\n  _createClass(RouterService, [{\n    key: \"addFunc\",\n    value: function addFunc(func) {\n      this.whenList.push(func);\n    }\n    /**\r\n     * Return true if specific variables are in the scope.\r\n     * Information is available if Analysis is triggered by an widget or action.\r\n     */\n  }, {\n    key: \"whenVariables\",\n    value: function whenVariables(variable) {\n      var variable_list = Array.isArray(variable) ? variable : [variable];\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          return variable_list.includes(x === null || x === void 0 ? void 0 : x.variable);\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if variable is included in any variable name in the scope.\r\n     * Information is available if Analysis is triggered by an widget or action.\r\n     */\n  }, {\n    key: \"whenVariableLike\",\n    value: function whenVariableLike(variable) {\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          var _x$variable;\n          return x === null || x === void 0 ? void 0 : (_x$variable = x.variable) === null || _x$variable === void 0 ? void 0 : _x$variable.includes(variable);\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if value is present for any variable in the scope\r\n     * Information is available if Analysis is triggered by an widget or action.\r\n     */\n  }, {\n    key: \"whenValues\",\n    value: function whenValues(values) {\n      var values_list = Array.isArray(values) ? values : [values];\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          return values_list.includes(x === null || x === void 0 ? void 0 : x.value);\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if serie is present for any variable in the scope\r\n     * Information is available if Analysis is triggered by an widget or action.\r\n     */\n  }, {\n    key: \"whenSeries\",\n    value: function whenSeries(series) {\n      var series_list = Array.isArray(series) ? series : [series];\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          return series_list.includes(x === null || x === void 0 ? void 0 : x.serie);\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if input form ID is the same\r\n     * Information is available if Analysis is triggered by an input widget.\r\n     */\n  }, {\n    key: \"whenInputFormID\",\n    value: function whenInputFormID(id) {\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          return x.input_form_button_id === id;\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if a parameter in the scope exists\r\n     * Useful to be used with Device List widget.\r\n     */\n  }, {\n    key: \"whenParameterExists\",\n    value: function whenParameterExists(parameter) {\n      this.addFunc(function (scope, environment) {\n        return !!scope.find(function (x) {\n          return parameter in x;\n        });\n      });\n      return this;\n    }\n    /**\r\n     * Return true if widget_exec is the same\r\n     * Information is available if Analysis is triggered by an widget.\r\n     */\n  }, {\n    key: \"whenWidgetExec\",\n    value: function whenWidgetExec(widget_exec) {\n      this.addFunc(function (scope, environment) {\n        return environment._widget_exec === widget_exec;\n      });\n      return this;\n    }\n    /**\r\n     * Return true if action_when is the same\r\n     * Information is available if Analysis is triggered by an action.\r\n     */\n  }, {\n    key: \"whenActionWhen\",\n    value: function whenActionWhen(action_when) {\n      this.addFunc(function (scope, environment) {\n        return environment._action_when === action_when;\n      });\n      return this;\n    }\n    /**\r\n     * Return true if action_type is the same\r\n     * Information is available if Analysis is triggered by an action.\r\n     */\n  }, {\n    key: \"whenActionType\",\n    value: function whenActionType(action_type) {\n      this.addFunc(function (scope, environment) {\n        return environment._action_type === action_type;\n      });\n      return this;\n    }\n    /**\r\n     * Return true if input form ID is the same\r\n     * Information is always available.\r\n     */\n  }, {\n    key: \"whenEnv\",\n    value: function whenEnv(key, value) {\n      this.addFunc(function (scope, environment) {\n        return environment[key] === value;\n      });\n      return this;\n    }\n    /**\r\n     * Start verifying if all when conditions are true.\r\n     */\n  }, {\n    key: \"verifyConditionsTrue\",\n    value: function verifyConditionsTrue(scope, environment) {\n      var _iterator = _createForOfIteratorHelper(this.whenList),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var func = _step.value;\n          var result = func(scope, environment);\n          if (!result) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return true;\n    }\n    /**\r\n     *\r\n     * @param router_params\r\n     * @returns\r\n     */\n  }, {\n    key: \"runService\",\n    value: function runService(router_params) {\n      return this.serviceFunction(router_params);\n    }\n  }, {\n    key: \"getServiceName\",\n    value: function getServiceName() {\n      return this.serviceFunction.name;\n    }\n  }]);\n  return RouterService;\n}();\nexports.default = RouterService;","map":{"version":3,"mappings":"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","names":["RouterService","service","serviceFunction","func","whenList","push","variable","variable_list","Array","isArray","addFunc","scope","environment","find","x","includes","values","values_list","value","series","series_list","serie","id","input_form_button_id","parameter","widget_exec","_widget_exec","action_when","_action_when","action_type","_action_type","key","result","router_params","name","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\router\\service.ts"],"sourcesContent":["import { RouterConstructor } from \"./router\";\r\n\r\nclass RouterService {\r\n  private serviceFunction: Function;\r\n  private whenList: Function[] = [];\r\n  constructor(service: Function) {\r\n    this.serviceFunction = service;\r\n  }\r\n\r\n  private addFunc(func: Function) {\r\n    this.whenList.push(func);\r\n  }\r\n  /**\r\n   * Return true if specific variables are in the scope.\r\n   * Information is available if Analysis is triggered by an widget or action.\r\n   */\r\n  public whenVariables(variable: string | string[]) {\r\n    const variable_list = Array.isArray(variable) ? variable : [variable];\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => variable_list.includes(x?.variable)));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if variable is included in any variable name in the scope.\r\n   * Information is available if Analysis is triggered by an widget or action.\r\n   */\r\n  public whenVariableLike(variable: string) {\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => x?.variable?.includes(variable)));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if value is present for any variable in the scope\r\n   * Information is available if Analysis is triggered by an widget or action.\r\n   */\r\n  public whenValues(values: string | boolean | number | (string | boolean | number)[]) {\r\n    const values_list = Array.isArray(values) ? values : [values];\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => values_list.includes(x?.value)));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if serie is present for any variable in the scope\r\n   * Information is available if Analysis is triggered by an widget or action.\r\n   */\r\n  public whenSeries(series: string | string[]) {\r\n    const series_list = Array.isArray(series) ? series : [series];\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => series_list.includes(x?.serie)));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if input form ID is the same\r\n   * Information is available if Analysis is triggered by an input widget.\r\n   */\r\n  public whenInputFormID(id: string) {\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => x.input_form_button_id === id));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if a parameter in the scope exists\r\n   * Useful to be used with Device List widget.\r\n   */\r\n  public whenParameterExists(parameter: string) {\r\n    this.addFunc((scope: any, environment: any) => !!scope.find((x: any) => parameter in x));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if widget_exec is the same\r\n   * Information is available if Analysis is triggered by an widget.\r\n   */\r\n  public whenWidgetExec(widget_exec: \"insert\" | \"delete\" | \"edit\") {\r\n    this.addFunc((scope: any, environment: any) => environment._widget_exec === widget_exec);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if action_when is the same\r\n   * Information is available if Analysis is triggered by an action.\r\n   */\r\n  public whenActionWhen(action_when: \"create\" | \"update\" | \"delete\" | \"mqtt_connect\" | \"mqtt_disconnect\") {\r\n    this.addFunc((scope: any, environment: any) => environment._action_when === action_when);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if action_type is the same\r\n   * Information is available if Analysis is triggered by an action.\r\n   */\r\n  public whenActionType(action_type: \"resource\" | \"condition\" | \"delete\") {\r\n    this.addFunc((scope: any, environment: any) => environment._action_type === action_type);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return true if input form ID is the same\r\n   * Information is always available.\r\n   */\r\n  public whenEnv(key: string, value: string) {\r\n    this.addFunc((scope: any, environment: any) => environment[key] === value);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Start verifying if all when conditions are true.\r\n   */\r\n  public verifyConditionsTrue(scope: any, environment: any) {\r\n    for (const func of this.whenList) {\r\n      const result = func(scope, environment);\r\n      if (!result) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param router_params\r\n   * @returns\r\n   */\r\n  public runService(router_params: RouterConstructor) {\r\n    return this.serviceFunction(router_params);\r\n  }\r\n\r\n  public getServiceName() {\r\n    return this.serviceFunction.name;\r\n  }\r\n}\r\n\r\nexport default RouterService;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}