{"ast":null,"code":"\"use strict\";\n\nvar _get = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nvar component_emitter_1 = require(\"@socket.io/component-emitter\");\nvar binary_js_1 = require(\"./binary.js\");\nvar is_binary_js_1 = require(\"./is-binary.js\");\nvar debug_1 = require(\"debug\"); // debug()\nvar debug = debug_1.default(\"socket.io-parser\"); // debug()\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\r\n * A socket.io Encoder instance\r\n */\nvar Encoder = /*#__PURE__*/function () {\n  /**\r\n   * Encoder constructor\r\n   *\r\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n   */\n  function Encoder(replacer) {\n    _classCallCheck(this, Encoder);\n    this.replacer = replacer;\n  }\n  /**\r\n   * Encode a packet as a single string if non-binary, or as a\r\n   * buffer sequence, depending on packet type.\r\n   *\r\n   * @param {Object} obj - packet object\r\n   */\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(obj) {\n      debug(\"encoding packet %j\", obj);\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (is_binary_js_1.hasBinary(obj)) {\n          obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n          return this.encodeAsBinary(obj);\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\r\n     * Encode packet as string.\r\n     */\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      debug(\"encoded %j as %s\", obj, str);\n      return str;\n    }\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = binary_js_1.deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }]);\n  return Encoder;\n}();\nexports.Encoder = Encoder;\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\nvar Decoder = /*#__PURE__*/function (_component_emitter_1$) {\n  _inherits(Decoder, _component_emitter_1$);\n  var _super = _createSuper(Decoder);\n  /**\r\n   * Decoder constructor\r\n   *\r\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n   */\n  function Decoder(reviver) {\n    var _this;\n    _classCallCheck(this, Decoder);\n    _this = _super.call(this);\n    _this.reviver = reviver;\n    return _this;\n  }\n  /**\r\n   * Decodes an encoded packet string into packet JSON.\r\n   *\r\n   * @param {String} obj - encoded packet\r\n   */\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n        }\n      } else if (is_binary_js_1.isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0;\n      // look up type\n      var p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        var buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      var next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n        while (++i) {\n          var _c = str.charAt(i);\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(_start2, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        var payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      debug(\"decoded %s as %j\", str, p);\n      return p;\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value:\n    /**\r\n     * Deallocates a parser's resources\r\n     */\n    function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return typeof payload === \"object\";\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || typeof payload === \"object\";\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && payload.length > 0;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n  return Decoder;\n}(component_emitter_1.Emitter);\nexports.Decoder = Decoder;\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\r\n   * Method to be called when binary data received from connection\r\n   * after a BINARY_EVENT packet.\r\n   *\r\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n   * @return {null | Object} returns null if more binary data is expected or\r\n   *   a reconstructed packet object if all buffers have been received.\r\n   */\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n  return BinaryReconstructor;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Decoder","Encoder","PacketType","protocol","component_emitter_1","require","binary_js_1","is_binary_js_1","debug_1","debug","default","replacer","obj","type","EVENT","ACK","hasBinary","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","deconstructPacket","pack","packet","buffers","unshift","reviver","reconstructor","Error","decodeString","BinaryReconstructor","isBinary","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","Emitter","reconPack","binData","push","reconstructPacket"],"sources":["C:/Users/kaique/Documents/SGA/widget/project/node_modules/socket.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst binary_js_1 = require(\"./binary.js\");\r\nconst is_binary_js_1 = require(\"./is-binary.js\");\r\nconst debug_1 = require(\"debug\"); // debug()\r\nconst debug = debug_1.default(\"socket.io-parser\"); // debug()\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexports.protocol = 5;\r\nvar PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nclass Encoder {\r\n    /**\r\n     * Encoder constructor\r\n     *\r\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n     */\r\n    constructor(replacer) {\r\n        this.replacer = replacer;\r\n    }\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        debug(\"encoding packet %j\", obj);\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (is_binary_js_1.hasBinary(obj)) {\r\n                obj.type =\r\n                    obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK;\r\n                return this.encodeAsBinary(obj);\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data, this.replacer);\r\n        }\r\n        debug(\"encoded %j as %s\", obj, str);\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = binary_js_1.deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\nexports.Encoder = Encoder;\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nclass Decoder extends component_emitter_1.Emitter {\r\n    /**\r\n     * Decoder constructor\r\n     *\r\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n     */\r\n    constructor(reviver) {\r\n        super();\r\n        this.reviver = reviver;\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            if (this.reconstructor) {\r\n                throw new Error(\"got plaintext data when reconstructing a packet\");\r\n            }\r\n            packet = this.decodeString(obj);\r\n            if (packet.type === PacketType.BINARY_EVENT ||\r\n                packet.type === PacketType.BINARY_ACK) {\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (is_binary_js_1.isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = this.tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        debug(\"decoded %s as %j\", str, p);\r\n        return p;\r\n    }\r\n    tryParse(str) {\r\n        try {\r\n            return JSON.parse(str, this.reviver);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n        }\r\n    }\r\n}\r\nexports.Decoder = Decoder;\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}