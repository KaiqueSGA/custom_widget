{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass ServiceAuthorization extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list of all tokens\n   * @example\n   * Default Query: {\n   *   page: 1,\n   *   fields: [\"name\", \"token\", \"permission\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"created_at,desc\",\n   * }\n   * @param query Search query params\n   */\n  async tokenList(query) {\n    let result = await this.doRequest({\n      path: `/serviceauth`,\n      method: \"GET\",\n      params: {\n        page: query?.page || 1,\n        fields: query?.fields || [\"name\", \"token\", \"permission\"],\n        filter: query?.filter || {},\n        amount: query?.amount || 20,\n        orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : \"created_at,desc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"last_authorization\", \"expire_time\"]));\n    return result;\n  }\n  /**\n   * Generates and retrieves a new token\n   * @param tokenParams Token params to create new token\n   */\n  async tokenCreate(tokenParams) {\n    let result = await this.doRequest({\n      path: `/serviceauth`,\n      method: \"POST\",\n      body: tokenParams\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n    return result;\n  }\n  /**\n   * Deletes a token\n   * @param token Token\n   */\n  async tokenDelete(token) {\n    const result = await this.doRequest({\n      path: `/serviceauth/${token}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  async tokenEdit(token, verificationCode) {\n    const result = await this.doRequest({\n      path: `/serviceauth/${token}`,\n      method: \"PUT\",\n      body: {\n        verification_code: verificationCode\n      }\n    });\n    return result;\n  }\n}\nexports.default = ServiceAuthorization;","map":{"version":3,"mappings":";;;;;;;;;;AACA;AACA;AAEA,MAAMA,oBAAqB,SAAQC,sBAAiC;EAClE;;;;;;;;;;;;EAYO,MAAMC,SAAS,CAACC,KAAsB;IAC3C,IAAIC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAA2B;MAC1DC,IAAI,EAAE,cAAc;MACpBC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNC,IAAI,EAAEN,KAAK,EAAEM,IAAI,IAAI,CAAC;QACtBC,MAAM,EAAEP,KAAK,EAAEO,MAAM,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC;QACxDC,MAAM,EAAER,KAAK,EAAEQ,MAAM,IAAI,EAAE;QAC3BC,MAAM,EAAET,KAAK,EAAES,MAAM,IAAI,EAAE;QAC3BC,OAAO,EAAEV,KAAK,EAAEU,OAAO,GAAG,GAAGV,KAAK,CAACU,OAAO,CAAC,CAAC,CAAC,IAAIV,KAAK,CAACU,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG;;KAEzE,CAAC;IAEFT,MAAM,GAAGA,MAAM,CAACU,GAAG,CAAEC,IAAI,IAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,YAAY,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC,CAAC;IAEpG,OAAOX,MAAM;EACf;EAEA;;;;EAIO,MAAMY,WAAW,CAACC,WAAsB;IAC7C,IAAIb,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAsB;MACrDC,IAAI,EAAE,cAAc;MACpBC,MAAM,EAAE,MAAM;MACdW,IAAI,EAAED;KACP,CAAC;IAEFb,MAAM,GAAG,wBAAU,EAACA,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC;IAE5C,OAAOA,MAAM;EACf;EAEA;;;;EAIO,MAAMe,WAAW,CAACC,KAAmB;IAC1C,MAAMhB,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,gBAAgBc,KAAK,EAAE;MAC7Bb,MAAM,EAAE;KACT,CAAC;IAEF,OAAOH,MAAM;EACf;EAEO,MAAMiB,SAAS,CAACD,KAAmB,EAAEE,gBAAyB;IACnE,MAAMlB,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,gBAAgBc,KAAK,EAAE;MAC7Bb,MAAM,EAAE,KAAK;MACbW,IAAI,EAAE;QACJK,iBAAiB,EAAED;;KAEtB,CAAC;IAEF,OAAOlB,MAAM;EACf;;AAGFoB,kBAAexB,oBAAoB","names":["ServiceAuthorization","TagoIOModule_1","tokenList","query","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","tokenCreate","tokenParams","body","tokenDelete","token","tokenEdit","verificationCode","verification_code","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\ServiceAuthorization.ts"],"sourcesContent":["import { GenericToken, ListTokenQuery, TokenCreateResponse, TokenData, TokenDataList } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\n\nclass ServiceAuthorization extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list of all tokens\n   * @example\n   * Default Query: {\n   *   page: 1,\n   *   fields: [\"name\", \"token\", \"permission\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"created_at,desc\",\n   * }\n   * @param query Search query params\n   */\n  public async tokenList(query?: ListTokenQuery): Promise<Partial<TokenDataList>[]> {\n    let result = await this.doRequest<Partial<TokenDataList>[]>({\n      path: `/serviceauth`,\n      method: \"GET\",\n      params: {\n        page: query?.page || 1,\n        fields: query?.fields || [\"name\", \"token\", \"permission\"],\n        filter: query?.filter || {},\n        amount: query?.amount || 20,\n        orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : \"created_at,desc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"last_authorization\", \"expire_time\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token\n   * @param tokenParams Token params to create new token\n   */\n  public async tokenCreate(tokenParams: TokenData): Promise<TokenCreateResponse> {\n    let result = await this.doRequest<TokenCreateResponse>({\n      path: `/serviceauth`,\n      method: \"POST\",\n      body: tokenParams,\n    });\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Deletes a token\n   * @param token Token\n   */\n  public async tokenDelete(token: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/serviceauth/${token}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  public async tokenEdit(token: GenericToken, verificationCode?: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/serviceauth/${token}`,\n      method: \"PUT\",\n      body: {\n        verification_code: verificationCode,\n      },\n    });\n\n    return result;\n  }\n}\n\nexport default ServiceAuthorization;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}