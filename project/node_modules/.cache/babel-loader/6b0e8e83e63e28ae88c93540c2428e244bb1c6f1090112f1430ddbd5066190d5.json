{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Analyses = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Analyses, _TagoIOModule_1$defau);\n  var _super = _createSuper(Analyses);\n  function Analyses() {\n    _classCallCheck(this, Analyses);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Analyses, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all analyses from the account\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     * }\n     * ```json\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_run\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Create a new analyze\n     * @param analysisObj data object to create new TagoIO Analyze\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(analysisObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/analysis\",\n                  method: \"POST\",\n                  body: _objectSpread({}, analysisObj)\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function create(_x2) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Modify any property of the analyze.\n     * @param analysisID Analyze identification\n     * @param analysisObj Analyze Object with data to replace\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(analysisID, analysisObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID),\n                  method: \"PUT\",\n                  body: _objectSpread({}, analysisObj)\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function edit(_x3, _x4) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Deletes an analyze from the account\n     * @param analysisID Analyze identification\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(analysisID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Gets information about the analyze\n     * @param analysisID Analyze identification\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(analysisID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context5.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_run\"]);\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function info(_x6) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Force analyze to run\n     * @param analysisID Analyze identification\n     * @param scopeObj simulate scope for analysis\n     */\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(analysisID, scopeObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID, \"/run\"),\n                  method: \"POST\",\n                  body: {\n                    scope: scopeObj\n                  }\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function run(_x7, _x8) {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n    /**\n     * Generate a new token for the analysis\n     * @param analysisID Analyze identification\n     */\n  }, {\n    key: \"tokenGenerate\",\n    value: function () {\n      var _tokenGenerate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(analysisID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID, \"/token\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function tokenGenerate(_x9) {\n        return _tokenGenerate.apply(this, arguments);\n      }\n      return tokenGenerate;\n    }()\n    /**\n     * Upload a file (base64) to Analysis. Automatically erase the old one\n     * @param analysisID Analyze identification\n     * @param fileObj Object with name, language and content of the file\n     */\n  }, {\n    key: \"uploadScript\",\n    value: function () {\n      var _uploadScript = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(analysisID, fileObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID, \"/upload\"),\n                  method: \"POST\",\n                  body: {\n                    file: fileObj.content,\n                    file_name: fileObj.name,\n                    language: fileObj.language\n                  }\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function uploadScript(_x10, _x11) {\n        return _uploadScript.apply(this, arguments);\n      }\n      return uploadScript;\n    }()\n    /**\n     * Get a url to download the analysis.\n     * If `version` is specified in `options`, downloads a specific version.\n     *\n     * @param analysisID Analysis identification\n     * @param options Options for the Analysis script to download\n     */\n  }, {\n    key: \"downloadScript\",\n    value: function () {\n      var _downloadScript = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(analysisID, options) {\n        var _ref, version, result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _ref = options || {}, version = _ref.version;\n                _context9.next = 3;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID, \"/download\"),\n                  method: \"GET\",\n                  params: _objectSpread({}, version && {\n                    version: version\n                  })\n                });\n              case 3:\n                result = _context9.sent;\n                result = (0, dateParser_1.default)(result, [\"expire_at\"]);\n                return _context9.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function downloadScript(_x12, _x13) {\n        return _downloadScript.apply(this, arguments);\n      }\n      return downloadScript;\n    }()\n  }]);\n  return Analyses;\n}(TagoIOModule_1.default);\nexports.default = Analyses;","map":{"version":3,"mappings":"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","names":["Analyses","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","result","map","data","analysisObj","body","analysisID","scopeObj","scope","fileObj","file","content","file_name","name","language","options","version","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Analyses.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { AnalysisCreateInfo, AnalysisInfo, AnalysisQuery, ScriptFile } from \"./analysis.types\";\n\nclass Analyses extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all analyses from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: AnalysisQuery): Promise<AnalysisInfo[]> {\n    let result = await this.doRequest<AnalysisInfo[]>({\n      path: \"/analysis/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_run\"]));\n\n    return result;\n  }\n\n  /**\n   * Create a new analyze\n   * @param analysisObj data object to create new TagoIO Analyze\n   */\n  public async create(analysisObj: AnalysisCreateInfo): Promise<{ id: GenericID; token: GenericToken }> {\n    const result = await this.doRequest<{ id: GenericID; token: GenericToken }>({\n      path: `/analysis`,\n      method: \"POST\",\n      body: {\n        ...analysisObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the analyze.\n   * @param analysisID Analyze identification\n   * @param analysisObj Analyze Object with data to replace\n   */\n  public async edit(analysisID: GenericID, analysisObj: Partial<AnalysisInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}`,\n      method: \"PUT\",\n      body: {\n        ...analysisObj,\n      },\n    });\n\n    return result;\n  }\n  /**\n   * Deletes an analyze from the account\n   * @param analysisID Analyze identification\n   */\n  public async delete(analysisID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n  /**\n   * Gets information about the analyze\n   * @param analysisID Analyze identification\n   */\n  public async info(analysisID: GenericID): Promise<AnalysisInfo> {\n    let result = await this.doRequest<AnalysisInfo>({\n      path: `/analysis/${analysisID}`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_run\"]);\n\n    return result;\n  }\n\n  /**\n   * Force analyze to run\n   * @param analysisID Analyze identification\n   * @param scopeObj simulate scope for analysis\n   */\n  public async run(analysisID: GenericID, scopeObj?: Object | any): Promise<{ analysis_token: GenericToken }> {\n    const result = await this.doRequest<{ analysis_token: GenericToken }>({\n      path: `/analysis/${analysisID}/run`,\n      method: \"POST\",\n      body: {\n        scope: scopeObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the analysis\n   * @param analysisID Analyze identification\n   */\n  public async tokenGenerate(analysisID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Upload a file (base64) to Analysis. Automatically erase the old one\n   * @param analysisID Analyze identification\n   * @param fileObj Object with name, language and content of the file\n   */\n  public async uploadScript(analysisID: GenericID, fileObj: ScriptFile): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}/upload`,\n      method: \"POST\",\n      body: {\n        file: fileObj.content,\n        file_name: fileObj.name,\n        language: fileObj.language,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get a url to download the analysis.\n   * If `version` is specified in `options`, downloads a specific version.\n   *\n   * @param analysisID Analysis identification\n   * @param options Options for the Analysis script to download\n   */\n  public async downloadScript(\n    analysisID: GenericID,\n    options?: { version?: number }\n  ): Promise<{ url: string; size_unit: string; size: number; expire_at: Date }> {\n    const { version } = options || {};\n\n    let result = await this.doRequest<{ url: string; size_unit: string; size: number; expire_at: Date }>({\n      path: `/analysis/${analysisID}/download`,\n      method: \"GET\",\n      params: {\n        ...(version && { version }),\n      },\n    });\n    result = dateParser(result, [\"expire_at\"]);\n\n    return result;\n  }\n}\n\nexport default Analyses;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}