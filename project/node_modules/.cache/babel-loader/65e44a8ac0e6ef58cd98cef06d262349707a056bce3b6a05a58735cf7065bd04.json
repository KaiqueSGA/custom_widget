{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleDownlinkError = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst Account_1 = __importDefault(require(\"../Account/Account\"));\n/**\n * Handles the message presented to the user when API response 4xx or 5xx\n * @param {AxiosError} error error object from Axios\n */\nasync function handleDownlinkError(error) {\n  if (typeof error.response?.data === \"string\" && error.response?.data.includes(\"Authorization is missing\")) {\n    throw \"Additional parameter is missing with in the TagoIO Authorization used for this device\";\n  }\n  throw `Downlink failed with status ${error.response.status}: ${JSON.stringify(error.response.data)}`;\n}\nexports.handleDownlinkError = handleDownlinkError;\n/**\n * Perform downlink to a device using official TagoIO support.\n * Example\n * - sendDownlink(account, \"736acc665bd2460018df8c52\", { payload: \"01\", port: 05, confirmed: false })\n * @param {Class} account TagoIO SDK Account instanced class\n * @param {String} device_id id of your device\n * @param {Object} dn_options downlink parameter options.\n * @param {String} dn_options.payload hexadecimal payload to be sent to the device.\n * @param {Number} [dn_options.port] port to be used for the downlink. Default is 1.\n * @param {Boolean} [dn_options.confirmed] confirmed status, default is false.\n * @returns\n */\nasync function sendDownlink(account, device_id, dn_options) {\n  if (!(account instanceof Account_1.default)) {\n    throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n  }\n  // Find the token containing the authorization code used.\n  const device_tokens = await account.devices.tokenList(device_id, {\n    page: 1,\n    fields: [\"name\", \"serie_number\", \"last_authorization\"],\n    amount: 10\n  });\n  const token = device_tokens.find(x => x.serie_number && x.last_authorization);\n  if (!token) {\n    throw \"Can't perform the downlink. Wait for at least 1 uplink from the NS to use this operation.\";\n  }\n  // Get the connector ID from the device\n  const {\n    network: network_id\n  } = await account.devices.info(device_id);\n  if (!network_id) {\n    throw \"Device is not using a network.\";\n  }\n  // Get the network information with the NS URL for the Downlink\n  const network = await account.integration.networks.info(network_id, [\"id\", \"middleware_endpoint\", \"name\"]);\n  if (!network.middleware_endpoint) {\n    throw \"This device network doesn't support downlinks.\";\n  }\n  // Set the parameters for the device. Some NS like Everynet need this.\n  const params = await account.devices.paramList(device_id);\n  let downlink_param = params.find(x => x.key === \"downlink\");\n  downlink_param = {\n    id: downlink_param ? downlink_param.id : null,\n    key: \"downlink\",\n    value: String(dn_options.payload),\n    sent: false\n  };\n  await account.devices.paramSet(device_id, downlink_param);\n  const data = {\n    device: token.serie_number,\n    authorization: token.last_authorization,\n    payload: dn_options.payload,\n    port: dn_options.port\n  };\n  const result = await axios_1.default.post(`https://${network.middleware_endpoint}/downlink`, data).catch(handleDownlinkError);\n  return `Downlink accepted with status ${result.status}`;\n}\nexports.default = sendDownlink;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AAGA;;;;AAIA,eAAeA,mBAAmB,CAACC,KAAiB;EAClD,IAAI,OAAOA,KAAK,CAACC,QAAQ,EAAEC,IAAI,KAAK,QAAQ,IAAIF,KAAK,CAACC,QAAQ,EAAEC,IAAI,CAACC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;IACzG,MAAM,uFAAuF;;EAE/F,MAAM,+BAA+BH,KAAK,CAACC,QAAQ,CAACG,MAAM,KAAKC,IAAI,CAACC,SAAS,CAACN,KAAK,CAACC,QAAQ,CAACC,IAAI,CAAC,EAAE;AACtG;AAmESK;AAjET;;;;;;;;;;;;AAYA,eAAeC,YAAY,CAACC,OAAgB,EAAEC,SAAiB,EAAEC,UAA2B;EAC1F,IAAI,EAAEF,OAAO,YAAYG,iBAAO,CAAC,EAAE;IACjC,MAAM,kEAAkE;;EAG1E;EACA,MAAMC,aAAa,GAAG,MAAMJ,OAAO,CAACK,OAAO,CAACC,SAAS,CAACL,SAAS,EAAE;IAC/DM,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,oBAAoB,CAAC;IACtDC,MAAM,EAAE;GACT,CAAC;EAEF,MAAMC,KAAK,GAAGN,aAAa,CAACO,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,YAAY,IAAID,CAAC,CAACE,kBAAkB,CAAC;EAC/E,IAAI,CAACJ,KAAK,EAAE;IACV,MAAM,2FAA2F;;EAGnG;EACA,MAAM;IAAEK,OAAO,EAAEC;EAAU,CAAE,GAAG,MAAMhB,OAAO,CAACK,OAAO,CAACY,IAAI,CAAChB,SAAS,CAAC;EACrE,IAAI,CAACe,UAAU,EAAE;IACf,MAAM,gCAAgC;;EAGxC;EACA,MAAMD,OAAO,GAAG,MAAMf,OAAO,CAACkB,WAAW,CAACC,QAAQ,CAACF,IAAI,CAACD,UAAU,EAAE,CAAC,IAAI,EAAE,qBAAqB,EAAE,MAAM,CAAC,CAAC;EAC1G,IAAI,CAACD,OAAO,CAACK,mBAAmB,EAAE;IAChC,MAAM,gDAAgD;;EAGxD;EACA,MAAMC,MAAM,GAAG,MAAMrB,OAAO,CAACK,OAAO,CAACiB,SAAS,CAACrB,SAAS,CAAC;EACzD,IAAIsB,cAAc,GAAGF,MAAM,CAACV,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACY,GAAG,KAAK,UAAU,CAAC;EAC7DD,cAAc,GAAG;IACfE,EAAE,EAAEF,cAAc,GAAGA,cAAc,CAACE,EAAE,GAAG,IAAI;IAC7CD,GAAG,EAAE,UAAU;IACfE,KAAK,EAAEC,MAAM,CAACzB,UAAU,CAAC0B,OAAO,CAAC;IACjCC,IAAI,EAAE;GACP;EACD,MAAM7B,OAAO,CAACK,OAAO,CAACyB,QAAQ,CAAC7B,SAAS,EAAEsB,cAAc,CAAC;EAEzD,MAAM9B,IAAI,GAAG;IACXsC,MAAM,EAAErB,KAAK,CAACG,YAAY;IAC1BmB,aAAa,EAAEtB,KAAK,CAACI,kBAAkB;IACvCc,OAAO,EAAE1B,UAAU,CAAC0B,OAAO;IAC3BK,IAAI,EAAE/B,UAAU,CAAC+B;GAClB;EAED,MAAMC,MAAM,GAAG,MAAMC,eAAK,CAACC,IAAI,CAAC,WAAWrB,OAAO,CAACK,mBAAmB,WAAW,EAAE3B,IAAI,CAAC,CAAC4C,KAAK,CAAC/C,mBAAmB,CAAC;EAEnH,OAAO,iCAAiC4C,MAAM,CAACvC,MAAM,EAAE;AACzD;AAEAG,kBAAeC,YAAY","names":["handleDownlinkError","error","response","data","includes","status","JSON","stringify","exports","sendDownlink","account","device_id","dn_options","Account_1","device_tokens","devices","tokenList","page","fields","amount","token","find","x","serie_number","last_authorization","network","network_id","info","integration","networks","middleware_endpoint","params","paramList","downlink_param","key","id","value","String","payload","sent","paramSet","device","authorization","port","result","axios_1","post","catch"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\sendDownlink.ts"],"sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport Account from \"../Account/Account\";\nimport { DownlinkOptions } from \"./utils.types\";\n\n/**\n * Handles the message presented to the user when API response 4xx or 5xx\n * @param {AxiosError} error error object from Axios\n */\nasync function handleDownlinkError(error: AxiosError): Promise<AxiosResponse<any, any>> {\n  if (typeof error.response?.data === \"string\" && error.response?.data.includes(\"Authorization is missing\")) {\n    throw \"Additional parameter is missing with in the TagoIO Authorization used for this device\";\n  }\n  throw `Downlink failed with status ${error.response.status}: ${JSON.stringify(error.response.data)}`;\n}\n\n/**\n * Perform downlink to a device using official TagoIO support.\n * Example\n * - sendDownlink(account, \"736acc665bd2460018df8c52\", { payload: \"01\", port: 05, confirmed: false })\n * @param {Class} account TagoIO SDK Account instanced class\n * @param {String} device_id id of your device\n * @param {Object} dn_options downlink parameter options.\n * @param {String} dn_options.payload hexadecimal payload to be sent to the device.\n * @param {Number} [dn_options.port] port to be used for the downlink. Default is 1.\n * @param {Boolean} [dn_options.confirmed] confirmed status, default is false.\n * @returns\n */\nasync function sendDownlink(account: Account, device_id: string, dn_options: DownlinkOptions) {\n  if (!(account instanceof Account)) {\n    throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n  }\n\n  // Find the token containing the authorization code used.\n  const device_tokens = await account.devices.tokenList(device_id, {\n    page: 1,\n    fields: [\"name\", \"serie_number\", \"last_authorization\"],\n    amount: 10,\n  });\n\n  const token = device_tokens.find((x) => x.serie_number && x.last_authorization);\n  if (!token) {\n    throw \"Can't perform the downlink. Wait for at least 1 uplink from the NS to use this operation.\";\n  }\n\n  // Get the connector ID from the device\n  const { network: network_id } = await account.devices.info(device_id);\n  if (!network_id) {\n    throw \"Device is not using a network.\";\n  }\n\n  // Get the network information with the NS URL for the Downlink\n  const network = await account.integration.networks.info(network_id, [\"id\", \"middleware_endpoint\", \"name\"]);\n  if (!network.middleware_endpoint) {\n    throw \"This device network doesn't support downlinks.\";\n  }\n\n  // Set the parameters for the device. Some NS like Everynet need this.\n  const params = await account.devices.paramList(device_id);\n  let downlink_param = params.find((x) => x.key === \"downlink\");\n  downlink_param = {\n    id: downlink_param ? downlink_param.id : null,\n    key: \"downlink\",\n    value: String(dn_options.payload),\n    sent: false,\n  };\n  await account.devices.paramSet(device_id, downlink_param);\n\n  const data = {\n    device: token.serie_number,\n    authorization: token.last_authorization,\n    payload: dn_options.payload,\n    port: dn_options.port,\n  };\n\n  const result = await axios.post(`https://${network.middleware_endpoint}/downlink`, data).catch(handleDownlinkError);\n\n  return `Downlink accepted with status ${result.status}`;\n}\n\nexport default sendDownlink;\nexport { handleDownlinkError };\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}