{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Network extends TagoIOModule_1.default {\n  /**\n   * Get information about the current network\n   */\n  async info() {\n    const result = await this.doRequest({\n      path: \"/info\",\n      method: \"GET\",\n      params: {\n        details: this.params.details\n      }\n    });\n    return result;\n  }\n  /**\n   * Get a valid token using token serie\n   * @param serieNumber\n   * @param authorization\n   */\n  async resolveToken(serieNumber, authorization) {\n    let path = `/integration/network/resolve/${serieNumber}`;\n    if (authorization) path = `${path}/${authorization}`;\n    const result = await this.doRequest({\n      path,\n      method: \"GET\",\n      params: {\n        details: this.params.details\n      }\n    });\n    return result;\n  }\n  /**\n   * Retrieves a list with all devices tokens related to\n   * network and connector. Network require_devices_access\n   * param need to be true.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\"\n   * }\n   * @param connectorID Connector identification\n   * @param queryObj Search query params\n   */\n  async deviceList(connectorID, queryObj) {\n    let result = await this.doRequest({\n      path: `/integration/network/${connectorID}/devices`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]));\n    return result;\n  }\n  /**\n   * Create or edit param for the Device in network\n   * @param deviceID Device ID\n   * @param configObj Configuration Data\n   * @param paramID Parameter ID\n   */\n  async deviceParamSet(deviceID, configObj, paramID) {\n    const result = await this.doRequest({\n      path: `/integration/network/${deviceID}/params`,\n      method: \"POST\",\n      body: paramID ? {\n        id: paramID,\n        ...configObj\n      } : configObj\n    });\n    return result;\n  }\n}\nexports.default = Network;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAGA;AAGA,MAAMA,OAAQ,SAAQC,sBAAmC;EACvD;;;EAGO,MAAMC,IAAI;IACf,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAe;MAChDC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNC,OAAO,EAAE,IAAI,CAACD,MAAM,CAACC;;KAExB,CAAC;IAEF,OAAOL,MAAM;EACf;EAEA;;;;;EAKO,MAAMM,YAAY,CAACC,WAAmB,EAAEC,aAAsB;IACnE,IAAIN,IAAI,GAAG,gCAAgCK,WAAW,EAAE;IAExD,IAAIC,aAAa,EAAEN,IAAI,GAAG,GAAGA,IAAI,IAAIM,aAAa,EAAE;IAEpD,MAAMR,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAe;MAChDC,IAAI;MACJC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNC,OAAO,EAAE,IAAI,CAACD,MAAM,CAACC;;KAExB,CAAC;IAEF,OAAOL,MAAM;EACf;EAEA;;;;;;;;;;;;;;EAcO,MAAMS,UAAU,CACrBC,WAAsB,EACtBC,QAAiC;IAEjC,IAAIX,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAA+B;MAC9DC,IAAI,EAAE,wBAAwBQ,WAAW,UAAU;MACnDP,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNQ,IAAI,EAAED,QAAQ,EAAEC,IAAI,IAAI,CAAC;QACzBC,MAAM,EAAEF,QAAQ,EAAEE,MAAM,IAAI,EAAE;QAC9BC,MAAM,EAAEH,QAAQ,EAAEG,MAAM,IAAI,EAAE;QAC9BC,OAAO,EAAEJ,QAAQ,EAAEI,OAAO,GAAG,GAAGJ,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,IAAIJ,QAAQ,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG;;KAElF,CAAC;IAEFf,MAAM,GAAGA,MAAM,CAACgB,GAAG,CAAEC,IAAI,IACvB,wBAAU,EAACA,IAAI,EAAE,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC,CAC5F;IAED,OAAOjB,MAAM;EACf;EAEA;;;;;;EAMO,MAAMkB,cAAc,CACzBC,QAAmB,EACnBC,SAAuC,EACvCC,OAAmB;IAEnB,MAAMrB,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,wBAAwBiB,QAAQ,SAAS;MAC/ChB,MAAM,EAAE,MAAM;MACdmB,IAAI,EAAED,OAAO,GACT;QACEE,EAAE,EAAEF,OAAO;QACX,GAAGD;OACJ,GACDA;KACL,CAAC;IAEF,OAAOpB,MAAM;EACf;;AAGFwB,kBAAe3B,OAAO","names":["Network","TagoIOModule_1","info","result","doRequest","path","method","params","details","resolveToken","serieNumber","authorization","deviceList","connectorID","queryObj","page","filter","amount","orderBy","map","data","deviceParamSet","deviceID","configObj","paramID","body","id","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Network\\Network.ts"],"sourcesContent":["import TagoIOModule, { ConnectorModuleParams } from \"../../common/TagoIOModule\";\nimport { NetworkDeviceListQuery, INetworkInfo, NetworkDeviceListQueryInfo } from \"./network.types\";\nimport { GenericID, GenericToken } from \"../../common/common.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport { ConfigurationParams } from \"../Account/devices.types\";\n\nclass Network extends TagoIOModule<ConnectorModuleParams> {\n  /**\n   * Get information about the current network\n   */\n  public async info(): Promise<INetworkInfo> {\n    const result = await this.doRequest<INetworkInfo>({\n      path: \"/info\",\n      method: \"GET\",\n      params: {\n        details: this.params.details,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get a valid token using token serie\n   * @param serieNumber\n   * @param authorization\n   */\n  public async resolveToken(serieNumber: string, authorization?: string): Promise<GenericToken> {\n    let path = `/integration/network/resolve/${serieNumber}`;\n\n    if (authorization) path = `${path}/${authorization}`;\n\n    const result = await this.doRequest<GenericToken>({\n      path,\n      method: \"GET\",\n      params: {\n        details: this.params.details,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices tokens related to\n   * network and connector. Network require_devices_access\n   * param need to be true.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\"\n   * }\n   * @param connectorID Connector identification\n   * @param queryObj Search query params\n   */\n  public async deviceList(\n    connectorID: GenericID,\n    queryObj?: NetworkDeviceListQuery\n  ): Promise<NetworkDeviceListQueryInfo[]> {\n    let result = await this.doRequest<NetworkDeviceListQueryInfo[]>({\n      path: `/integration/network/${connectorID}/devices`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Create or edit param for the Device in network\n   * @param deviceID Device ID\n   * @param configObj Configuration Data\n   * @param paramID Parameter ID\n   */\n  public async deviceParamSet(\n    deviceID: GenericID,\n    configObj: Partial<ConfigurationParams>,\n    paramID?: GenericID\n  ): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/integration/network/${deviceID}/params`,\n      method: \"POST\",\n      body: paramID\n        ? {\n            id: paramID,\n            ...configObj,\n          }\n        : configObj,\n    });\n\n    return result;\n  }\n}\n\nexport default Network;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}