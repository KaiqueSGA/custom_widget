{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n  const conditions = Array.isArray(oldDisplay?.conditions) && oldDisplay?.conditions.length > 0 ? oldDisplay?.conditions : [];\n  conditions.reverse();\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      formula: {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\"\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false\n      },\n      range: (0, common_1.convertRange)(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: conditions,\n          glass: null,\n          header: null,\n          text: null,\n          tick: null\n        }\n      },\n      tick_amount: oldDisplay?.num_ticks || 5\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"cylinder\"\n  };\n  // Tick amount should be number in all circumstance\n  newStructure.display.tick_amount = Number(newStructure.display.tick_amount);\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key]) {\n          newStructure.display.formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","decimalsString","numberformat","split","decimals","length","conditions","Array","isArray","reverse","newStructure","dashboard","alias","formula","fixed_unit","unit","unit_type","header_buttons","help","number_format","show_thousand","range","show_variables","hide_variables","theme","color","background","fill","glass","header","text","tick","tick_amount","num_ticks","id","label","realtime","type","Number","data","item","is_hide","variable","variables","key","origin","vars_format","vars_formula","vars_labels","exports","isOldStructure","widget","isOld"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\cylinder.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old CYLINDER to new CYLINDER\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, convertRange } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n\n  const conditions =\n    Array.isArray(oldDisplay?.conditions) && oldDisplay?.conditions.length > 0 ? oldDisplay?.conditions : [];\n  conditions.reverse();\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      formula: {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\",\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false,\n      },\n      range: convertRange(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: conditions,\n          glass: null,\n          header: null,\n          text: null,\n          tick: null,\n        },\n      },\n      tick_amount: oldDisplay?.num_ticks || 5,\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"cylinder\",\n  };\n  // Tick amount should be number in all circumstance\n  newStructure.display.tick_amount = Number(newStructure.display.tick_amount);\n\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key]) {\n          newStructure.display.formula = convertFormula(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula);\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}