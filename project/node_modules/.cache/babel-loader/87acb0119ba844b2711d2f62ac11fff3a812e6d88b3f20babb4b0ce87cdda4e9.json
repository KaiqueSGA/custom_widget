{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleDownlinkError = void 0;\nvar axios_1 = __importDefault(require(\"axios\"));\nvar Account_1 = __importDefault(require(\"../Account/Account\"));\n/**\r\n * Handles the message presented to the user when API response 4xx or 5xx\r\n * @param {AxiosError} error error object from Axios\r\n */\nfunction handleDownlinkError(_x) {\n  return _handleDownlinkError.apply(this, arguments);\n}\nfunction _handleDownlinkError() {\n  _handleDownlinkError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(error) {\n    var _error$response, _error$response2;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) === \"string\" && (_error$response2 = error.response) !== null && _error$response2 !== void 0 && _error$response2.data.includes(\"Authorization is missing\"))) {\n              _context.next = 2;\n              break;\n            }\n            throw \"Additional parameter is missing with in the TagoIO Authorization used for this device\";\n          case 2:\n            throw \"Downlink failed with status \".concat(error.response.status, \": \").concat(JSON.stringify(error.response.data));\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleDownlinkError.apply(this, arguments);\n}\nexports.handleDownlinkError = handleDownlinkError;\n/**\r\n * Perform downlink to a device using official TagoIO support.\r\n * Example\r\n * - sendDownlink(account, \"736acc665bd2460018df8c52\", { payload: \"01\", port: 05, confirmed: false })\r\n * @param {Class} account TagoIO SDK Account instanced class\r\n * @param {String} device_id id of your device\r\n * @param {Object} dn_options downlink parameter options.\r\n * @param {String} dn_options.payload hexadecimal payload to be sent to the device.\r\n * @param {Number} [dn_options.port] port to be used for the downlink. Default is 1.\r\n * @param {Boolean} [dn_options.confirmed] confirmed status, default is false.\r\n * @returns\r\n */\nfunction sendDownlink(_x2, _x3, _x4) {\n  return _sendDownlink.apply(this, arguments);\n}\nfunction _sendDownlink() {\n  _sendDownlink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account, device_id, dn_options) {\n    var device_tokens, token, _yield$account$device, network_id, network, params, downlink_param, data, result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (account instanceof Account_1.default) {\n              _context2.next = 2;\n              break;\n            }\n            throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n          case 2:\n            _context2.next = 4;\n            return account.devices.tokenList(device_id, {\n              page: 1,\n              fields: [\"name\", \"serie_number\", \"last_authorization\"],\n              amount: 10\n            });\n          case 4:\n            device_tokens = _context2.sent;\n            token = device_tokens.find(function (x) {\n              return x.serie_number && x.last_authorization;\n            });\n            if (token) {\n              _context2.next = 8;\n              break;\n            }\n            throw \"Can't perform the downlink. Wait for at least 1 uplink from the NS to use this operation.\";\n          case 8:\n            _context2.next = 10;\n            return account.devices.info(device_id);\n          case 10:\n            _yield$account$device = _context2.sent;\n            network_id = _yield$account$device.network;\n            if (network_id) {\n              _context2.next = 14;\n              break;\n            }\n            throw \"Device is not using a network.\";\n          case 14:\n            _context2.next = 16;\n            return account.integration.networks.info(network_id, [\"id\", \"middleware_endpoint\", \"name\"]);\n          case 16:\n            network = _context2.sent;\n            if (network.middleware_endpoint) {\n              _context2.next = 19;\n              break;\n            }\n            throw \"This device network doesn't support downlinks.\";\n          case 19:\n            _context2.next = 21;\n            return account.devices.paramList(device_id);\n          case 21:\n            params = _context2.sent;\n            downlink_param = params.find(function (x) {\n              return x.key === \"downlink\";\n            });\n            downlink_param = {\n              id: downlink_param ? downlink_param.id : null,\n              key: \"downlink\",\n              value: String(dn_options.payload),\n              sent: false\n            };\n            _context2.next = 26;\n            return account.devices.paramSet(device_id, downlink_param);\n          case 26:\n            data = {\n              device: token.serie_number,\n              authorization: token.last_authorization,\n              payload: dn_options.payload,\n              port: dn_options.port\n            };\n            _context2.next = 29;\n            return axios_1.default.post(\"https://\".concat(network.middleware_endpoint, \"/downlink\"), data).catch(handleDownlinkError);\n          case 29:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", \"Downlink accepted with status \".concat(result.status));\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _sendDownlink.apply(this, arguments);\n}\nexports.default = sendDownlink;","map":{"version":3,"mappings":"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","names":["handleDownlinkError","error","response","data","includes","status","JSON","stringify","exports","sendDownlink","account","device_id","dn_options","Account_1","devices","tokenList","page","fields","amount","device_tokens","token","find","x","serie_number","last_authorization","info","network_id","network","integration","networks","middleware_endpoint","paramList","params","downlink_param","key","id","value","String","payload","sent","paramSet","device","authorization","port","axios_1","post","catch","result"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\sendDownlink.ts"],"sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport Account from \"../Account/Account\";\r\nimport { DownlinkOptions } from \"./utils.types\";\r\n\r\n/**\r\n * Handles the message presented to the user when API response 4xx or 5xx\r\n * @param {AxiosError} error error object from Axios\r\n */\r\nasync function handleDownlinkError(error: AxiosError): Promise<AxiosResponse<any, any>> {\r\n  if (typeof error.response?.data === \"string\" && error.response?.data.includes(\"Authorization is missing\")) {\r\n    throw \"Additional parameter is missing with in the TagoIO Authorization used for this device\";\r\n  }\r\n  throw `Downlink failed with status ${error.response.status}: ${JSON.stringify(error.response.data)}`;\r\n}\r\n\r\n/**\r\n * Perform downlink to a device using official TagoIO support.\r\n * Example\r\n * - sendDownlink(account, \"736acc665bd2460018df8c52\", { payload: \"01\", port: 05, confirmed: false })\r\n * @param {Class} account TagoIO SDK Account instanced class\r\n * @param {String} device_id id of your device\r\n * @param {Object} dn_options downlink parameter options.\r\n * @param {String} dn_options.payload hexadecimal payload to be sent to the device.\r\n * @param {Number} [dn_options.port] port to be used for the downlink. Default is 1.\r\n * @param {Boolean} [dn_options.confirmed] confirmed status, default is false.\r\n * @returns\r\n */\r\nasync function sendDownlink(account: Account, device_id: string, dn_options: DownlinkOptions) {\r\n  if (!(account instanceof Account)) {\r\n    throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\r\n  }\r\n\r\n  // Find the token containing the authorization code used.\r\n  const device_tokens = await account.devices.tokenList(device_id, {\r\n    page: 1,\r\n    fields: [\"name\", \"serie_number\", \"last_authorization\"],\r\n    amount: 10,\r\n  });\r\n\r\n  const token = device_tokens.find((x) => x.serie_number && x.last_authorization);\r\n  if (!token) {\r\n    throw \"Can't perform the downlink. Wait for at least 1 uplink from the NS to use this operation.\";\r\n  }\r\n\r\n  // Get the connector ID from the device\r\n  const { network: network_id } = await account.devices.info(device_id);\r\n  if (!network_id) {\r\n    throw \"Device is not using a network.\";\r\n  }\r\n\r\n  // Get the network information with the NS URL for the Downlink\r\n  const network = await account.integration.networks.info(network_id, [\"id\", \"middleware_endpoint\", \"name\"]);\r\n  if (!network.middleware_endpoint) {\r\n    throw \"This device network doesn't support downlinks.\";\r\n  }\r\n\r\n  // Set the parameters for the device. Some NS like Everynet need this.\r\n  const params = await account.devices.paramList(device_id);\r\n  let downlink_param = params.find((x) => x.key === \"downlink\");\r\n  downlink_param = {\r\n    id: downlink_param ? downlink_param.id : null,\r\n    key: \"downlink\",\r\n    value: String(dn_options.payload),\r\n    sent: false,\r\n  };\r\n  await account.devices.paramSet(device_id, downlink_param);\r\n\r\n  const data = {\r\n    device: token.serie_number,\r\n    authorization: token.last_authorization,\r\n    payload: dn_options.payload,\r\n    port: dn_options.port,\r\n  };\r\n\r\n  const result = await axios.post(`https://${network.middleware_endpoint}/downlink`, data).catch(handleDownlinkError);\r\n\r\n  return `Downlink accepted with status ${result.status}`;\r\n}\r\n\r\nexport default sendDownlink;\r\nexport { handleDownlinkError };\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}