{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Devices = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Devices, _TagoIOModule_1$defau);\n  var _super = _createSuper(Devices);\n  function Devices() {\n    _classCallCheck(this, Devices);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Devices, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all devices from the account\n     * @default\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     *   resolveBucketName: false\n     * }\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/device\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\",\n                    resolveBucketName: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.resolveBucketName) || false\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Generates and retrieves a new action from the Device\n     * @param deviceObj Object data to create new device\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(deviceObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/device\",\n                  method: \"POST\",\n                  body: deviceObj\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function create(_x2) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Modify any property of the device\n     * @param deviceID Device ID\n     * @param deviceObj Device object with fields to replace\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(deviceID, deviceObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID),\n                  method: \"PUT\",\n                  body: deviceObj\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function edit(_x3, _x4) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Deletes an device from the account\n     * @param deviceID Device ID\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(deviceID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Get Info of the Device\n     * @param deviceID Device ID\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(deviceID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context5.sent;\n                result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\", \"last_retention\"]);\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function info(_x6) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Create or edit param for the Device\n     * @param deviceID Device ID\n     * @param configObj Configuration Data\n     * @param paramID Parameter ID\n     */\n  }, {\n    key: \"paramSet\",\n    value: function () {\n      var _paramSet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(deviceID, configObj, paramID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID, \"/params\"),\n                  method: \"POST\",\n                  body: paramID ? _objectSpread({\n                    id: paramID\n                  }, configObj) : configObj\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function paramSet(_x7, _x8, _x9) {\n        return _paramSet.apply(this, arguments);\n      }\n      return paramSet;\n    }()\n    /**\n     * List Params for the Device\n     * @param deviceID Device ID\n     * @param sentStatus True return only sent=true, False return only sent=false\n     */\n  }, {\n    key: \"paramList\",\n    value: function () {\n      var _paramList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(deviceID, sentStatus) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID, \"/params\"),\n                  method: \"GET\",\n                  params: {\n                    sent_status: sentStatus\n                  }\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function paramList(_x10, _x11) {\n        return _paramList.apply(this, arguments);\n      }\n      return paramList;\n    }()\n    /**\n     * Remove param for the Device\n     * @param deviceID Device ID\n     * @param paramID Parameter ID\n     */\n  }, {\n    key: \"paramRemove\",\n    value: function () {\n      var _paramRemove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(deviceID, paramID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID, \"/params/\").concat(paramID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function paramRemove(_x12, _x13) {\n        return _paramRemove.apply(this, arguments);\n      }\n      return paramRemove;\n    }()\n    /**\n     * Retrieves a list of all tokens\n     * @default\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"name\", \"token\", \"permission\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"created_at,desc\",\n     * }\n     * @param deviceID Device ID\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"tokenList\",\n    value: function () {\n      var _tokenList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(deviceID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/device/token/\".concat(deviceID),\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"name\", \"token\", \"permission\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"created_at,desc\"\n                  }\n                });\n              case 2:\n                result = _context9.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"last_authorization\", \"expire_time\"]);\n                });\n                return _context9.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function tokenList(_x14, _x15) {\n        return _tokenList.apply(this, arguments);\n      }\n      return tokenList;\n    }()\n    /**\n     * Generates and retrieves a new token\n     * @param deviceID Device ID\n     * @param tokenParams Params for new token\n     */\n  }, {\n    key: \"tokenCreate\",\n    value: function () {\n      var _tokenCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(deviceID, tokenParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.doRequest({\n                  path: \"/device/token\",\n                  method: \"POST\",\n                  body: _objectSpread({\n                    device: deviceID\n                  }, tokenParams)\n                });\n              case 2:\n                result = _context10.sent;\n                result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n                return _context10.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function tokenCreate(_x16, _x17) {\n        return _tokenCreate.apply(this, arguments);\n      }\n      return tokenCreate;\n    }()\n    /**\n     * Delete a token\n     * @param token Token\n     */\n  }, {\n    key: \"tokenDelete\",\n    value: function () {\n      var _tokenDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(token) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.doRequest({\n                  path: \"/device/token/\".concat(token),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function tokenDelete(_x18) {\n        return _tokenDelete.apply(this, arguments);\n      }\n      return tokenDelete;\n    }()\n    /**\n     * Get data from all variables in the device.\n     *\n     * @param deviceId Device ID.\n     * @param queryParams Query parameters to filter the results.\n     *\n     * @returns Array with the data values stored in the device.\n     *\n     * @example\n     * ```ts\n     * const myDevice = new Device({ token: \"my_device_token\" });\n     *\n     * const lastTenValues = await myDevice.getVariablesData(\"myDeviceId\", { qty: 10 });\n     * ```\n     */\n  }, {\n    key: \"getDeviceData\",\n    value: function () {\n      var _getDeviceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(deviceId, queryParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceId, \"/data\"),\n                  method: \"GET\",\n                  params: queryParams\n                });\n              case 2:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result.map(function (item) {\n                  return (0, dateParser_1.default)(item, [\"time\", \"created_at\"]);\n                }));\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function getDeviceData(_x19, _x20) {\n        return _getDeviceData.apply(this, arguments);\n      }\n      return getDeviceData;\n    }()\n    /**\n     * Empty all data in a device.\n     *\n     * @param deviceId Device ID.\n     *\n     * @returns Success message.\n     */\n  }, {\n    key: \"emptyDeviceData\",\n    value: function () {\n      var _emptyDeviceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(deviceId) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceId, \"/empty\"),\n                  method: \"POST\"\n                });\n              case 2:\n                result = _context13.sent;\n                return _context13.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function emptyDeviceData(_x21) {\n        return _emptyDeviceData.apply(this, arguments);\n      }\n      return emptyDeviceData;\n    }()\n    /**\n     * Edit data records in a device using the profile token and device ID.\n     *\n     * The `updatedData` can be a single data record or an array of records to be updated,\n     * each of the records must have the `id` of the record and the fields to be updated.\n     *\n     * @param deviceId Device ID.\n     * @param updatedData A single or an array of updated data records.\n     *\n     * @returns Success message indicating amount of records updated (can be 0).\n     *\n     * @example\n     * ```ts\n     * const myDevice = new Device({ token: \"my_device_token\" });\n     *\n     * await myDevice.editDeviceData(\"myDeviceId\", { id: \"idOfTheRecord\", value: \"new value\", unit: \"new unit\" });\n     * ```\n     */\n  }, {\n    key: \"editDeviceData\",\n    value: function () {\n      var _editDeviceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(deviceId, updatedData) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceId, \"/data\"),\n                  method: \"PUT\",\n                  body: updatedData\n                });\n              case 2:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function editDeviceData(_x22, _x23) {\n        return _editDeviceData.apply(this, arguments);\n      }\n      return editDeviceData;\n    }()\n    /**\n     * Delete data records in a device using the profile token and device ID.\n     *\n     * See the example to understand how to use this method properly to have full control on what to delete.\n     *\n     * ! If query parameters are empty, all data for the device will be deleted.\n     *\n     * @param deviceId Device ID.\n     * @param queryParams Parameters to specify what should be deleted on the device's data.\n     *\n     * @returns Success message indicating amount of records deleted (can be 0).\n     *\n     * @example\n     * ```ts\n     * const myDevice = new Device({ token: \"my_device_token\" });\n     *\n     * await myDevice.deleteDeviceData(\"myDeviceId\", { ids: [\"recordIdToDelete\", \"anotherRecordIdToDelete\" ] });\n     * ```\n     */\n  }, {\n    key: \"deleteDeviceData\",\n    value: function () {\n      var _deleteDeviceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(deviceId, queryParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceId, \"/data\"),\n                  method: \"DELETE\",\n                  params: queryParams\n                });\n              case 2:\n                result = _context15.sent;\n                return _context15.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function deleteDeviceData(_x24, _x25) {\n        return _deleteDeviceData.apply(this, arguments);\n      }\n      return deleteDeviceData;\n    }()\n    /**\n     * Get Info of the Device Chunks.\n     * @experimental\n     * @param deviceID Device ID\n     */\n  }, {\n    key: \"getChunk\",\n    value: function () {\n      var _getChunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(deviceID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID, \"/chunk\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context16.sent;\n                return _context16.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function getChunk(_x26) {\n        return _getChunk.apply(this, arguments);\n      }\n      return getChunk;\n    }()\n    /**\n     * Delete the chunk data.\n     * @experimental\n     * @param deviceID Device ID\n     * @param chunkID Chunk ID\n     */\n  }, {\n    key: \"deleteChunk\",\n    value: function () {\n      var _deleteChunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(deviceID, chunkID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID, \"/chunk/\").concat(chunkID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context17.sent;\n                return _context17.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function deleteChunk(_x27, _x28) {\n        return _deleteChunk.apply(this, arguments);\n      }\n      return deleteChunk;\n    }()\n    /**\n     * Schedule to export the Device Chunk's data to the TagoIO's files.\n     * @experimental\n     */\n  }, {\n    key: \"copyChunk\",\n    value: function () {\n      var _copyChunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(params) {\n        var body, result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                body = {\n                  chunk_id: params === null || params === void 0 ? void 0 : params.chunkID,\n                  headers: params === null || params === void 0 ? void 0 : params.headers,\n                  file_address: params === null || params === void 0 ? void 0 : params.file_address\n                };\n                _context18.next = 3;\n                return this.doRequest({\n                  path: \"/device/\".concat(params === null || params === void 0 ? void 0 : params.deviceID, \"/chunk/copy\"),\n                  method: \"POST\",\n                  body: body\n                });\n              case 3:\n                result = _context18.sent;\n                return _context18.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function copyChunk(_x29) {\n        return _copyChunk.apply(this, arguments);\n      }\n      return copyChunk;\n    }()\n  }]);\n  return Devices;\n}(TagoIOModule_1.default);\nexports.default = Devices;","map":{"version":3,"mappings":"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","names":["Devices","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","resolveBucketName","result","map","data","deviceObj","body","deviceID","configObj","paramID","id","sentStatus","sent_status","tokenParams","device","token","deviceId","queryParams","item","updatedData","chunkID","chunk_id","headers","file_address","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Devices.ts"],"sourcesContent":["import type {\n  Data,\n  DataEdit,\n  GenericID,\n  GenericToken,\n  TokenCreateResponse,\n  TokenData,\n} from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport type { DataQuery } from \"../Device/device.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport type {\n  ConfigurationParams,\n  DeviceCreateInfo,\n  DeviceCreateResponse,\n  DeviceInfo,\n  DeviceQuery,\n  DeviceListItem,\n  DeviceTokenDataList,\n  ListDeviceTokenQuery,\n  DeviceEditInfo,\n  DeviceChunkData,\n  DeviceChunkParams,\n  DeviceChunkCopyResponse,\n} from \"./devices.types\";\n\nclass Devices extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all devices from the account\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false\n   * }\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\n    let result = await this.doRequest<DeviceListItem[]>({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new action from the Device\n   * @param deviceObj Object data to create new device\n   */\n  public async create(deviceObj: DeviceCreateInfo): Promise<DeviceCreateResponse> {\n    const result = await this.doRequest<DeviceCreateResponse>({\n      path: \"/device\",\n      method: \"POST\",\n      body: deviceObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the device\n   * @param deviceID Device ID\n   * @param deviceObj Device object with fields to replace\n   */\n  public async edit(deviceID: GenericID, deviceObj: DeviceEditInfo): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceID}`,\n      method: \"PUT\",\n      body: deviceObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes an device from the account\n   * @param deviceID Device ID\n   */\n  public async delete(deviceID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device\n   * @param deviceID Device ID\n   */\n  public async info(deviceID: GenericID): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\n      \"last_input\",\n      \"last_output\",\n      \"updated_at\",\n      \"created_at\",\n      \"inspected_at\",\n      \"last_retention\",\n    ]);\n\n    return result;\n  }\n\n  /**\n   * Create or edit param for the Device\n   * @param deviceID Device ID\n   * @param configObj Configuration Data\n   * @param paramID Parameter ID\n   */\n  public async paramSet(\n    deviceID: GenericID,\n    configObj: Partial<ConfigurationParams>,\n    paramID?: GenericID\n  ): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceID}/params`,\n      method: \"POST\",\n      body: paramID\n        ? {\n            id: paramID,\n            ...configObj,\n          }\n        : configObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * List Params for the Device\n   * @param deviceID Device ID\n   * @param sentStatus True return only sent=true, False return only sent=false\n   */\n  public async paramList(deviceID: GenericID, sentStatus?: Boolean): Promise<ConfigurationParams[]> {\n    const result = await this.doRequest<ConfigurationParams[]>({\n      path: `/device/${deviceID}/params`,\n      method: \"GET\",\n      params: { sent_status: sentStatus },\n    });\n\n    return result;\n  }\n\n  /**\n   * Remove param for the Device\n   * @param deviceID Device ID\n   * @param paramID Parameter ID\n   */\n  public async paramRemove(deviceID: GenericID, paramID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceID}/params/${paramID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list of all tokens\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"name\", \"token\", \"permission\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"created_at,desc\",\n   * }\n   * @param deviceID Device ID\n   * @param queryObj Search query params\n   */\n\n  public async tokenList(\n    deviceID: GenericID,\n    queryObj?: ListDeviceTokenQuery\n  ): Promise<Partial<DeviceTokenDataList>[]> {\n    let result = await this.doRequest<Partial<DeviceTokenDataList>[]>({\n      path: `/device/token/${deviceID}`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"last_authorization\", \"expire_time\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token\n   * @param deviceID Device ID\n   * @param tokenParams Params for new token\n   */\n  public async tokenCreate(deviceID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\n    let result = await this.doRequest<TokenCreateResponse>({\n      path: `/device/token`,\n      method: \"POST\",\n      body: { device: deviceID, ...tokenParams },\n    });\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Delete a token\n   * @param token Token\n   */\n  public async tokenDelete(token: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/token/${token}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get data from all variables in the device.\n   *\n   * @param deviceId Device ID.\n   * @param queryParams Query parameters to filter the results.\n   *\n   * @returns Array with the data values stored in the device.\n   *\n   * @example\n   * ```ts\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const lastTenValues = await myDevice.getVariablesData(\"myDeviceId\", { qty: 10 });\n   * ```\n   */\n  public async getDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<Data[]> {\n    const result = await this.doRequest<Data[]>({\n      path: `/device/${deviceId}/data`,\n      method: \"GET\",\n      params: queryParams,\n    });\n\n    return result.map((item) => dateParser(item, [\"time\", \"created_at\"]));\n  }\n\n  /**\n   * Empty all data in a device.\n   *\n   * @param deviceId Device ID.\n   *\n   * @returns Success message.\n   */\n  public async emptyDeviceData(deviceId: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceId}/empty`,\n      method: \"POST\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Edit data records in a device using the profile token and device ID.\n   *\n   * The `updatedData` can be a single data record or an array of records to be updated,\n   * each of the records must have the `id` of the record and the fields to be updated.\n   *\n   * @param deviceId Device ID.\n   * @param updatedData A single or an array of updated data records.\n   *\n   * @returns Success message indicating amount of records updated (can be 0).\n   *\n   * @example\n   * ```ts\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * await myDevice.editDeviceData(\"myDeviceId\", { id: \"idOfTheRecord\", value: \"new value\", unit: \"new unit\" });\n   * ```\n   */\n  public async editDeviceData(deviceId: GenericID, updatedData: DataEdit | DataEdit[]): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceId}/data`,\n      method: \"PUT\",\n      body: updatedData,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete data records in a device using the profile token and device ID.\n   *\n   * See the example to understand how to use this method properly to have full control on what to delete.\n   *\n   * ! If query parameters are empty, all data for the device will be deleted.\n   *\n   * @param deviceId Device ID.\n   * @param queryParams Parameters to specify what should be deleted on the device's data.\n   *\n   * @returns Success message indicating amount of records deleted (can be 0).\n   *\n   * @example\n   * ```ts\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * await myDevice.deleteDeviceData(\"myDeviceId\", { ids: [\"recordIdToDelete\", \"anotherRecordIdToDelete\" ] });\n   * ```\n   */\n  public async deleteDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceId}/data`,\n      method: \"DELETE\",\n      params: queryParams,\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device Chunks.\n   * @experimental\n   * @param deviceID Device ID\n   */\n  public async getChunk(deviceID: GenericID): Promise<DeviceChunkData[]> {\n    const result = await this.doRequest<DeviceChunkData[]>({\n      path: `/device/${deviceID}/chunk`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete the chunk data.\n   * @experimental\n   * @param deviceID Device ID\n   * @param chunkID Chunk ID\n   */\n  public async deleteChunk(deviceID: GenericID, chunkID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/${deviceID}/chunk/${chunkID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Schedule to export the Device Chunk's data to the TagoIO's files.\n   * @experimental\n   */\n  public async copyChunk(params: DeviceChunkParams): Promise<DeviceChunkCopyResponse> {\n    const body = {\n      chunk_id: params?.chunkID,\n      headers: params?.headers,\n      file_address: params?.file_address,\n    };\n\n    const result = await this.doRequest<DeviceChunkCopyResponse>({\n      path: `/device/${params?.deviceID}/chunk/copy`,\n      method: \"POST\",\n      body,\n    });\n\n    return result;\n  }\n}\n\nexport default Devices;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}