{"ast":null,"code":"\"use strict\";\n\n// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old VARTICAL BAR CHART to new VERTICAL BAR CHART\n// ? ====================================================================================\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const groupBy = oldDisplay?.group_by === \"date\" ? \"time\" : oldDisplay?.group_by;\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      downsample: (0, common_1.convertDownsample)(oldDisplay),\n      group_by: groupBy ? groupBy : \"time\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      intervals: oldDisplay?.intervals && Array.isArray(oldDisplay?.intervals) ? oldDisplay.intervals.map(common_1.convertInterval) : [],\n      max_points: oldDisplay?.max_points || 5000,\n      order_by: oldDisplay?.order_by ? oldDisplay?.order_by : \"time\",\n      show_legend: true,\n      show_point_values: !!oldDisplay?.enable_labels,\n      stacked: oldDisplay?.stacked === \"realtime\",\n      theme: {\n        color: {\n          background: null,\n          header: null,\n          label: null,\n          tick: null\n        }\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"vertical_bar_chart\"\n  };\n  if (oldWidget?.realtime === \"variable\" && oldDisplay?.plot_by === \"time\") {\n    const timeVariable = oldWidget.data.filter(e => e?.is_global_time_data)?.[0] || {};\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"time\",\n      variable: {\n        origin: timeVariable?.origin || timeVariable?.origin?.id,\n        variable: timeVariable?.variables?.[0] || \"\"\n      }\n    };\n  } else if (oldDisplay?.plot_by === \"group\") {\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"group\",\n      variable: {\n        origin: oldDisplay?.plot_variable_group?.origin?.id || oldDisplay?.plot_variable_group?.origin,\n        variable: oldDisplay?.plot_variable_group?.variable\n      }\n    };\n  } else {\n    newStructure.display.x_axis = {\n      plot_by: \"realtime\",\n      type: \"time\"\n    };\n  }\n  if (oldDisplay?.scale === \"yes\") {\n    newStructure.display.y_axis = {\n      scale: {\n        maximum: oldDisplay?.y_max || \"\",\n        minimum: oldDisplay?.y_min || \"\",\n        type: \"fixed\"\n      }\n    };\n  } else {\n    newStructure.display.y_axis = {\n      scale: {\n        type: \"dynamic\"\n      }\n    };\n  }\n  newStructure.display.y_axis.show_metric_abbreviation = oldDisplay?.show_abbreviation || \"\";\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item?.variables) {\n        const key = `${item.origin}${variable}`;\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[key]);\n        const color = common_1.chartColors.find(e => {\n          return !newStructure.display.variables.find(v => v?.color === e);\n        }) || \"#999\";\n        newStructure.display.variables.push({\n          color,\n          origin: item.origin,\n          variable,\n          ...(alias ? {\n            alias\n          } : {}),\n          ...(numberFormat ? {\n            number_format: numberFormat\n          } : {}),\n          ...(formula ? {\n            formula\n          } : {})\n        });\n      }\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.numberformat || widget?.display?.hide_variables !== undefined || widget?.display?.watermark !== undefined || widget?.display?.pie_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","groupBy","group_by","newStructure","dashboard","downsample","header_buttons","help","intervals","Array","isArray","map","common_1","max_points","order_by","show_legend","show_point_values","enable_labels","stacked","theme","color","background","header","label","tick","variables","id","realtime","type","plot_by","timeVariable","data","filter","e","is_global_time_data","x_axis","variable","origin","plot_variable_group","scale","y_axis","maximum","y_max","minimum","y_min","show_metric_abbreviation","show_abbreviation","item","is_hide","key","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","find","v","push","number_format","exports","isOldStructure","widget","isOld","numberformat","hide_variables","undefined","watermark","pie_type"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\verticalbarchart.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old VARTICAL BAR CHART to new VERTICAL BAR CHART\n// ? ====================================================================================\n\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { chartColors, convertDownsample, convertFormula, convertInterval } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n  const groupBy = oldDisplay?.group_by === \"date\" ? \"time\" : oldDisplay?.group_by;\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      downsample: convertDownsample(oldDisplay),\n      group_by: groupBy ? groupBy : \"time\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      intervals:\n        oldDisplay?.intervals && Array.isArray(oldDisplay?.intervals) ? oldDisplay.intervals.map(convertInterval) : [],\n      max_points: oldDisplay?.max_points || 5000,\n      order_by: oldDisplay?.order_by ? oldDisplay?.order_by : \"time\",\n      show_legend: true,\n      show_point_values: !!oldDisplay?.enable_labels,\n      stacked: oldDisplay?.stacked === \"realtime\",\n      theme: {\n        color: {\n          background: null,\n          header: null,\n          label: null,\n          tick: null,\n        },\n      },\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"vertical_bar_chart\",\n  };\n\n  if (oldWidget?.realtime === \"variable\" && oldDisplay?.plot_by === \"time\") {\n    const timeVariable = oldWidget.data.filter((e: any) => e?.is_global_time_data)?.[0] || {};\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"time\",\n      variable: {\n        origin: timeVariable?.origin || timeVariable?.origin?.id,\n        variable: timeVariable?.variables?.[0] || \"\",\n      },\n    };\n  } else if (oldDisplay?.plot_by === \"group\") {\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"group\",\n      variable: {\n        origin: oldDisplay?.plot_variable_group?.origin?.id || oldDisplay?.plot_variable_group?.origin,\n        variable: oldDisplay?.plot_variable_group?.variable,\n      },\n    };\n  } else {\n    newStructure.display.x_axis = {\n      plot_by: \"realtime\",\n      type: \"time\",\n    };\n  }\n\n  if (oldDisplay?.scale === \"yes\") {\n    newStructure.display.y_axis = {\n      scale: {\n        maximum: oldDisplay?.y_max || \"\",\n        minimum: oldDisplay?.y_min || \"\",\n        type: \"fixed\",\n      },\n    };\n  } else {\n    newStructure.display.y_axis = {\n      scale: {\n        type: \"dynamic\",\n      },\n    };\n  }\n\n  newStructure.display.y_axis.show_metric_abbreviation = oldDisplay?.show_abbreviation || \"\";\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item?.variables) {\n        const key = `${item.origin}${variable}`;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\n        const color =\n          chartColors.find((e: string) => {\n            return !newStructure.display.variables.find((v: any) => v?.color === e);\n          }) || \"#999\";\n\n        newStructure.display.variables.push({\n          color,\n          origin: item.origin,\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n          ...(formula ? { formula } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.numberformat ||\n    widget?.display?.hide_variables !== undefined ||\n    widget?.display?.watermark !== undefined ||\n    widget?.display?.pie_type\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}