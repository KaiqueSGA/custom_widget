{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Account_1 = __importDefault(require(\"../Account/Account\"));\n/**\n *\n * @param account Account instance\n * @param deviceID Id of device\n * @param names Array of names of the token, if null will return the first token found\n */\nfunction getTokenByName(_x, _x2, _x3) {\n  return _getTokenByName.apply(this, arguments);\n}\nfunction _getTokenByName() {\n  _getTokenByName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account, deviceID, names) {\n    var tokens, _tokens$, namesArray, token;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (account instanceof Account_1.default) {\n              _context.next = 2;\n              break;\n            }\n            throw \"Account parameter must be an instance of TagoIO Account.\";\n          case 2:\n            _context.next = 4;\n            return account.devices.tokenList(deviceID);\n          case 4:\n            tokens = _context.sent;\n            if (!(!tokens || !tokens[0])) {\n              _context.next = 7;\n              break;\n            }\n            return _context.abrupt(\"return\", null);\n          case 7:\n            if (!(!names || !names.length)) {\n              _context.next = 9;\n              break;\n            }\n            return _context.abrupt(\"return\", (_tokens$ = tokens[0]) === null || _tokens$ === void 0 ? void 0 : _tokens$.token);\n          case 9:\n            namesArray = Array.isArray(names) ? names : [names];\n            token = tokens.find(function (t) {\n              return namesArray.some(function (n) {\n                return t.name.includes(n);\n              });\n            });\n            if (token) {\n              _context.next = 13;\n              break;\n            }\n            throw \"Can't find Token for \".concat(deviceID, \" in \").concat(namesArray.join(\", \"));\n          case 13:\n            return _context.abrupt(\"return\", token.token);\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getTokenByName.apply(this, arguments);\n}\nexports.default = getTokenByName;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;AAEA;;;;;;AAAA,SAMeA,cAAc;EAAA;AAAA;AAAA;EAAA,6EAA7B,iBAA8BC,OAAgB,EAAEC,QAAgB,EAAEC,KAAyB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACnFF,OAAO,YAAYG,iBAAO;cAAA;cAAA;YAAA;YAAA,MACxB,0DAA0D;UAAA;YAAA;YAAA,OAG7CH,OAAO,CAACI,OAAO,CAACC,SAAS,CAACJ,QAAQ,CAAC;UAAA;YAAlDK,MAAM;YAAA,MACR,CAACA,MAAM,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC;cAAA;cAAA;YAAA;YAAA,iCAChB,IAAI;UAAA;YAAA,MAGT,CAACJ,KAAK,IAAI,CAACA,KAAK,CAACK,MAAM;cAAA;cAAA;YAAA;YAAA,6CAClBD,MAAM,CAAC,CAAC,CAAC,6CAAT,SAAWE,KAAK;UAAA;YAGnBC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;YAEnDM,KAAK,GAAGF,MAAM,CAACM,IAAI,CAAC,UAACC,CAAC;cAAA,OAAKJ,UAAU,CAACK,IAAI,CAAC,UAACC,CAAC;gBAAA,OAAKF,CAAC,CAACG,IAAI,CAACC,QAAQ,CAACF,CAAC,CAAC;cAAA,EAAC;YAAA,EAAC;YAAA,IAEvEP,KAAK;cAAA;cAAA;YAAA;YAAA,qCACsBP,QAAQ,iBAAOQ,UAAU,CAACS,IAAI,CAAC,IAAI,CAAC;UAAA;YAAA,iCAG7DV,KAAK,CAACA,KAAK;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACnB;EAAA;AAAA;AAEDW,kBAAepB,cAAc","names":["getTokenByName","account","deviceID","names","Account_1","devices","tokenList","tokens","length","token","namesArray","Array","isArray","find","t","some","n","name","includes","join","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\getTokenByName.ts"],"sourcesContent":["import Account from \"../Account/Account\";\n\n/**\n *\n * @param account Account instance\n * @param deviceID Id of device\n * @param names Array of names of the token, if null will return the first token found\n */\nasync function getTokenByName(account: Account, deviceID: string, names?: string[] | string): Promise<string> {\n  if (!(account instanceof Account)) {\n    throw \"Account parameter must be an instance of TagoIO Account.\";\n  }\n\n  const tokens = await account.devices.tokenList(deviceID);\n  if (!tokens || !tokens[0]) {\n    return null;\n  }\n\n  if (!names || !names.length) {\n    return tokens[0]?.token;\n  }\n\n  const namesArray = Array.isArray(names) ? names : [names];\n\n  const token = tokens.find((t) => namesArray.some((n) => t.name.includes(n)));\n\n  if (!token) {\n    throw `Can't find Token for ${deviceID} in ${namesArray.join(\", \")}`;\n  }\n\n  return token.token;\n}\n\nexport default getTokenByName;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}