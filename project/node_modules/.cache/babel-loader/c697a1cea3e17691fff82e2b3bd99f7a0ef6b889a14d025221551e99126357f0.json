{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Dashboard_Widgets_1 = __importDefault(require(\"./Dashboard.Widgets\"));\nvar _Share_1 = __importDefault(require(\"./_Share\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Dashboards = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Dashboards, _TagoIOModule_1$defau);\n  var _super = _createSuper(Dashboards);\n  function Dashboards() {\n    var _this;\n    _classCallCheck(this, Dashboards);\n    _this = _super.apply(this, arguments);\n    _this.share = new _Share_1.default(_objectSpread(_objectSpread({}, _this.params), {}, {\n      type: \"dashboard\"\n    }));\n    _this.widgets = new Dashboard_Widgets_1.default(_this.params);\n    return _this;\n  }\n  /**\r\n   * Retrieves a list with all dashboards from the account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"label,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\n  _createClass(Dashboards, [{\n    key: \"list\",\n    value: function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"label,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_access\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\r\n     * Generates and retrieves a new dashboard from the account\r\n     * @param dashboardObj Object data to create new Dashboard\r\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dashboardObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard\",\n                  method: \"POST\",\n                  body: _objectSpread({}, dashboardObj)\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function create(_x2) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\r\n     * Modify any property of the action\r\n     * @param dashboardID Dashboard identification\r\n     * @param dashboardObj Dashboard Object with data to be replaced\r\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dashboardID, dashboardObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID),\n                  method: \"PUT\",\n                  body: _objectSpread({}, dashboardObj)\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function edit(_x3, _x4) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\r\n     * Deletes an dashboard from the account\r\n     * @param dashboardID Dashboard identification\r\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(dashboardID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\r\n     * Gets information about the dashboard\r\n     * @param dashboardID Dashboard identification\r\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dashboardID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context5.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_access\"]);\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function info(_x6) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\r\n     * Duplicate the dashboard to your own account\r\n     * @param dashboardID Dashboard identification\r\n     * @param dashboardObj Object with data of the duplicate dashboard\r\n     */\n  }, {\n    key: \"duplicate\",\n    value: function () {\n      var _duplicate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dashboardID, dashboardObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/duplicate\"),\n                  method: \"POST\",\n                  body: dashboardObj || {}\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function duplicate(_x7, _x8) {\n        return _duplicate.apply(this, arguments);\n      }\n      return duplicate;\n    }()\n    /**\r\n     * Get share list of the dashboard\r\n     * @param dashboardID Dashboard identification\r\n     */\n  }, {\n    key: \"shareList\",\n    value: function () {\n      var _shareList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(dashboardID) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.share.list(dashboardID));\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function shareList(_x9) {\n        return _shareList.apply(this, arguments);\n      }\n      return shareList;\n    }()\n    /**\r\n     * Share the dashboard with another person\r\n     * @param dashboardID Dashboard identification\r\n     * @param inviteObj Object with target and message\r\n     */\n  }, {\n    key: \"shareSendInvite\",\n    value: function () {\n      var _shareSendInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dashboardID, inviteObj) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.share.invite(dashboardID, inviteObj));\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function shareSendInvite(_x10, _x11) {\n        return _shareSendInvite.apply(this, arguments);\n      }\n      return shareSendInvite;\n    }()\n    /**\r\n     * Change permissions of the bucket\r\n     * @param shareID Share identification\r\n     * @param targetObj Object with target email and new permission\r\n     */\n  }, {\n    key: \"shareEdit\",\n    value: function () {\n      var _shareEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(shareID, targetObj) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.share.edit(shareID, targetObj));\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function shareEdit(_x12, _x13) {\n        return _shareEdit.apply(this, arguments);\n      }\n      return shareEdit;\n    }()\n    /**\r\n     * Remove share of the bucket\r\n     * @param shareID Share identification\r\n     */\n  }, {\n    key: \"shareDelete\",\n    value: function () {\n      var _shareDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(shareID) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.share.remove(shareID));\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function shareDelete(_x14) {\n        return _shareDelete.apply(this, arguments);\n      }\n      return shareDelete;\n    }()\n    /**\r\n     * Generate a new public token for the dashboard\r\n     * @param dashboardID Dashboard identification\r\n     * @param expireTime Time when token will expire\r\n     */\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(dashboardID) {\n        var expireTime,\n          result,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                expireTime = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : \"never\";\n                _context11.next = 3;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/share/public\"),\n                  method: \"GET\",\n                  params: {\n                    expire_time: expireTime\n                  }\n                });\n              case 3:\n                result = _context11.sent;\n                result = (0, dateParser_1.default)(result, [\"expire_time\"]);\n                return _context11.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function getPublicKey(_x15) {\n        return _getPublicKey.apply(this, arguments);\n      }\n      return getPublicKey;\n    }()\n    /**\r\n     * Get list of devices related with dashboard\r\n     * @param dashboardID Dashboard identification\r\n     */\n  }, {\n    key: \"listDevicesRelated\",\n    value: function () {\n      var _listDevicesRelated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(dashboardID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/devices\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function listDevicesRelated(_x16) {\n        return _listDevicesRelated.apply(this, arguments);\n      }\n      return listDevicesRelated;\n    }()\n    /**\r\n     * Get list of analysis related with a dashboard\r\n     * @param dashboardID Dashboard identification\r\n     */\n  }, {\n    key: \"listAnalysisRelated\",\n    value: function () {\n      var _listAnalysisRelated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(dashboardID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/analysis\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context13.sent;\n                return _context13.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function listAnalysisRelated(_x17) {\n        return _listAnalysisRelated.apply(this, arguments);\n      }\n      return listAnalysisRelated;\n    }()\n    /**\r\n     * Runs an analysis located in a widget's header button\r\n     * @param analysisID The id of the analysis to run\r\n     * @param dashboardID The id of the dashboard that contains the widget\r\n     * @param widgetID The id of the widget that contains the header button\r\n     * @param scope Data to send to the analysis\r\n     */\n  }, {\n    key: \"runWidgetHeaderButtonAnalysis\",\n    value: function () {\n      var _runWidgetHeaderButtonAnalysis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(analysisID, dashboardID, widgetID, scope) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/\".concat(analysisID, \"/run/\").concat(dashboardID, \"/\").concat(widgetID),\n                  method: \"POST\",\n                  body: {\n                    scope: scope\n                  }\n                });\n              case 2:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function runWidgetHeaderButtonAnalysis(_x18, _x19, _x20, _x21) {\n        return _runWidgetHeaderButtonAnalysis.apply(this, arguments);\n      }\n      return runWidgetHeaderButtonAnalysis;\n    }()\n  }]);\n  return Dashboards;\n}(TagoIOModule_1.default);\nexports.default = Dashboards;","map":{"version":3,"mappings":"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","names":["Dashboards","_Share_1","params","type","Dashboard_Widgets_1","queryObj","doRequest","path","method","page","fields","filter","amount","orderBy","result","map","data","dashboardObj","body","dashboardID","share","list","inviteObj","invite","shareID","targetObj","edit","remove","expireTime","expire_time","analysisID","widgetID","scope","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dashboards.ts"],"sourcesContent":["import { ExpireTimeOption, GenericID } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport { InviteInfo, InviteResponse } from \"./_share.types\";\r\nimport Widgets from \"./Dashboard.Widgets\";\r\nimport {\r\n  DashboardCreateInfo,\r\n  DashboardInfo,\r\n  DashboardQuery,\r\n  DevicesRelated,\r\n  AnalysisRelated,\r\n  PublicKeyResponse,\r\n} from \"./dashboards.types\";\r\nimport _Share from \"./_Share\";\r\nimport dateParser from \"../Utils/dateParser\";\r\n\r\nclass Dashboards extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieves a list with all dashboards from the account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"label,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\r\n  public async list(queryObj?: DashboardQuery): Promise<DashboardInfo[]> {\r\n    let result = await this.doRequest<DashboardInfo[]>({\r\n      path: \"/dashboard\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"label,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_access\"]));\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * Generates and retrieves a new dashboard from the account\r\n   * @param dashboardObj Object data to create new Dashboard\r\n   */\r\n  public async create(dashboardObj: DashboardCreateInfo): Promise<{ dashboard: GenericID }> {\r\n    const result = await this.doRequest<{ dashboard: GenericID }>({\r\n      path: \"/dashboard\",\r\n      method: \"POST\",\r\n      body: {\r\n        ...dashboardObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of the action\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Dashboard Object with data to be replaced\r\n   */\r\n  public async edit(dashboardID: GenericID, dashboardObj: Partial<DashboardInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"PUT\",\r\n      body: {\r\n        ...dashboardObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes an dashboard from the account\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async delete(dashboardID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Gets information about the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async info(dashboardID: GenericID): Promise<DashboardInfo> {\r\n    let result = await this.doRequest<DashboardInfo>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_access\"]);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Duplicate the dashboard to your own account\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Object with data of the duplicate dashboard\r\n   */\r\n  public async duplicate(\r\n    dashboardID: GenericID,\r\n    dashboardObj?: { setup?: object; new_label?: string }\r\n  ): Promise<{ dashboard_id: string; message: string }> {\r\n    const result = await this.doRequest<{ dashboard_id: string; message: string }>({\r\n      path: `/dashboard/${dashboardID}/duplicate`,\r\n      method: \"POST\",\r\n      body: dashboardObj || {},\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get share list of the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async shareList(dashboardID: GenericID): Promise<InviteInfo[]> {\r\n    return this.share.list(dashboardID);\r\n  }\r\n\r\n  /**\r\n   * Share the dashboard with another person\r\n   * @param dashboardID Dashboard identification\r\n   * @param inviteObj Object with target and message\r\n   */\r\n  public async shareSendInvite(dashboardID: GenericID, inviteObj: InviteInfo): Promise<InviteResponse> {\r\n    return this.share.invite(dashboardID, inviteObj);\r\n  }\r\n\r\n  /**\r\n   * Change permissions of the bucket\r\n   * @param shareID Share identification\r\n   * @param targetObj Object with target email and new permission\r\n   */\r\n  public async shareEdit(shareID: GenericID, targetObj: Partial<InviteInfo>): Promise<string> {\r\n    return this.share.edit(shareID, targetObj);\r\n  }\r\n\r\n  /**\r\n   * Remove share of the bucket\r\n   * @param shareID Share identification\r\n   */\r\n  public async shareDelete(shareID: GenericID): Promise<string> {\r\n    return this.share.remove(shareID);\r\n  }\r\n\r\n  /**\r\n   * Generate a new public token for the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   * @param expireTime Time when token will expire\r\n   */\r\n  public async getPublicKey(\r\n    dashboardID: GenericID,\r\n    expireTime: ExpireTimeOption = \"never\"\r\n  ): Promise<PublicKeyResponse> {\r\n    let result = await this.doRequest<PublicKeyResponse>({\r\n      path: `/dashboard/${dashboardID}/share/public`,\r\n      method: \"GET\",\r\n      params: {\r\n        expire_time: expireTime,\r\n      },\r\n    });\r\n\r\n    result = dateParser(result, [\"expire_time\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get list of devices related with dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async listDevicesRelated(dashboardID: GenericID): Promise<DevicesRelated[]> {\r\n    const result = await this.doRequest<DevicesRelated[]>({\r\n      path: `/dashboard/${dashboardID}/devices`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get list of analysis related with a dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async listAnalysisRelated(dashboardID: GenericID): Promise<AnalysisRelated[]> {\r\n    const result = await this.doRequest<AnalysisRelated[]>({\r\n      path: `/dashboard/${dashboardID}/analysis`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Runs an analysis located in a widget's header button\r\n   * @param analysisID The id of the analysis to run\r\n   * @param dashboardID The id of the dashboard that contains the widget\r\n   * @param widgetID The id of the widget that contains the header button\r\n   * @param scope Data to send to the analysis\r\n   */\r\n  public async runWidgetHeaderButtonAnalysis(\r\n    analysisID: GenericID,\r\n    dashboardID: GenericID,\r\n    widgetID: GenericID,\r\n    scope?: object\r\n  ): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/analysis/${analysisID}/run/${dashboardID}/${widgetID}`,\r\n      method: \"POST\",\r\n      body: {\r\n        scope,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private share = new _Share({ ...this.params, type: \"dashboard\" });\r\n\r\n  public widgets = new Widgets(this.params);\r\n}\r\n\r\nexport default Dashboards;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}