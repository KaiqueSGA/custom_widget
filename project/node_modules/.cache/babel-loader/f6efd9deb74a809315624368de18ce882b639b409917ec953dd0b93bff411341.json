{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var groupBy = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by) === \"date\" ? \"time\" : oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by;\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      downsample: (0, common_1.convertDownsample)(oldDisplay),\n      group_by: groupBy ? groupBy : \"time\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      intervals: oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.intervals && Array.isArray(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.intervals) ? oldDisplay.intervals.map(common_1.convertInterval) : [],\n      line_curve: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.line_curve) || \"smooth\",\n      max_points: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.max_points) || 5000,\n      order_by: oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.order_by ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.order_by : \"time\",\n      show_legend: true,\n      show_point_values: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.enable_labels),\n      stacked: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.stacked) === \"realtime\",\n      theme: {\n        color: {\n          background: null,\n          header: null,\n          label: null,\n          tick: null\n        }\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"multiple_axis_chart\"\n  };\n  if ((oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.realtime) === \"variable\" && (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_by) === \"time\") {\n    var _oldWidget$data$filte, _timeVariable$origin, _timeVariable$variabl;\n    var timeVariable = ((_oldWidget$data$filte = oldWidget.data.filter(function (e) {\n      return e === null || e === void 0 ? void 0 : e.is_global_time_data;\n    })) === null || _oldWidget$data$filte === void 0 ? void 0 : _oldWidget$data$filte[0]) || {};\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"time\",\n      variable: {\n        origin: (timeVariable === null || timeVariable === void 0 ? void 0 : timeVariable.origin) || (timeVariable === null || timeVariable === void 0 ? void 0 : (_timeVariable$origin = timeVariable.origin) === null || _timeVariable$origin === void 0 ? void 0 : _timeVariable$origin.id),\n        variable: (timeVariable === null || timeVariable === void 0 ? void 0 : (_timeVariable$variabl = timeVariable.variables) === null || _timeVariable$variabl === void 0 ? void 0 : _timeVariable$variabl[0]) || \"\"\n      }\n    };\n  } else if ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_by) === \"group\") {\n    var _oldDisplay$plot_vari, _oldDisplay$plot_vari2, _oldDisplay$plot_vari3, _oldDisplay$plot_vari4;\n    newStructure.display.x_axis = {\n      plot_by: \"variable\",\n      type: \"group\",\n      variable: {\n        origin: (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$plot_vari = oldDisplay.plot_variable_group) === null || _oldDisplay$plot_vari === void 0 ? void 0 : (_oldDisplay$plot_vari2 = _oldDisplay$plot_vari.origin) === null || _oldDisplay$plot_vari2 === void 0 ? void 0 : _oldDisplay$plot_vari2.id) || (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$plot_vari3 = oldDisplay.plot_variable_group) === null || _oldDisplay$plot_vari3 === void 0 ? void 0 : _oldDisplay$plot_vari3.origin),\n        variable: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$plot_vari4 = oldDisplay.plot_variable_group) === null || _oldDisplay$plot_vari4 === void 0 ? void 0 : _oldDisplay$plot_vari4.variable\n      }\n    };\n  } else {\n    newStructure.display.x_axis = {\n      plot_by: \"realtime\",\n      type: \"time\"\n    };\n  }\n  if ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.scale) === \"yes\") {\n    newStructure.display.y_axis = {\n      scale: {\n        maximum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.y_max) || \"\",\n        minimum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.y_min) || \"\",\n        type: \"fixed\"\n      }\n    };\n  } else {\n    newStructure.display.y_axis = {\n      scale: {\n        type: \"dynamic\"\n      }\n    };\n  }\n  newStructure.display.y_axis.show_metric_abbreviation = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_abbreviation) || \"\";\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (item.is_hide) {\n          // is_hide items are not visible, so we cannot\n          // put them in the variables array\n          continue;\n        }\n        var _iterator2 = _createForOfIteratorHelper(item === null || item === void 0 ? void 0 : item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$vars_labe, _oldDisplay$vars_form, _oldDisplay$vars_form2, _oldDisplay$variables, _oldDisplay$variables2;\n            var variable = _step2.value;\n            var key = \"\".concat(item.origin).concat(variable);\n            var reverseKey = \"\".concat(variable).concat(item.origin);\n            var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[key];\n            var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[key];\n            var formula = (0, common_1.convertFormula)((_oldDisplay$vars_form2 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[key]);\n            var color = common_1.chartColors.find(function (e) {\n              return !newStructure.display.variables.find(function (v) {\n                return (v === null || v === void 0 ? void 0 : v.color) === e;\n              });\n            }) || \"#999\";\n            var chartType = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$variables = oldDisplay.variables_chart) === null || _oldDisplay$variables === void 0 ? void 0 : _oldDisplay$variables[key]) || (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$variables2 = oldDisplay.variables_chart) === null || _oldDisplay$variables2 === void 0 ? void 0 : _oldDisplay$variables2[reverseKey]);\n            switch (chartType) {\n              case \"spline\":\n                chartType = \"line_chart\";\n                break;\n              case \"bar\":\n                chartType = \"horizontal_bar_chart\";\n                break;\n              case \"column\":\n                chartType = \"vertical_bar_chart\";\n                break;\n              case \"area\":\n                chartType = \"area_chart\";\n                break;\n              default:\n                break;\n            }\n            newStructure.display.variables.push(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n              color: color,\n              origin: item.origin,\n              variable: variable\n            }, alias ? {\n              alias: alias\n            } : {}), numberFormat ? {\n              number_format: numberFormat\n            } : {}), formula ? {\n              formula: formula\n            } : {}), chartType ? {\n              chart_type: chartType\n            } : {}));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4, _widget$display5, _widget$display6;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.numberformat || (widget === null || widget === void 0 ? void 0 : (_widget$display4 = widget.display) === null || _widget$display4 === void 0 ? void 0 : _widget$display4.hide_variables) !== undefined || (widget === null || widget === void 0 ? void 0 : (_widget$display5 = widget.display) === null || _widget$display5 === void 0 ? void 0 : _widget$display5.watermark) !== undefined || widget !== null && widget !== void 0 && (_widget$display6 = widget.display) !== null && _widget$display6 !== void 0 && _widget$display6.pie_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","groupBy","group_by","newStructure","dashboard","downsample","header_buttons","help","intervals","Array","isArray","map","common_1","line_curve","max_points","order_by","show_legend","show_point_values","enable_labels","stacked","theme","color","background","header","label","tick","variables","id","realtime","type","plot_by","timeVariable","data","filter","e","is_global_time_data","x_axis","variable","origin","plot_variable_group","scale","y_axis","maximum","y_max","minimum","y_min","show_metric_abbreviation","show_abbreviation","item","is_hide","key","reverseKey","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","find","v","chartType","variables_chart","push","number_format","chart_type","exports","isOldStructure","widget","isOld","numberformat","hide_variables","undefined","watermark","pie_type"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\multipleaxischart.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old MULTIPLE AXIS CHART to new MULTIPLE AXIS CHART\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport { chartColors, convertDownsample, convertFormula, convertInterval } from \"./common\";\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n  const groupBy = oldDisplay?.group_by === \"date\" ? \"time\" : oldDisplay?.group_by;\r\n\r\n  const newStructure: any = {\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      downsample: convertDownsample(oldDisplay),\r\n      group_by: groupBy ? groupBy : \"time\",\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      intervals:\r\n        oldDisplay?.intervals && Array.isArray(oldDisplay?.intervals) ? oldDisplay.intervals.map(convertInterval) : [],\r\n      line_curve: oldDisplay?.line_curve || \"smooth\",\r\n      max_points: oldDisplay?.max_points || 5000,\r\n      order_by: oldDisplay?.order_by ? oldDisplay?.order_by : \"time\",\r\n      show_legend: true,\r\n      show_point_values: !!oldDisplay?.enable_labels,\r\n      stacked: oldDisplay?.stacked === \"realtime\",\r\n      theme: {\r\n        color: {\r\n          background: null,\r\n          header: null,\r\n          label: null,\r\n          tick: null,\r\n        },\r\n      },\r\n      variables: [],\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"multiple_axis_chart\",\r\n  };\r\n\r\n  if (oldWidget?.realtime === \"variable\" && oldDisplay?.plot_by === \"time\") {\r\n    const timeVariable = oldWidget.data.filter((e: any) => e?.is_global_time_data)?.[0] || {};\r\n    newStructure.display.x_axis = {\r\n      plot_by: \"variable\",\r\n      type: \"time\",\r\n      variable: {\r\n        origin: timeVariable?.origin || timeVariable?.origin?.id,\r\n        variable: timeVariable?.variables?.[0] || \"\",\r\n      },\r\n    };\r\n  } else if (oldDisplay?.plot_by === \"group\") {\r\n    newStructure.display.x_axis = {\r\n      plot_by: \"variable\",\r\n      type: \"group\",\r\n      variable: {\r\n        origin: oldDisplay?.plot_variable_group?.origin?.id || oldDisplay?.plot_variable_group?.origin,\r\n        variable: oldDisplay?.plot_variable_group?.variable,\r\n      },\r\n    };\r\n  } else {\r\n    newStructure.display.x_axis = {\r\n      plot_by: \"realtime\",\r\n      type: \"time\",\r\n    };\r\n  }\r\n\r\n  if (oldDisplay?.scale === \"yes\") {\r\n    newStructure.display.y_axis = {\r\n      scale: {\r\n        maximum: oldDisplay?.y_max || \"\",\r\n        minimum: oldDisplay?.y_min || \"\",\r\n        type: \"fixed\",\r\n      },\r\n    };\r\n  } else {\r\n    newStructure.display.y_axis = {\r\n      scale: {\r\n        type: \"dynamic\",\r\n      },\r\n    };\r\n  }\r\n\r\n  newStructure.display.y_axis.show_metric_abbreviation = oldDisplay?.show_abbreviation || \"\";\r\n\r\n  if (Array.isArray(oldWidget.data)) {\r\n    newStructure.data = oldWidget.data; // transfers the .data property\r\n\r\n    newStructure.display.variables = []; // creates the variable array\r\n\r\n    for (const item of oldWidget.data) {\r\n      if (item.is_hide) {\r\n        // is_hide items are not visible, so we cannot\r\n        // put them in the variables array\r\n        continue;\r\n      }\r\n\r\n      for (const variable of item?.variables) {\r\n        const key = `${item.origin}${variable}`;\r\n        const reverseKey = `${variable}${item.origin}`;\r\n\r\n        const alias = oldDisplay.vars_labels?.[key];\r\n        const numberFormat = oldDisplay.vars_format?.[key];\r\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\r\n        const color =\r\n          chartColors.find((e) => {\r\n            return !newStructure.display.variables.find((v: any) => v?.color === e);\r\n          }) || \"#999\";\r\n\r\n        let chartType = oldDisplay?.variables_chart?.[key] || oldDisplay?.variables_chart?.[reverseKey];\r\n\r\n        switch (chartType) {\r\n          case \"spline\":\r\n            chartType = \"line_chart\";\r\n            break;\r\n          case \"bar\":\r\n            chartType = \"horizontal_bar_chart\";\r\n            break;\r\n          case \"column\":\r\n            chartType = \"vertical_bar_chart\";\r\n            break;\r\n          case \"area\":\r\n            chartType = \"area_chart\";\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        newStructure.display.variables.push({\r\n          color,\r\n          origin: item.origin,\r\n          variable,\r\n          ...(alias ? { alias } : {}),\r\n          ...(numberFormat ? { number_format: numberFormat } : {}),\r\n          ...(formula ? { formula } : {}),\r\n          ...(chartType ? { chart_type: chartType } : {}),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(\r\n    widget?.display?.vars_labels ||\r\n    widget?.display?.vars_format ||\r\n    widget?.display?.numberformat ||\r\n    widget?.display?.hide_variables !== undefined ||\r\n    widget?.display?.watermark !== undefined ||\r\n    widget?.display?.pie_type\r\n  );\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}