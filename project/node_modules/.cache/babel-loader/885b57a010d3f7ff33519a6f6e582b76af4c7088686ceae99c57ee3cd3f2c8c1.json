{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst qs_1 = __importDefault(require(\"qs\"));\nconst apiRequest_1 = __importDefault(require(\"../infrastructure/apiRequest\"));\nconst regions_1 = __importDefault(require(\"../regions\"));\n/**\r\n * Create a Object for Axios\r\n * @internal\r\n * @param uri URI\r\n * @param requestObj doRequestParams\r\n */\nfunction mountAxiosRequest(uri, requestObj) {\n  const axiosObj = {\n    url: `${uri}${requestObj.path}`,\n    method: requestObj.method,\n    data: requestObj.body,\n    params: requestObj.params,\n    maxContentLength: requestObj.maxContentLength,\n    paramsSerializer: p => qs_1.default.stringify(p),\n    headers: {\n      ...requestObj.headers\n    },\n    ...requestObj.overwriteAxiosConfig\n  };\n  return axiosObj;\n}\n/**\r\n * Abstract class to wrap all TagoIO SDK Modules\r\n * @internal\r\n */\nclass TagoIOModule {\n  constructor(params) {\n    this.params = {};\n    this.params = params;\n    this.validateParams();\n  }\n  validateParams() {\n    if (!this.params) {\n      throw new Error(\"Invalid Params\");\n    }\n    if (!this.params.token) {\n      throw new Error(\"Invalid Token\");\n    }\n    // if (this.params.options && typeof this.params.options !== \"object\") {\n    //   throw new Error(\"Invalid Params\");\n    // }\n  }\n\n  async doRequest(requestObj) {\n    const apiURI = (0, regions_1.default)(this.params.region)?.api;\n    if (!apiURI) {\n      throw new Error(\"Invalid region\");\n    }\n    const axiosObj = mountAxiosRequest(apiURI, requestObj);\n    axiosObj.headers = {\n      token: this.params.token,\n      ...axiosObj.headers\n    };\n    const result = await (0, apiRequest_1.default)(axiosObj, requestObj.cacheTTL);\n    return result;\n  }\n  static async doRequestAnonymous(requestObj, region) {\n    const apiURI = (0, regions_1.default)(region)?.api;\n    if (!apiURI) {\n      throw new Error(\"Invalid region\");\n    }\n    const axiosObj = mountAxiosRequest(apiURI, requestObj);\n    const result = await (0, apiRequest_1.default)(axiosObj, requestObj.cacheTTL);\n    return result;\n  }\n}\nexports.default = TagoIOModule;","map":{"version":3,"mappings":";;;;;;;;;;AACA;AACA;AACA;AA6CA;;;;;;AAMA,SAASA,iBAAiB,CAACC,GAAW,EAAEC,UAA2B;EACjE,MAAMC,QAAQ,GAAuB;IACnCC,GAAG,EAAE,GAAGH,GAAG,GAAGC,UAAU,CAACG,IAAI,EAAE;IAC/BC,MAAM,EAAEJ,UAAU,CAACI,MAAM;IACzBC,IAAI,EAAEL,UAAU,CAACM,IAAI;IACrBC,MAAM,EAAEP,UAAU,CAACO,MAAM;IACzBC,gBAAgB,EAAER,UAAU,CAACQ,gBAAgB;IAC7CC,gBAAgB,EAAGC,CAAC,IAAKC,YAAE,CAACC,SAAS,CAACF,CAAC,CAAC;IACxCG,OAAO,EAAE;MACP,GAAGb,UAAU,CAACa;KACf;IACD,GAAGb,UAAU,CAACc;GACf;EAED,OAAOb,QAAQ;AACjB;AAEA;;;;AAIA,MAAec,YAAY;EAGzBC,YAAYT,MAAS;IAFX,WAAM,GAAG,EAAO;IAGxB,IAAI,CAACA,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACU,cAAc,EAAE;EACvB;EAEQA,cAAc;IACpB,IAAI,CAAC,IAAI,CAACV,MAAM,EAAE;MAChB,MAAM,IAAIW,KAAK,CAAC,gBAAgB,CAAC;;IAGnC,IAAI,CAAC,IAAI,CAACX,MAAM,CAACY,KAAK,EAAE;MACtB,MAAM,IAAID,KAAK,CAAC,eAAe,CAAC;;IAGlC;IACA;IACA;EACF;;EAEU,MAAME,SAAS,CAAKpB,UAA2B;IACvD,MAAMqB,MAAM,GAAG,qBAAO,EAAC,IAAI,CAACd,MAAM,CAACe,MAAM,CAAC,EAAEC,GAAG;IAC/C,IAAI,CAACF,MAAM,EAAE;MACX,MAAM,IAAIH,KAAK,CAAC,gBAAgB,CAAC;;IAGnC,MAAMjB,QAAQ,GAAGH,iBAAiB,CAACuB,MAAM,EAAErB,UAAU,CAAC;IACtDC,QAAQ,CAACY,OAAO,GAAG;MACjBM,KAAK,EAAE,IAAI,CAACZ,MAAM,CAACY,KAAK;MACxB,GAAGlB,QAAQ,CAACY;KACb;IAED,MAAMW,MAAM,GAAG,MAAM,wBAAU,EAACvB,QAAQ,EAAED,UAAU,CAACyB,QAAQ,CAAC;IAE9D,OAAOD,MAAqB;EAC9B;EAEU,aAAaE,kBAAkB,CAAK1B,UAA2B,EAAEsB,MAAgB;IACzF,MAAMD,MAAM,GAAG,qBAAO,EAACC,MAAM,CAAC,EAAEC,GAAG;IACnC,IAAI,CAACF,MAAM,EAAE;MACX,MAAM,IAAIH,KAAK,CAAC,gBAAgB,CAAC;;IAGnC,MAAMjB,QAAQ,GAAGH,iBAAiB,CAACuB,MAAM,EAAErB,UAAU,CAAC;IAEtD,MAAMwB,MAAM,GAAG,MAAM,wBAAU,EAACvB,QAAQ,EAAED,UAAU,CAACyB,QAAQ,CAAC;IAE9D,OAAOD,MAAqB;EAC9B;;AAGFG,kBAAeZ,YAAY","names":["mountAxiosRequest","uri","requestObj","axiosObj","url","path","method","data","body","params","maxContentLength","paramsSerializer","p","qs_1","stringify","headers","overwriteAxiosConfig","TagoIOModule","constructor","validateParams","Error","token","doRequest","apiURI","region","api","result","cacheTTL","doRequestAnonymous","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\common\\TagoIOModule.ts"],"sourcesContent":["import { AxiosRequestConfig, Method } from \"axios\";\r\nimport qs from \"qs\";\r\nimport apiRequest from \"../infrastructure/apiRequest\";\r\nimport regions, { Regions } from \"../regions\";\r\nimport { RefType, GenericID } from \"./common.types\";\r\n\r\ninterface GenericModuleParams {\r\n  token?: string;\r\n  region?: Regions;\r\n  // options?: Object;\r\n}\r\n\r\ninterface ShareModuleParams extends GenericModuleParams {\r\n  type: RefType;\r\n}\r\n\r\ninterface TokenModuleParams extends GenericModuleParams {\r\n  path: string;\r\n  id?: GenericID;\r\n}\r\n\r\ninterface ConnectorModuleParams extends GenericModuleParams {\r\n  details?: boolean;\r\n}\r\n\r\ninterface AuthorizationModuleParams extends GenericModuleParams {\r\n  details?: boolean;\r\n}\r\n\r\n/**\r\n * Object for generate request params\r\n * @internal\r\n */\r\ninterface doRequestParams {\r\n  path: string;\r\n  method: Method;\r\n  body?: any;\r\n  params?: any;\r\n  headers?: any;\r\n  overwriteAxiosConfig?: AxiosRequestConfig;\r\n  maxContentLength?: number;\r\n  /**\r\n   * Cache for request\r\n   * default: false (disabled)\r\n   */\r\n  cacheTTL?: number;\r\n}\r\n\r\n/**\r\n * Create a Object for Axios\r\n * @internal\r\n * @param uri URI\r\n * @param requestObj doRequestParams\r\n */\r\nfunction mountAxiosRequest(uri: string, requestObj: doRequestParams): AxiosRequestConfig {\r\n  const axiosObj: AxiosRequestConfig = {\r\n    url: `${uri}${requestObj.path}`,\r\n    method: requestObj.method,\r\n    data: requestObj.body,\r\n    params: requestObj.params,\r\n    maxContentLength: requestObj.maxContentLength,\r\n    paramsSerializer: (p) => qs.stringify(p),\r\n    headers: {\r\n      ...requestObj.headers,\r\n    },\r\n    ...requestObj.overwriteAxiosConfig,\r\n  };\r\n\r\n  return axiosObj;\r\n}\r\n\r\n/**\r\n * Abstract class to wrap all TagoIO SDK Modules\r\n * @internal\r\n */\r\nabstract class TagoIOModule<T extends GenericModuleParams> {\r\n  protected params = {} as T;\r\n\r\n  constructor(params: T) {\r\n    this.params = params;\r\n\r\n    this.validateParams();\r\n  }\r\n\r\n  private validateParams() {\r\n    if (!this.params) {\r\n      throw new Error(\"Invalid Params\");\r\n    }\r\n\r\n    if (!this.params.token) {\r\n      throw new Error(\"Invalid Token\");\r\n    }\r\n\r\n    // if (this.params.options && typeof this.params.options !== \"object\") {\r\n    //   throw new Error(\"Invalid Params\");\r\n    // }\r\n  }\r\n\r\n  protected async doRequest<TR>(requestObj: doRequestParams): Promise<TR> {\r\n    const apiURI = regions(this.params.region)?.api;\r\n    if (!apiURI) {\r\n      throw new Error(\"Invalid region\");\r\n    }\r\n\r\n    const axiosObj = mountAxiosRequest(apiURI, requestObj);\r\n    axiosObj.headers = {\r\n      token: this.params.token,\r\n      ...axiosObj.headers,\r\n    };\r\n\r\n    const result = await apiRequest(axiosObj, requestObj.cacheTTL);\r\n\r\n    return result as Promise<TR>;\r\n  }\r\n\r\n  protected static async doRequestAnonymous<TR>(requestObj: doRequestParams, region?: Regions): Promise<TR> {\r\n    const apiURI = regions(region)?.api;\r\n    if (!apiURI) {\r\n      throw new Error(\"Invalid region\");\r\n    }\r\n\r\n    const axiosObj = mountAxiosRequest(apiURI, requestObj);\r\n\r\n    const result = await apiRequest(axiosObj, requestObj.cacheTTL);\r\n\r\n    return result as Promise<TR>;\r\n  }\r\n}\r\n\r\nexport default TagoIOModule;\r\nexport {\r\n  GenericModuleParams,\r\n  ShareModuleParams,\r\n  doRequestParams,\r\n  TokenModuleParams,\r\n  ConnectorModuleParams,\r\n  AuthorizationModuleParams,\r\n};\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}