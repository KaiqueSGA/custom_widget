{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Account_1 = __importDefault(require(\"../Account/Account\"));\n/**\r\n *\r\n * @param account Account instance\r\n * @param deviceID Id of device\r\n * @param names Array of names of the token, if null will return the first token found\r\n */\nasync function getTokenByName(account, deviceID, names) {\n  if (!(account instanceof Account_1.default)) {\n    throw \"Account parameter must be an instance of TagoIO Account.\";\n  }\n  const tokens = await account.devices.tokenList(deviceID);\n  if (!tokens || !tokens[0]) {\n    return null;\n  }\n  if (!names || !names.length) {\n    return tokens[0]?.token;\n  }\n  const namesArray = Array.isArray(names) ? names : [names];\n  const token = tokens.find(t => namesArray.some(n => t.name.includes(n)));\n  if (!token) {\n    throw `Can't find Token for ${deviceID} in ${namesArray.join(\", \")}`;\n  }\n  return token.token;\n}\nexports.default = getTokenByName;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAEA;;;;;;AAMA,eAAeA,cAAc,CAACC,OAAgB,EAAEC,QAAgB,EAAEC,KAAyB;EACzF,IAAI,EAAEF,OAAO,YAAYG,iBAAO,CAAC,EAAE;IACjC,MAAM,0DAA0D;;EAGlE,MAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACK,OAAO,CAACC,SAAS,CAACL,QAAQ,CAAC;EACxD,IAAI,CAACG,MAAM,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,EAAE;IACzB,OAAO,IAAI;;EAGb,IAAI,CAACF,KAAK,IAAI,CAACA,KAAK,CAACK,MAAM,EAAE;IAC3B,OAAOH,MAAM,CAAC,CAAC,CAAC,EAAEI,KAAK;;EAGzB,MAAMC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;EAEzD,MAAMM,KAAK,GAAGJ,MAAM,CAACQ,IAAI,CAAEC,CAAC,IAAKJ,UAAU,CAACK,IAAI,CAAEC,CAAC,IAAKF,CAAC,CAACG,IAAI,CAACC,QAAQ,CAACF,CAAC,CAAC,CAAC,CAAC;EAE5E,IAAI,CAACP,KAAK,EAAE;IACV,MAAM,wBAAwBP,QAAQ,OAAOQ,UAAU,CAACS,IAAI,CAAC,IAAI,CAAC,EAAE;;EAGtE,OAAOV,KAAK,CAACA,KAAK;AACpB;AAEAW,kBAAepB,cAAc","names":["getTokenByName","account","deviceID","names","Account_1","tokens","devices","tokenList","length","token","namesArray","Array","isArray","find","t","some","n","name","includes","join","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\getTokenByName.ts"],"sourcesContent":["import Account from \"../Account/Account\";\r\n\r\n/**\r\n *\r\n * @param account Account instance\r\n * @param deviceID Id of device\r\n * @param names Array of names of the token, if null will return the first token found\r\n */\r\nasync function getTokenByName(account: Account, deviceID: string, names?: string[] | string): Promise<string> {\r\n  if (!(account instanceof Account)) {\r\n    throw \"Account parameter must be an instance of TagoIO Account.\";\r\n  }\r\n\r\n  const tokens = await account.devices.tokenList(deviceID);\r\n  if (!tokens || !tokens[0]) {\r\n    return null;\r\n  }\r\n\r\n  if (!names || !names.length) {\r\n    return tokens[0]?.token;\r\n  }\r\n\r\n  const namesArray = Array.isArray(names) ? names : [names];\r\n\r\n  const token = tokens.find((t) => namesArray.some((n) => t.name.includes(n)));\r\n\r\n  if (!token) {\r\n    throw `Can't find Token for ${deviceID} in ${namesArray.join(\", \")}`;\r\n  }\r\n\r\n  return token.token;\r\n}\r\n\r\nexport default getTokenByName;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}