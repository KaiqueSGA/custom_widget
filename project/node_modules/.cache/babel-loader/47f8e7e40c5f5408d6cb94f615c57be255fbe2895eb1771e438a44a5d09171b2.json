{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Devices extends TagoIOModule_1.default {\n  /**\r\n   * Retrieves a list with all devices from the account\r\n   * @default\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   *   resolveBucketName: false\r\n   * }\r\n   * @param queryObj Search query params\r\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]));\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new action from the Device\r\n   * @param deviceObj Object data to create new device\r\n   */\n  async create(deviceObj) {\n    const result = await this.doRequest({\n      path: \"/device\",\n      method: \"POST\",\n      body: deviceObj\n    });\n    return result;\n  }\n  /**\r\n   * Modify any property of the device\r\n   * @param deviceID Device ID\r\n   * @param deviceObj Device object with fields to replace\r\n   */\n  async edit(deviceID, deviceObj) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}`,\n      method: \"PUT\",\n      body: deviceObj\n    });\n    return result;\n  }\n  /**\r\n   * Deletes an device from the account\r\n   * @param deviceID Device ID\r\n   */\n  async delete(deviceID) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Get Info of the Device\r\n   * @param deviceID Device ID\r\n   */\n  async info(deviceID) {\n    let result = await this.doRequest({\n      path: `/device/${deviceID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\", \"last_retention\"]);\n    return result;\n  }\n  /**\r\n   * Create or edit param for the Device\r\n   * @param deviceID Device ID\r\n   * @param configObj Configuration Data\r\n   * @param paramID Parameter ID\r\n   */\n  async paramSet(deviceID, configObj, paramID) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}/params`,\n      method: \"POST\",\n      body: paramID ? {\n        id: paramID,\n        ...configObj\n      } : configObj\n    });\n    return result;\n  }\n  /**\r\n   * List Params for the Device\r\n   * @param deviceID Device ID\r\n   * @param sentStatus True return only sent=true, False return only sent=false\r\n   */\n  async paramList(deviceID, sentStatus) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}/params`,\n      method: \"GET\",\n      params: {\n        sent_status: sentStatus\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Remove param for the Device\r\n   * @param deviceID Device ID\r\n   * @param paramID Parameter ID\r\n   */\n  async paramRemove(deviceID, paramID) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}/params/${paramID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Retrieves a list of all tokens\r\n   * @default\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"name\", \"token\", \"permission\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"created_at,desc\",\r\n   * }\r\n   * @param deviceID Device ID\r\n   * @param queryObj Search query params\r\n   */\n  async tokenList(deviceID, queryObj) {\n    let result = await this.doRequest({\n      path: `/device/token/${deviceID}`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"last_authorization\", \"expire_time\"]));\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new token\r\n   * @param deviceID Device ID\r\n   * @param tokenParams Params for new token\r\n   */\n  async tokenCreate(deviceID, tokenParams) {\n    let result = await this.doRequest({\n      path: `/device/token`,\n      method: \"POST\",\n      body: {\n        device: deviceID,\n        ...tokenParams\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n    return result;\n  }\n  /**\r\n   * Delete a token\r\n   * @param token Token\r\n   */\n  async tokenDelete(token) {\n    const result = await this.doRequest({\n      path: `/device/token/${token}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Get data from all variables in the device.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param queryParams Query parameters to filter the results.\r\n   *\r\n   * @returns Array with the data values stored in the device.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const lastTenValues = await myDevice.getVariablesData(\"myDeviceId\", { qty: 10 });\r\n   * ```\r\n   */\n  async getDeviceData(deviceId, queryParams) {\n    const result = await this.doRequest({\n      path: `/device/${deviceId}/data`,\n      method: \"GET\",\n      params: queryParams\n    });\n    return result.map(item => (0, dateParser_1.default)(item, [\"time\", \"created_at\"]));\n  }\n  /**\r\n   * Empty all data in a device.\r\n   *\r\n   * @param deviceId Device ID.\r\n   *\r\n   * @returns Success message.\r\n   */\n  async emptyDeviceData(deviceId) {\n    const result = await this.doRequest({\n      path: `/device/${deviceId}/empty`,\n      method: \"POST\"\n    });\n    return result;\n  }\n  /**\r\n   * Edit data records in a device using the profile token and device ID.\r\n   *\r\n   * The `updatedData` can be a single data record or an array of records to be updated,\r\n   * each of the records must have the `id` of the record and the fields to be updated.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param updatedData A single or an array of updated data records.\r\n   *\r\n   * @returns Success message indicating amount of records updated (can be 0).\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * await myDevice.editDeviceData(\"myDeviceId\", { id: \"idOfTheRecord\", value: \"new value\", unit: \"new unit\" });\r\n   * ```\r\n   */\n  async editDeviceData(deviceId, updatedData) {\n    const result = await this.doRequest({\n      path: `/device/${deviceId}/data`,\n      method: \"PUT\",\n      body: updatedData\n    });\n    return result;\n  }\n  /**\r\n   * Delete data records in a device using the profile token and device ID.\r\n   *\r\n   * See the example to understand how to use this method properly to have full control on what to delete.\r\n   *\r\n   * ! If query parameters are empty, all data for the device will be deleted.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param queryParams Parameters to specify what should be deleted on the device's data.\r\n   *\r\n   * @returns Success message indicating amount of records deleted (can be 0).\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * await myDevice.deleteDeviceData(\"myDeviceId\", { ids: [\"recordIdToDelete\", \"anotherRecordIdToDelete\" ] });\r\n   * ```\r\n   */\n  async deleteDeviceData(deviceId, queryParams) {\n    const result = await this.doRequest({\n      path: `/device/${deviceId}/data`,\n      method: \"DELETE\",\n      params: queryParams\n    });\n    return result;\n  }\n  /**\r\n   * Get Info of the Device Chunks.\r\n   * @experimental\r\n   * @param deviceID Device ID\r\n   */\n  async getChunk(deviceID) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}/chunk`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\r\n   * Delete the chunk data.\r\n   * @experimental\r\n   * @param deviceID Device ID\r\n   * @param chunkID Chunk ID\r\n   */\n  async deleteChunk(deviceID, chunkID) {\n    const result = await this.doRequest({\n      path: `/device/${deviceID}/chunk/${chunkID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Schedule to export the Device Chunk's data to the TagoIO's files.\r\n   * @experimental\r\n   */\n  async copyChunk(params) {\n    const body = {\n      chunk_id: params?.chunkID,\n      headers: params?.headers,\n      file_address: params?.file_address\n    };\n    const result = await this.doRequest({\n      path: `/device/${params?.deviceID}/chunk/copy`,\n      method: \"POST\",\n      body\n    });\n    return result;\n  }\n}\nexports.default = Devices;","map":{"version":3,"mappings":"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","names":["Devices","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","resolveBucketName","map","data","create","deviceObj","body","edit","deviceID","delete","info","paramSet","configObj","paramID","id","paramList","sentStatus","sent_status","paramRemove","tokenList","tokenCreate","tokenParams","device","tokenDelete","token","getDeviceData","deviceId","queryParams","item","emptyDeviceData","editDeviceData","updatedData","deleteDeviceData","getChunk","deleteChunk","chunkID","copyChunk","chunk_id","headers","file_address","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Devices.ts"],"sourcesContent":["import type {\r\n  Data,\r\n  DataEdit,\r\n  GenericID,\r\n  GenericToken,\r\n  TokenCreateResponse,\r\n  TokenData,\r\n} from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport type { DataQuery } from \"../Device/device.types\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport type {\r\n  ConfigurationParams,\r\n  DeviceCreateInfo,\r\n  DeviceCreateResponse,\r\n  DeviceInfo,\r\n  DeviceQuery,\r\n  DeviceListItem,\r\n  DeviceTokenDataList,\r\n  ListDeviceTokenQuery,\r\n  DeviceEditInfo,\r\n  DeviceChunkData,\r\n  DeviceChunkParams,\r\n  DeviceChunkCopyResponse,\r\n} from \"./devices.types\";\r\n\r\nclass Devices extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieves a list with all devices from the account\r\n   * @default\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   *   resolveBucketName: false\r\n   * }\r\n   * @param queryObj Search query params\r\n   */\r\n  public async list(queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\r\n    let result = await this.doRequest<DeviceListItem[]>({\r\n      path: \"/device\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\r\n        resolveBucketName: queryObj?.resolveBucketName || false,\r\n      },\r\n    });\r\n\r\n    result = result.map((data) =>\r\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new action from the Device\r\n   * @param deviceObj Object data to create new device\r\n   */\r\n  public async create(deviceObj: DeviceCreateInfo): Promise<DeviceCreateResponse> {\r\n    const result = await this.doRequest<DeviceCreateResponse>({\r\n      path: \"/device\",\r\n      method: \"POST\",\r\n      body: deviceObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of the device\r\n   * @param deviceID Device ID\r\n   * @param deviceObj Device object with fields to replace\r\n   */\r\n  public async edit(deviceID: GenericID, deviceObj: DeviceEditInfo): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceID}`,\r\n      method: \"PUT\",\r\n      body: deviceObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes an device from the account\r\n   * @param deviceID Device ID\r\n   */\r\n  public async delete(deviceID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Info of the Device\r\n   * @param deviceID Device ID\r\n   */\r\n  public async info(deviceID: GenericID): Promise<DeviceInfo> {\r\n    let result = await this.doRequest<DeviceInfo>({\r\n      path: `/device/${deviceID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\r\n      \"last_input\",\r\n      \"last_output\",\r\n      \"updated_at\",\r\n      \"created_at\",\r\n      \"inspected_at\",\r\n      \"last_retention\",\r\n    ]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create or edit param for the Device\r\n   * @param deviceID Device ID\r\n   * @param configObj Configuration Data\r\n   * @param paramID Parameter ID\r\n   */\r\n  public async paramSet(\r\n    deviceID: GenericID,\r\n    configObj: Partial<ConfigurationParams>,\r\n    paramID?: GenericID\r\n  ): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceID}/params`,\r\n      method: \"POST\",\r\n      body: paramID\r\n        ? {\r\n            id: paramID,\r\n            ...configObj,\r\n          }\r\n        : configObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * List Params for the Device\r\n   * @param deviceID Device ID\r\n   * @param sentStatus True return only sent=true, False return only sent=false\r\n   */\r\n  public async paramList(deviceID: GenericID, sentStatus?: Boolean): Promise<ConfigurationParams[]> {\r\n    const result = await this.doRequest<ConfigurationParams[]>({\r\n      path: `/device/${deviceID}/params`,\r\n      method: \"GET\",\r\n      params: { sent_status: sentStatus },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove param for the Device\r\n   * @param deviceID Device ID\r\n   * @param paramID Parameter ID\r\n   */\r\n  public async paramRemove(deviceID: GenericID, paramID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceID}/params/${paramID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of all tokens\r\n   * @default\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"name\", \"token\", \"permission\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"created_at,desc\",\r\n   * }\r\n   * @param deviceID Device ID\r\n   * @param queryObj Search query params\r\n   */\r\n\r\n  public async tokenList(\r\n    deviceID: GenericID,\r\n    queryObj?: ListDeviceTokenQuery\r\n  ): Promise<Partial<DeviceTokenDataList>[]> {\r\n    let result = await this.doRequest<Partial<DeviceTokenDataList>[]>({\r\n      path: `/device/token/${deviceID}`,\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"last_authorization\", \"expire_time\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new token\r\n   * @param deviceID Device ID\r\n   * @param tokenParams Params for new token\r\n   */\r\n  public async tokenCreate(deviceID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\r\n    let result = await this.doRequest<TokenCreateResponse>({\r\n      path: `/device/token`,\r\n      method: \"POST\",\r\n      body: { device: deviceID, ...tokenParams },\r\n    });\r\n\r\n    result = dateParser(result, [\"expire_date\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a token\r\n   * @param token Token\r\n   */\r\n  public async tokenDelete(token: GenericToken): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/token/${token}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get data from all variables in the device.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param queryParams Query parameters to filter the results.\r\n   *\r\n   * @returns Array with the data values stored in the device.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * const lastTenValues = await myDevice.getVariablesData(\"myDeviceId\", { qty: 10 });\r\n   * ```\r\n   */\r\n  public async getDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<Data[]> {\r\n    const result = await this.doRequest<Data[]>({\r\n      path: `/device/${deviceId}/data`,\r\n      method: \"GET\",\r\n      params: queryParams,\r\n    });\r\n\r\n    return result.map((item) => dateParser(item, [\"time\", \"created_at\"]));\r\n  }\r\n\r\n  /**\r\n   * Empty all data in a device.\r\n   *\r\n   * @param deviceId Device ID.\r\n   *\r\n   * @returns Success message.\r\n   */\r\n  public async emptyDeviceData(deviceId: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceId}/empty`,\r\n      method: \"POST\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Edit data records in a device using the profile token and device ID.\r\n   *\r\n   * The `updatedData` can be a single data record or an array of records to be updated,\r\n   * each of the records must have the `id` of the record and the fields to be updated.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param updatedData A single or an array of updated data records.\r\n   *\r\n   * @returns Success message indicating amount of records updated (can be 0).\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * await myDevice.editDeviceData(\"myDeviceId\", { id: \"idOfTheRecord\", value: \"new value\", unit: \"new unit\" });\r\n   * ```\r\n   */\r\n  public async editDeviceData(deviceId: GenericID, updatedData: DataEdit | DataEdit[]): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceId}/data`,\r\n      method: \"PUT\",\r\n      body: updatedData,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete data records in a device using the profile token and device ID.\r\n   *\r\n   * See the example to understand how to use this method properly to have full control on what to delete.\r\n   *\r\n   * ! If query parameters are empty, all data for the device will be deleted.\r\n   *\r\n   * @param deviceId Device ID.\r\n   * @param queryParams Parameters to specify what should be deleted on the device's data.\r\n   *\r\n   * @returns Success message indicating amount of records deleted (can be 0).\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const myDevice = new Device({ token: \"my_device_token\" });\r\n   *\r\n   * await myDevice.deleteDeviceData(\"myDeviceId\", { ids: [\"recordIdToDelete\", \"anotherRecordIdToDelete\" ] });\r\n   * ```\r\n   */\r\n  public async deleteDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceId}/data`,\r\n      method: \"DELETE\",\r\n      params: queryParams,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Info of the Device Chunks.\r\n   * @experimental\r\n   * @param deviceID Device ID\r\n   */\r\n  public async getChunk(deviceID: GenericID): Promise<DeviceChunkData[]> {\r\n    const result = await this.doRequest<DeviceChunkData[]>({\r\n      path: `/device/${deviceID}/chunk`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete the chunk data.\r\n   * @experimental\r\n   * @param deviceID Device ID\r\n   * @param chunkID Chunk ID\r\n   */\r\n  public async deleteChunk(deviceID: GenericID, chunkID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/device/${deviceID}/chunk/${chunkID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Schedule to export the Device Chunk's data to the TagoIO's files.\r\n   * @experimental\r\n   */\r\n  public async copyChunk(params: DeviceChunkParams): Promise<DeviceChunkCopyResponse> {\r\n    const body = {\r\n      chunk_id: params?.chunkID,\r\n      headers: params?.headers,\r\n      file_address: params?.file_address,\r\n    };\r\n\r\n    const result = await this.doRequest<DeviceChunkCopyResponse>({\r\n      path: `/device/${params?.deviceID}/chunk/copy`,\r\n      method: \"POST\",\r\n      body,\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Devices;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}