{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst lodash_1 = require(\"lodash\");\nconst sleep_1 = __importDefault(require(\"../../common/sleep\"));\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Device extends TagoIOModule_1.default {\n  /**\n   * Get information about the current device\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.info();\n   * ```\n   */\n  async info() {\n    let result = await this.doRequest({\n      path: \"/info\",\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_input\", \"last_output\"]);\n    return result;\n  }\n  /**\n   * Send data to device\n   * @param data An array or one object with data to be send to TagoIO using device token\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.sendData({\n   *   variable: \"temperature\",\n   *   unit: \"F\",\n   *   value: 55,\n   *   time: \"2015-11-03 13:44:33\",\n   *   location: { lat: 42.2974279, lng: -85.628292 },\n   * });\n   * ```\n   */\n  async sendData(data) {\n    data = Array.isArray(data) ? data : [data];\n    const result = await this.doRequest({\n      path: \"/data\",\n      method: \"POST\",\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Get data from TagoIO Device.\n   * @param queryParams Object with query params\n   * @returns An array of TagoIO registers\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.getData({\n   *   query: \"last_item\",\n   *   variable: \"humidity\",\n   * });\n   * ```\n   */\n  async getData(queryParams) {\n    if (queryParams?.query === \"default\") {\n      delete queryParams.query;\n    }\n    let result = await this.doRequest({\n      path: \"/data\",\n      method: \"GET\",\n      params: queryParams\n    });\n    if (typeof result === \"number\") {\n      result = [{\n        id: \"none\",\n        origin: \"?\",\n        time: new Date(),\n        value: result,\n        variable: \"?\"\n      }];\n    }\n    return result.map(item => (0, dateParser_1.default)(item, [\"time\", \"created_at\"]));\n  }\n  /**\n   * Edit data in a Mutable-type device.\n   *\n   * @param data Array or object with the data to be edited, each object with the data's ID.\n   *\n   * @example\n   * ```ts\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.editData({\n   *   id: \"id_of_the_data_item\",\n   *   value: 123,\n   *   time: \"2022-04-01 12:34:56\",\n   *   location: { lat: 42.2974279, lng: -85.628292 },\n   * });\n   * ```\n   *\n   * @returns Success message with the amount of data items updated.\n   */\n  async editData(data) {\n    data = Array.isArray(data) ? data : [data];\n    const result = await this.doRequest({\n      path: \"/data\",\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Delete data from device\n   * @param queryParams\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.deleteData({\n   *   query: \"last_item\",\n   *   variable: \"humidity\",\n   *   value: 10\n   * });\n   * ```\n   */\n  async deleteData(queryParams) {\n    if (!queryParams) {\n      queryParams = {\n        query: \"last_item\"\n      };\n    }\n    if (queryParams?.query === \"default\") {\n      delete queryParams.query;\n    }\n    const result = await this.doRequest({\n      path: \"/data\",\n      method: \"DELETE\",\n      params: queryParams\n    });\n    return result;\n  }\n  /**\n   * Get parameters from device\n   * @param onlyUnRead set true to get only unread parameters\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.getParameters();\n   * ```\n   */\n  async getParameters(status) {\n    const params = {};\n    if (status === \"onlyRead\") {\n      params.sent_status = true;\n    } else if (status === \"onlyUnRead\") {\n      params.sent_status = false;\n    }\n    // ? Support for old call (onlyUnRead?: boolean)\n    // @ts-expect-error\n    if (status === true) {\n      params.sent_status = false;\n    }\n    const result = await this.doRequest({\n      path: \"/device/params\",\n      method: \"GET\",\n      params: params\n    });\n    return result;\n  }\n  /**\n   * Mark parameter as read\n   * @param parameterID Parameter identification\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.setParameterAsRead(\"parameter_id\");\n   * ```\n   *\n   */\n  async setParameterAsRead(parameterID) {\n    const result = await this.doRequest({\n      path: `/device/params/${parameterID}`,\n      method: \"PUT\",\n      body: {\n        sent: true\n      }\n    });\n    return result;\n  }\n  /**\n   * Get Data Streaming\n   *\n   * @experimental\n   * @param params Data Query\n   * @param options Stream options\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * for await (const items of myDevice.getDataStreaming()) {\n   *  console.log(items);\n   * }\n   * ```\n   */\n  async *getDataStreaming(params, options) {\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\n    const neverStop = options?.neverStop || false;\n    if (poolingRecordQty > 10000) {\n      throw new Error(\"The maximum of poolingRecordQty is 10000\");\n    }\n    const qty = Math.ceil(poolingRecordQty);\n    let skip = 0;\n    let stop = false;\n    while (!stop) {\n      await (0, sleep_1.default)(poolingTime);\n      yield (async () => {\n        const data = await this.getData({\n          ...params,\n          qty,\n          skip,\n          query: \"default\",\n          ordination: \"ascending\"\n        });\n        skip += data.length;\n        if (!neverStop) {\n          stop = data.length === 0 || data.length < poolingRecordQty;\n        }\n        return data;\n      })();\n    }\n  }\n  /**\n   * Stream data to device\n   *\n   * @experimental\n   * @param data An array or one object with data to be send to TagoIO using device token\n   * @param options Stream options\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const data = [\n   *     {\n   *       variable: \"temperature\",\n   *       unit: \"F\",\n   *       value: 55,\n   *       time: \"2015-11-03 13:44:33\",\n   *       location: { lat: 42.2974279, lng: -85.628292 },\n   *     },\n   *     {\n   *       variable: \"temperature\",\n   *       unit: \"F\",\n   *       value: 53,\n   *       time: \"2015-11-03 13:44:33\",\n   *       location: { lat: 43.2974279, lng: -86.628292 },\n   *     },\n   *     // ...\n   *   ];\n   *\n   *   const result = await myDevice.sendDataStreaming(data, {\n   *     poolingRecordQty: 1000,\n   *     poolingTime: 1000,\n   *   });\n   * ```\n   */\n  async sendDataStreaming(data, options) {\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\n    if (!Array.isArray(data)) {\n      return Promise.reject(\"Only data array is allowed\");\n    }\n    const dataChunk = (0, lodash_1.chunk)(data, poolingRecordQty);\n    for (const items of dataChunk) {\n      await this.sendData(items);\n      await (0, sleep_1.default)(poolingTime);\n    }\n    return `${data.length} Data added.`;\n  }\n}\nexports.default = Device;","map":{"version":3,"mappings":"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","names":["Device","TagoIOModule_1","info","result","doRequest","path","method","sendData","data","Array","isArray","body","getData","queryParams","query","params","id","origin","time","Date","value","variable","map","item","editData","deleteData","getParameters","status","sent_status","setParameterAsRead","parameterID","sent","getDataStreaming","options","poolingRecordQty","poolingTime","neverStop","Error","qty","Math","ceil","skip","stop","ordination","length","sendDataStreaming","Promise","reject","dataChunk","items","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Device\\Device.ts"],"sourcesContent":["import { chunk } from \"lodash\";\nimport { Data, DataCreate, DataEdit, GenericID } from \"../../common/common.types\";\nimport sleep from \"../../common/sleep\";\nimport TagoIOModule from \"../../common/TagoIOModule\";\nimport { ConfigurationParams } from \"../Account/devices.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport { DataQuery, DataQueryStreaming, DeviceConstructorParams, DeviceInfo, OptionsStreaming } from \"./device.types\";\n\nclass Device extends TagoIOModule<DeviceConstructorParams> {\n  /**\n   * Get information about the current device\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.info();\n   * ```\n   */\n  public async info(): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: \"/info\",\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_input\", \"last_output\"]);\n    return result;\n  }\n\n  /**\n   * Send data to device\n   * @param data An array or one object with data to be send to TagoIO using device token\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.sendData({\n   *   variable: \"temperature\",\n   *   unit: \"F\",\n   *   value: 55,\n   *   time: \"2015-11-03 13:44:33\",\n   *   location: { lat: 42.2974279, lng: -85.628292 },\n   * });\n   * ```\n   */\n  public async sendData(data: DataCreate | DataCreate[]): Promise<string> {\n    data = Array.isArray(data) ? data : [data];\n\n    const result = await this.doRequest<string>({\n      path: \"/data\",\n      method: \"POST\",\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Get data from TagoIO Device.\n   * @param queryParams Object with query params\n   * @returns An array of TagoIO registers\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.getData({\n   *   query: \"last_item\",\n   *   variable: \"humidity\",\n   * });\n   * ```\n   */\n  public async getData(queryParams?: DataQuery): Promise<Data[]> {\n    if (queryParams?.query === \"default\") {\n      delete queryParams.query;\n    }\n\n    let result = await this.doRequest<Data[] | number>({\n      path: \"/data\",\n      method: \"GET\",\n      params: queryParams,\n    });\n\n    if (typeof result === \"number\") {\n      result = [\n        {\n          id: \"none\",\n          origin: \"?\",\n          time: new Date(),\n          value: result,\n          variable: \"?\",\n        },\n      ] as Data[];\n    }\n\n    return result.map((item) => dateParser(item, [\"time\", \"created_at\"]));\n  }\n\n  /**\n   * Edit data in a Mutable-type device.\n   *\n   * @param data Array or object with the data to be edited, each object with the data's ID.\n   *\n   * @example\n   * ```ts\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.editData({\n   *   id: \"id_of_the_data_item\",\n   *   value: 123,\n   *   time: \"2022-04-01 12:34:56\",\n   *   location: { lat: 42.2974279, lng: -85.628292 },\n   * });\n   * ```\n   *\n   * @returns Success message with the amount of data items updated.\n   */\n  public async editData(data: DataEdit | DataEdit[]): Promise<string> {\n    data = Array.isArray(data) ? data : [data];\n\n    const result = await this.doRequest<string>({\n      path: \"/data\",\n      method: \"PUT\",\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete data from device\n   * @param queryParams\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.deleteData({\n   *   query: \"last_item\",\n   *   variable: \"humidity\",\n   *   value: 10\n   * });\n   * ```\n   */\n  public async deleteData(queryParams?: DataQuery): Promise<string> {\n    if (!queryParams) {\n      queryParams = { query: \"last_item\" };\n    }\n\n    if (queryParams?.query === \"default\") {\n      delete queryParams.query;\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/data\",\n      method: \"DELETE\",\n      params: queryParams,\n    });\n\n    return result;\n  }\n\n  /**\n   * Get parameters from device\n   * @param onlyUnRead set true to get only unread parameters\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.getParameters();\n   * ```\n   */\n  public async getParameters(status: \"all\" | \"onlyUnRead\" | \"onlyRead\"): Promise<ConfigurationParams[]> {\n    const params: { sent_status?: boolean } = {};\n\n    if (status === \"onlyRead\") {\n      params.sent_status = true;\n    } else if (status === \"onlyUnRead\") {\n      params.sent_status = false;\n    }\n\n    // ? Support for old call (onlyUnRead?: boolean)\n    // @ts-expect-error\n    if (status === true) {\n      params.sent_status = false;\n    }\n\n    const result = await this.doRequest<ConfigurationParams[]>({\n      path: \"/device/params\",\n      method: \"GET\",\n      params: params,\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark parameter as read\n   * @param parameterID Parameter identification\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const result = await myDevice.setParameterAsRead(\"parameter_id\");\n   * ```\n   *\n   */\n  public async setParameterAsRead(parameterID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/device/params/${parameterID}`,\n      method: \"PUT\",\n      body: { sent: true },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Data Streaming\n   *\n   * @experimental\n   * @param params Data Query\n   * @param options Stream options\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * for await (const items of myDevice.getDataStreaming()) {\n   *  console.log(items);\n   * }\n   * ```\n   */\n  public async *getDataStreaming(params?: DataQueryStreaming, options?: OptionsStreaming) {\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\n    const neverStop = options?.neverStop || false;\n\n    if (poolingRecordQty > 10000) {\n      throw new Error(\"The maximum of poolingRecordQty is 10000\");\n    }\n\n    const qty: number = Math.ceil(poolingRecordQty);\n    let skip: number = 0;\n    let stop: boolean = false;\n\n    while (!stop) {\n      await sleep(poolingTime);\n\n      yield (async () => {\n        const data = await this.getData({ ...params, qty, skip, query: \"default\", ordination: \"ascending\" });\n        skip += data.length;\n\n        if (!neverStop) {\n          stop = data.length === 0 || data.length < poolingRecordQty;\n        }\n\n        return data;\n      })();\n    }\n  }\n\n  /**\n   * Stream data to device\n   *\n   * @experimental\n   * @param data An array or one object with data to be send to TagoIO using device token\n   * @param options Stream options\n   * @example\n   * ```js\n   * const myDevice = new Device({ token: \"my_device_token\" });\n   *\n   * const data = [\n   *     {\n   *       variable: \"temperature\",\n   *       unit: \"F\",\n   *       value: 55,\n   *       time: \"2015-11-03 13:44:33\",\n   *       location: { lat: 42.2974279, lng: -85.628292 },\n   *     },\n   *     {\n   *       variable: \"temperature\",\n   *       unit: \"F\",\n   *       value: 53,\n   *       time: \"2015-11-03 13:44:33\",\n   *       location: { lat: 43.2974279, lng: -86.628292 },\n   *     },\n   *     // ...\n   *   ];\n   *\n   *   const result = await myDevice.sendDataStreaming(data, {\n   *     poolingRecordQty: 1000,\n   *     poolingTime: 1000,\n   *   });\n   * ```\n   */\n  public async sendDataStreaming(data: DataCreate[], options: Omit<OptionsStreaming, \"neverStop\">) {\n    const poolingRecordQty = options?.poolingRecordQty || 1000;\n    const poolingTime = options?.poolingTime || 1000; // 1 seg\n\n    if (!Array.isArray(data)) {\n      return Promise.reject(\"Only data array is allowed\");\n    }\n\n    const dataChunk = chunk(data, poolingRecordQty);\n    for (const items of dataChunk) {\n      await this.sendData(items);\n\n      await sleep(poolingTime);\n    }\n\n    return `${data.length} Data added.`;\n  }\n}\n\nexport default Device;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}