{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Analyses extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list with all analyses from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/analysis/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_run\"]));\n    return result;\n  }\n  /**\n   * Create a new analyze\n   * @param analysisObj data object to create new TagoIO Analyze\n   */\n  async create(analysisObj) {\n    const result = await this.doRequest({\n      path: `/analysis`,\n      method: \"POST\",\n      body: {\n        ...analysisObj\n      }\n    });\n    return result;\n  }\n  /**\n   * Modify any property of the analyze.\n   * @param analysisID Analyze identification\n   * @param analysisObj Analyze Object with data to replace\n   */\n  async edit(analysisID, analysisObj) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}`,\n      method: \"PUT\",\n      body: {\n        ...analysisObj\n      }\n    });\n    return result;\n  }\n  /**\n   * Deletes an analyze from the account\n   * @param analysisID Analyze identification\n   */\n  async delete(analysisID) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Gets information about the analyze\n   * @param analysisID Analyze identification\n   */\n  async info(analysisID) {\n    let result = await this.doRequest({\n      path: `/analysis/${analysisID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_run\"]);\n    return result;\n  }\n  /**\n   * Force analyze to run\n   * @param analysisID Analyze identification\n   * @param scopeObj simulate scope for analysis\n   */\n  async run(analysisID, scopeObj) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}/run`,\n      method: \"POST\",\n      body: {\n        scope: scopeObj\n      }\n    });\n    return result;\n  }\n  /**\n   * Generate a new token for the analysis\n   * @param analysisID Analyze identification\n   */\n  async tokenGenerate(analysisID) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}/token`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Upload a file (base64) to Analysis. Automatically erase the old one\n   * @param analysisID Analyze identification\n   * @param fileObj Object with name, language and content of the file\n   */\n  async uploadScript(analysisID, fileObj) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}/upload`,\n      method: \"POST\",\n      body: {\n        file: fileObj.content,\n        file_name: fileObj.name,\n        language: fileObj.language\n      }\n    });\n    return result;\n  }\n  /**\n   * Get a url to download the analysis.\n   * If `version` is specified in `options`, downloads a specific version.\n   *\n   * @param analysisID Analysis identification\n   * @param options Options for the Analysis script to download\n   */\n  async downloadScript(analysisID, options) {\n    const {\n      version\n    } = options || {};\n    let result = await this.doRequest({\n      path: `/analysis/${analysisID}/download`,\n      method: \"GET\",\n      params: {\n        ...(version && {\n          version\n        })\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_at\"]);\n    return result;\n  }\n}\nexports.default = Analyses;","map":{"version":3,"mappings":"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","names":["Analyses","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","create","analysisObj","body","edit","analysisID","delete","info","run","scopeObj","scope","tokenGenerate","uploadScript","fileObj","file","content","file_name","name","language","downloadScript","options","version","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Analyses.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { AnalysisCreateInfo, AnalysisInfo, AnalysisQuery, ScriptFile } from \"./analysis.types\";\n\nclass Analyses extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all analyses from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: AnalysisQuery): Promise<AnalysisInfo[]> {\n    let result = await this.doRequest<AnalysisInfo[]>({\n      path: \"/analysis/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_run\"]));\n\n    return result;\n  }\n\n  /**\n   * Create a new analyze\n   * @param analysisObj data object to create new TagoIO Analyze\n   */\n  public async create(analysisObj: AnalysisCreateInfo): Promise<{ id: GenericID; token: GenericToken }> {\n    const result = await this.doRequest<{ id: GenericID; token: GenericToken }>({\n      path: `/analysis`,\n      method: \"POST\",\n      body: {\n        ...analysisObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the analyze.\n   * @param analysisID Analyze identification\n   * @param analysisObj Analyze Object with data to replace\n   */\n  public async edit(analysisID: GenericID, analysisObj: Partial<AnalysisInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}`,\n      method: \"PUT\",\n      body: {\n        ...analysisObj,\n      },\n    });\n\n    return result;\n  }\n  /**\n   * Deletes an analyze from the account\n   * @param analysisID Analyze identification\n   */\n  public async delete(analysisID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n  /**\n   * Gets information about the analyze\n   * @param analysisID Analyze identification\n   */\n  public async info(analysisID: GenericID): Promise<AnalysisInfo> {\n    let result = await this.doRequest<AnalysisInfo>({\n      path: `/analysis/${analysisID}`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_run\"]);\n\n    return result;\n  }\n\n  /**\n   * Force analyze to run\n   * @param analysisID Analyze identification\n   * @param scopeObj simulate scope for analysis\n   */\n  public async run(analysisID: GenericID, scopeObj?: Object | any): Promise<{ analysis_token: GenericToken }> {\n    const result = await this.doRequest<{ analysis_token: GenericToken }>({\n      path: `/analysis/${analysisID}/run`,\n      method: \"POST\",\n      body: {\n        scope: scopeObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the analysis\n   * @param analysisID Analyze identification\n   */\n  public async tokenGenerate(analysisID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Upload a file (base64) to Analysis. Automatically erase the old one\n   * @param analysisID Analyze identification\n   * @param fileObj Object with name, language and content of the file\n   */\n  public async uploadScript(analysisID: GenericID, fileObj: ScriptFile): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/analysis/${analysisID}/upload`,\n      method: \"POST\",\n      body: {\n        file: fileObj.content,\n        file_name: fileObj.name,\n        language: fileObj.language,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get a url to download the analysis.\n   * If `version` is specified in `options`, downloads a specific version.\n   *\n   * @param analysisID Analysis identification\n   * @param options Options for the Analysis script to download\n   */\n  public async downloadScript(\n    analysisID: GenericID,\n    options?: { version?: number }\n  ): Promise<{ url: string; size_unit: string; size: number; expire_at: Date }> {\n    const { version } = options || {};\n\n    let result = await this.doRequest<{ url: string; size_unit: string; size: number; expire_at: Date }>({\n      path: `/analysis/${analysisID}/download`,\n      method: \"GET\",\n      params: {\n        ...(version && { version }),\n      },\n    });\n    result = dateParser(result, [\"expire_at\"]);\n\n    return result;\n  }\n}\n\nexport default Analyses;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}