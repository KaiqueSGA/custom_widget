{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      theme: {\n        color: {}\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"static_table\"\n  };\n  var cells = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.cell) || {};\n  var cellKeys = Object.keys(cells);\n  for (var _i = 0, _cellKeys = cellKeys; _i < _cellKeys.length; _i++) {\n    var _key$split, _key$split2, _cells$key;\n    var key = _cellKeys[_i];\n    var position = {\n      x: Number((_key$split = key.split(\"_\")) === null || _key$split === void 0 ? void 0 : _key$split[1]) || 0,\n      y: Number((_key$split2 = key.split(\"_\")) === null || _key$split2 === void 0 ? void 0 : _key$split2[0]) || 0\n    };\n    var size = \"auto\";\n    var dataType = ((_cells$key = cells[key]) === null || _cells$key === void 0 ? void 0 : _cells$key.type) === \"constant\" ? \"text\" : \"variable\";\n    if (dataType === \"text\") {\n      var _cells$key2;\n      newStructure.display.variables.push({\n        allow_resize: true,\n        data_type: dataType,\n        id: (0, common_1.generateWidgetItemId)(),\n        position: position,\n        text_content: (_cells$key2 = cells[key]) === null || _cells$key2 === void 0 ? void 0 : _cells$key2.constant,\n        show_bold: true,\n        size: size\n      });\n    } else {\n      var _cells$key3, _variableObject$devic, _oldDisplay$vars_labe, _oldDisplay$vars_form, _oldDisplay$vars_form2, _oldDisplay$column_al, _oldDisplay$condition, _oldDisplay$condition2;\n      var variableObject = ((_cells$key3 = cells[key]) === null || _cells$key3 === void 0 ? void 0 : _cells$key3.variables) || {};\n      var origin = (variableObject === null || variableObject === void 0 ? void 0 : (_variableObject$devic = variableObject.device) === null || _variableObject$devic === void 0 ? void 0 : _variableObject$devic.id) || \"\";\n      var variable = (variableObject === null || variableObject === void 0 ? void 0 : variableObject.variable) || \"\";\n      var data = {\n        origin: origin,\n        variable: variable,\n        query: \"last_value\"\n      };\n      var variableKey = \"\".concat(origin).concat(variable);\n      var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[variableKey];\n      var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[variableKey];\n      var formula = (0, common_1.convertFormula)((_oldDisplay$vars_form2 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[variableKey]);\n      var alignment = oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$column_al = oldDisplay.column_alignments) === null || _oldDisplay$column_al === void 0 ? void 0 : _oldDisplay$column_al[variableKey];\n      var contentType = oldDisplay !== null && oldDisplay !== void 0 && (_oldDisplay$condition = oldDisplay.conditions) !== null && _oldDisplay$condition !== void 0 && _oldDisplay$condition[variableKey] ? \"icon\" : \"value\";\n      var iconConditions = oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$condition2 = oldDisplay.conditions) === null || _oldDisplay$condition2 === void 0 ? void 0 : _oldDisplay$condition2[variableKey];\n      newStructure.display.variables.push(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, alias ? {\n        alias: alias\n      } : {}), alignment ? {\n        alignment: alignment\n      } : {}), contentType ? {\n        content_type: contentType\n      } : {}), formula ? {\n        formula: formula\n      } : {}), iconConditions ? {\n        icon_conditions: iconConditions\n      } : {}), numberFormat ? {\n        number_format: numberFormat\n      } : {}), {}, {\n        allow_resize: true,\n        data: data,\n        data_type: dataType,\n        id: (0, common_1.generateWidgetItemId)(),\n        position: position,\n        size: size\n      }));\n      /**\r\n       * Formulas by variable are not working because the data structure is not\r\n       * encapsuling the new variables.\r\n       */\n      if (formula !== null && formula !== void 0 && formula.enable && (formula === null || formula === void 0 ? void 0 : formula.formula_type) === \"variable\" && formula !== null && formula !== void 0 && formula.variable) {\n        var formulaVariable = formula === null || formula === void 0 ? void 0 : formula.variable;\n        oldWidget.data.push({\n          bucket: formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.bucket,\n          origin: formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.origin,\n          variables: [formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.variable],\n          query: \"last_value\"\n        });\n      }\n    }\n  }\n  newStructure.data = oldWidget.data; // transfers the .data property\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.cell || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_that_have_conditions);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","header_buttons","help","theme","color","variables","id","label","realtime","type","cells","cell","cellKeys","Object","keys","key","position","x","Number","split","y","size","dataType","push","allow_resize","data_type","text_content","constant","show_bold","variableObject","origin","device","variable","data","query","variableKey","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","alignment","column_alignments","contentType","conditions","iconConditions","content_type","icon_conditions","number_format","enable","formula_type","formulaVariable","bucket","exports","isOldStructure","widget","isOld","vars_that_have_conditions"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\statictable.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old STATIC TABLE to new STATIC TABLE\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport { convertFormula, generateWidgetItemId } from \"./common\";\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  const newStructure: any = {\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      theme: {\r\n        color: {},\r\n      },\r\n      variables: [],\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"static_table\",\r\n  };\r\n\r\n  const cells = oldDisplay?.cell || {};\r\n  const cellKeys = Object.keys(cells);\r\n\r\n  for (const key of cellKeys) {\r\n    const position = {\r\n      x: Number(key.split(\"_\")?.[1]) || 0,\r\n      y: Number(key.split(\"_\")?.[0]) || 0,\r\n    };\r\n\r\n    const size = \"auto\";\r\n    const dataType = cells[key]?.type === \"constant\" ? \"text\" : \"variable\";\r\n\r\n    if (dataType === \"text\") {\r\n      newStructure.display.variables.push({\r\n        allow_resize: true,\r\n        data_type: dataType,\r\n        id: generateWidgetItemId(),\r\n        position,\r\n        text_content: cells[key]?.constant,\r\n        show_bold: true,\r\n        size,\r\n      });\r\n    } else {\r\n      const variableObject = cells[key]?.variables || {};\r\n\r\n      const origin = variableObject?.device?.id || \"\";\r\n      const variable = variableObject?.variable || \"\";\r\n\r\n      const data = { origin, variable, query: \"last_value\" };\r\n      const variableKey = `${origin}${variable}`;\r\n\r\n      const alias = oldDisplay.vars_labels?.[variableKey];\r\n      const numberFormat = oldDisplay.vars_format?.[variableKey];\r\n      const formula = convertFormula(oldDisplay.vars_formula?.[variableKey]);\r\n\r\n      const alignment = oldDisplay?.column_alignments?.[variableKey];\r\n      const contentType = oldDisplay?.conditions?.[variableKey] ? \"icon\" : \"value\";\r\n      const iconConditions = oldDisplay?.conditions?.[variableKey];\r\n\r\n      newStructure.display.variables.push({\r\n        ...(alias ? { alias } : {}),\r\n        ...(alignment ? { alignment } : {}),\r\n        ...(contentType ? { content_type: contentType } : {}),\r\n        ...(formula ? { formula } : {}),\r\n        ...(iconConditions ? { icon_conditions: iconConditions } : {}),\r\n        ...(numberFormat ? { number_format: numberFormat } : {}),\r\n        allow_resize: true,\r\n        data,\r\n        data_type: dataType,\r\n        id: generateWidgetItemId(),\r\n        position,\r\n        size,\r\n      });\r\n\r\n      /**\r\n       * Formulas by variable are not working because the data structure is not\r\n       * encapsuling the new variables.\r\n       */\r\n      if (formula?.enable && formula?.formula_type === \"variable\" && formula?.variable) {\r\n        const formulaVariable = formula?.variable;\r\n        oldWidget.data.push({\r\n          bucket: formulaVariable?.bucket,\r\n          origin: formulaVariable?.origin,\r\n          variables: [formulaVariable?.variable],\r\n          query: \"last_value\",\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  newStructure.data = oldWidget.data; // transfers the .data property\r\n\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(widget?.display?.cell || widget?.display?.vars_that_have_conditions);\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}