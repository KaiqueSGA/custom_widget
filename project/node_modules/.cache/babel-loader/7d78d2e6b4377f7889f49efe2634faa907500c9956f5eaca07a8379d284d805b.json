{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_legend: true,\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"pie\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item?.variables) {\n        const key = `${item.origin}${variable}`;\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const color = common_1.chartColors.find(e => {\n          return !newStructure.display.variables.find(v => v?.color === e);\n        }) || \"#999\";\n        newStructure.display.variables.push({\n          color,\n          origin: item.origin,\n          variable,\n          ...(alias ? {\n            alias\n          } : {}),\n          ...(numberFormat ? {\n            number_format: numberFormat\n          } : {})\n        });\n      }\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.numberformat || widget?.display?.hide_variables !== undefined || widget?.display?.watermark !== undefined || widget?.display?.pie_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":";;;;;;AAKA;AAEA,SAAgBA,OAAO,CAACC,SAAc;EACpC,MAAMC,UAAU,GAAGD,SAAS,CAACE,OAAO,IAAI,EAAE;EAE1C,MAAMC,YAAY,GAAQ;IACxBC,SAAS,EAAEJ,SAAS,CAACI,SAAS;IAC9BF,OAAO,EAAE;MACPG,cAAc,EAAEJ,UAAU,CAACI,cAAc,IAAI,EAAE;MAC/CC,IAAI,EAAEL,UAAU,CAACK,IAAI,IAAI,EAAE;MAC3BC,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE;KACZ;IACDC,EAAE,EAAET,SAAS,CAACS,EAAE;IAChBC,KAAK,EAAEV,SAAS,CAACU,KAAK;IACtBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;GACP;EAED,IAAIC,KAAK,CAACC,OAAO,CAACd,SAAS,CAACe,IAAI,CAAC,EAAE;IACjCZ,YAAY,CAACY,IAAI,GAAGf,SAAS,CAACe,IAAI,CAAC,CAAC;IAEpCZ,YAAY,CAACD,OAAO,CAACM,SAAS,GAAG,EAAE,CAAC,CAAC;IAErC,KAAK,MAAMQ,IAAI,IAAIhB,SAAS,CAACe,IAAI,EAAE;MACjC,IAAIC,IAAI,CAACC,OAAO,EAAE;QAChB;QACA;QACA;;MAGF,KAAK,MAAMC,QAAQ,IAAIF,IAAI,EAAER,SAAS,EAAE;QACtC,MAAMW,GAAG,GAAG,GAAGH,IAAI,CAACI,MAAM,GAAGF,QAAQ,EAAE;QAEvC,MAAMG,KAAK,GAAGpB,UAAU,CAACqB,WAAW,GAAGH,GAAG,CAAC;QAC3C,MAAMI,YAAY,GAAGtB,UAAU,CAACuB,WAAW,GAAGL,GAAG,CAAC;QAClD,MAAMM,KAAK,GACTC,oBAAW,CAACC,IAAI,CAAEC,CAAC,IAAI;UACrB,OAAO,CAACzB,YAAY,CAACD,OAAO,CAACM,SAAS,CAACmB,IAAI,CAAEE,CAAM,IAAKA,CAAC,EAAEJ,KAAK,KAAKG,CAAC,CAAC;QACzE,CAAC,CAAC,IAAI,MAAM;QAEdzB,YAAY,CAACD,OAAO,CAACM,SAAS,CAACsB,IAAI,CAAC;UAClCL,KAAK;UACLL,MAAM,EAAEJ,IAAI,CAACI,MAAM;UACnBF,QAAQ;UACR,IAAIG,KAAK,GAAG;YAAEA;UAAK,CAAE,GAAG,EAAE,CAAC;UAC3B,IAAIE,YAAY,GAAG;YAAEQ,aAAa,EAAER;UAAY,CAAE,GAAG,EAAE;SACxD,CAAC;;;;EAKR,OAAOpB,YAAY;AACrB;AAnDA6B;AAqDA,SAAgBC,cAAc,CAACC,MAAW;EACxC,MAAMC,KAAK,GAAG,CAAC,EACbD,MAAM,EAAEhC,OAAO,EAAEoB,WAAW,IAC5BY,MAAM,EAAEhC,OAAO,EAAEsB,WAAW,IAC5BU,MAAM,EAAEhC,OAAO,EAAEkC,YAAY,IAC7BF,MAAM,EAAEhC,OAAO,EAAEmC,cAAc,KAAKC,SAAS,IAC7CJ,MAAM,EAAEhC,OAAO,EAAEqC,SAAS,KAAKD,SAAS,IACxCJ,MAAM,EAAEhC,OAAO,EAAEsC,QAAQ,CAC1B;EAED,OAAOL,KAAK;AACd;AAXAH","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","header_buttons","help","show_legend","variables","id","label","realtime","type","Array","isArray","data","item","is_hide","variable","key","origin","alias","vars_labels","numberFormat","vars_format","color","common_1","find","e","v","push","number_format","exports","isOldStructure","widget","isOld","numberformat","hide_variables","undefined","watermark","pie_type"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\pie.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old PIE to new PIE\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { chartColors } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_legend: true,\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"pie\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item?.variables) {\n        const key = `${item.origin}${variable}`;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const color =\n          chartColors.find((e) => {\n            return !newStructure.display.variables.find((v: any) => v?.color === e);\n          }) || \"#999\";\n\n        newStructure.display.variables.push({\n          color,\n          origin: item.origin,\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.numberformat ||\n    widget?.display?.hide_variables !== undefined ||\n    widget?.display?.watermark !== undefined ||\n    widget?.display?.pie_type\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}