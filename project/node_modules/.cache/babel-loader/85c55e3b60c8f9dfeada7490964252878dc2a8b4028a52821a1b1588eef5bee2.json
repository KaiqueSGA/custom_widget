{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Network = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Network, _TagoIOModule_1$defau);\n  var _super = _createSuper(Network);\n  function Network() {\n    _classCallCheck(this, Network);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Network, [{\n    key: \"info\",\n    value:\n    /**\n     * Get information about the current network\n     */\n    function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/info\",\n                  method: \"GET\",\n                  params: {\n                    details: this.params.details\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function info() {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Get a valid token using token serie\n     * @param serieNumber\n     * @param authorization\n     */\n  }, {\n    key: \"resolveToken\",\n    value: function () {\n      var _resolveToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(serieNumber, authorization) {\n        var path, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                path = \"/integration/network/resolve/\".concat(serieNumber);\n                if (authorization) path = \"\".concat(path, \"/\").concat(authorization);\n                _context2.next = 4;\n                return this.doRequest({\n                  path: path,\n                  method: \"GET\",\n                  params: {\n                    details: this.params.details\n                  }\n                });\n              case 4:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function resolveToken(_x, _x2) {\n        return _resolveToken.apply(this, arguments);\n      }\n      return resolveToken;\n    }()\n    /**\n     * Retrieves a list with all devices tokens related to\n     * network and connector. Network require_devices_access\n     * param need to be true.\n     * @default\n     * queryObj: {\n     *   page: 1,\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\"\n     * }\n     * @param connectorID Connector identification\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"deviceList\",\n    value: function () {\n      var _deviceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connectorID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/\".concat(connectorID, \"/devices\"),\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context3.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                });\n                return _context3.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function deviceList(_x3, _x4) {\n        return _deviceList.apply(this, arguments);\n      }\n      return deviceList;\n    }()\n    /**\n     * Create or edit param for the Device in network\n     * @param deviceID Device ID\n     * @param configObj Configuration Data\n     * @param paramID Parameter ID\n     */\n  }, {\n    key: \"deviceParamSet\",\n    value: function () {\n      var _deviceParamSet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(deviceID, configObj, paramID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/\".concat(deviceID, \"/params\"),\n                  method: \"POST\",\n                  body: paramID ? _objectSpread({\n                    id: paramID\n                  }, configObj) : configObj\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function deviceParamSet(_x5, _x6, _x7) {\n        return _deviceParamSet.apply(this, arguments);\n      }\n      return deviceParamSet;\n    }()\n  }]);\n  return Network;\n}(TagoIOModule_1.default);\nexports.default = Network;","map":{"version":3,"mappings":"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","names":["Network","doRequest","path","method","params","details","result","serieNumber","authorization","connectorID","queryObj","page","filter","amount","orderBy","map","data","deviceID","configObj","paramID","body","id","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Network\\Network.ts"],"sourcesContent":["import TagoIOModule, { ConnectorModuleParams } from \"../../common/TagoIOModule\";\nimport { NetworkDeviceListQuery, INetworkInfo, NetworkDeviceListQueryInfo } from \"./network.types\";\nimport { GenericID, GenericToken } from \"../../common/common.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport { ConfigurationParams } from \"../Account/devices.types\";\n\nclass Network extends TagoIOModule<ConnectorModuleParams> {\n  /**\n   * Get information about the current network\n   */\n  public async info(): Promise<INetworkInfo> {\n    const result = await this.doRequest<INetworkInfo>({\n      path: \"/info\",\n      method: \"GET\",\n      params: {\n        details: this.params.details,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get a valid token using token serie\n   * @param serieNumber\n   * @param authorization\n   */\n  public async resolveToken(serieNumber: string, authorization?: string): Promise<GenericToken> {\n    let path = `/integration/network/resolve/${serieNumber}`;\n\n    if (authorization) path = `${path}/${authorization}`;\n\n    const result = await this.doRequest<GenericToken>({\n      path,\n      method: \"GET\",\n      params: {\n        details: this.params.details,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices tokens related to\n   * network and connector. Network require_devices_access\n   * param need to be true.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\"\n   * }\n   * @param connectorID Connector identification\n   * @param queryObj Search query params\n   */\n  public async deviceList(\n    connectorID: GenericID,\n    queryObj?: NetworkDeviceListQuery\n  ): Promise<NetworkDeviceListQueryInfo[]> {\n    let result = await this.doRequest<NetworkDeviceListQueryInfo[]>({\n      path: `/integration/network/${connectorID}/devices`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Create or edit param for the Device in network\n   * @param deviceID Device ID\n   * @param configObj Configuration Data\n   * @param paramID Parameter ID\n   */\n  public async deviceParamSet(\n    deviceID: GenericID,\n    configObj: Partial<ConfigurationParams>,\n    paramID?: GenericID\n  ): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/integration/network/${deviceID}/params`,\n      method: \"POST\",\n      body: paramID\n        ? {\n            id: paramID,\n            ...configObj,\n          }\n        : configObj,\n    });\n\n    return result;\n  }\n}\n\nexport default Network;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}