{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar modules_1 = require(\"../../modules\");\nvar Dictionaries = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Dictionaries, _TagoIOModule_1$defau);\n  var _super = _createSuper(Dictionaries);\n  function Dictionaries() {\n    _classCallCheck(this, Dictionaries);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Dictionaries, [{\n    key: \"list\",\n    value:\n    /**\r\n     * Retrieve a list with all dictionaries from an account.\r\n     *\r\n     * @default\r\n     * ```json\r\n     * queryObj: {\r\n     *   page: 1,\r\n     *   fields: [\"id\", \"name\", \"slug\", \"languages\"],\r\n     *   filter: {},\r\n     *   amount: 20,\r\n     *   orderBy: \"name,asc\",\r\n     * }\r\n     * ```\r\n     *\r\n     * @param queryObj Search query params.\r\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\", \"slug\", \"languages\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\r\n     * Generate a new dictionary for the account.\r\n     *\r\n     * @param dictionaryObj Object with data to create new dictionary.\r\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dictionaryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary\",\n                  method: \"POST\",\n                  body: dictionaryObj\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function create(_x2) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\r\n     * Modify any property of a dictionary.\r\n     *\r\n     * @param dictionaryID Dictionary ID.\r\n     * @param dictionaryObj Dictionary Object data to be replaced.\r\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dictionaryID, dictionaryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID),\n                  method: \"PUT\",\n                  body: dictionaryObj\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function edit(_x3, _x4) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\r\n     * Delete a dictionary from the account.\r\n     *\r\n     * @param dictionaryID Dictionary ID.\r\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(dictionaryID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context4.sent;\n                modules_1.Cache.clearCache();\n                return _context4.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\r\n     * Get information about a dictionary.\r\n     *\r\n     * @param dictionaryID Dictionary ID.\r\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dictionaryID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context5.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\"]);\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function info(_x6) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n  }, {\n    key: \"languageEdit\",\n    value: function () {\n      var _languageEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dictionaryID, locale, languageObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID, \"/\").concat(locale),\n                  method: \"PUT\",\n                  body: languageObj\n                });\n              case 2:\n                result = _context6.sent;\n                modules_1.Cache.clearCache();\n                return _context6.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function languageEdit(_x7, _x8, _x9) {\n        return _languageEdit.apply(this, arguments);\n      }\n      return languageEdit;\n    }()\n    /**\r\n     * Delete a language from a dictionary.\r\n     *\r\n     * @param dictionaryID Dictionary ID.\r\n     * @param locale Language locale string (e.g. `en-US`).\r\n     */\n  }, {\n    key: \"languageDelete\",\n    value: function () {\n      var _languageDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(dictionaryID, locale) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID, \"/\").concat(locale),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context7.sent;\n                modules_1.Cache.clearCache();\n                return _context7.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function languageDelete(_x10, _x11) {\n        return _languageDelete.apply(this, arguments);\n      }\n      return languageDelete;\n    }()\n    /**\r\n     * Get information about a dictionary by ID.\r\n     *\r\n     * @param dictionaryID Dictionary ID.\r\n     * @param locale Language locale string (e.g. `en-US`).\r\n     * @param queryObj Language info query params.\r\n     */\n  }, {\n    key: \"languageInfo\",\n    value: function () {\n      var _languageInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dictionaryID, locale, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(dictionaryID, \"/\").concat(locale),\n                  method: \"GET\",\n                  params: {\n                    // Default to not getting the fallback language info if language is not found\n                    // as this route is mainly used to edit a dictionary\n                    fallback: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fallback) || false\n                  }\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function languageInfo(_x12, _x13, _x14) {\n        return _languageInfo.apply(this, arguments);\n      }\n      return languageInfo;\n    }()\n    /**\r\n     * Get information about a dictionary querying by slug instead of the dictionary's ID.\r\n     *\r\n     * @param slug Dictionary slug.\r\n     * @param locale Language locale string (e.g. `en-US`).\r\n     * @param queryObj Language info query params.\r\n     */\n  }, {\n    key: \"languageInfoBySlug\",\n    value: function () {\n      var _languageInfoBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(slug, locale, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/dictionary/\".concat(slug, \"/\").concat(locale),\n                  method: \"GET\",\n                  params: {\n                    // Default to getting the fallback language info if language is not found\n                    // as this route is mainly used to use the dictionary strings in applications\n                    fallback: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fallback) || true\n                  }\n                });\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function languageInfoBySlug(_x15, _x16, _x17) {\n        return _languageInfoBySlug.apply(this, arguments);\n      }\n      return languageInfoBySlug;\n    }()\n  }]);\n  return Dictionaries;\n}(TagoIOModule_1.default);\nexports.default = Dictionaries;","map":{"version":3,"mappings":"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","names":["Dictionaries","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","result","map","data","dictionaryObj","body","dictionaryID","modules_1","clearCache","locale","languageObj","fallback","slug","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dictionaries.ts"],"sourcesContent":["import { GenericID } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport dateParser from \"../Utils/dateParser\";\r\n\r\nimport {\r\n  DictionaryCreateInfo,\r\n  DictionaryInfo,\r\n  DictionaryQuery,\r\n  LanguageData,\r\n  LanguageEditData,\r\n  LanguageInfoQuery,\r\n} from \"./dictionaries.types\";\r\n\r\nimport { Cache } from \"../../modules\";\r\n\r\nclass Dictionaries extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieve a list with all dictionaries from an account.\r\n   *\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\", \"slug\", \"languages\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   *\r\n   * @param queryObj Search query params.\r\n   */\r\n  public async list(queryObj?: DictionaryQuery): Promise<DictionaryInfo[]> {\r\n    let result = await this.doRequest<DictionaryInfo[]>({\r\n      path: \"/dictionary\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\", \"slug\", \"languages\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate a new dictionary for the account.\r\n   *\r\n   * @param dictionaryObj Object with data to create new dictionary.\r\n   */\r\n  public async create(dictionaryObj: DictionaryCreateInfo): Promise<{ dictionary: string }> {\r\n    const result = await this.doRequest<{ dictionary: string }>({\r\n      path: \"/dictionary\",\r\n      method: \"POST\",\r\n      body: dictionaryObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param dictionaryObj Dictionary Object data to be replaced.\r\n   */\r\n  public async edit(dictionaryID: GenericID, dictionaryObj: Partial<DictionaryCreateInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"PUT\",\r\n      body: dictionaryObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a dictionary from the account.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\r\n  public async delete(dictionaryID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   */\r\n  public async info(dictionaryID: GenericID): Promise<DictionaryInfo> {\r\n    let result = await this.doRequest<DictionaryInfo>({\r\n      path: `/dictionary/${dictionaryID}`,\r\n      method: \"GET\",\r\n    });\r\n    result = dateParser(result, [\"created_at\", \"updated_at\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  public async languageEdit(dictionaryID: GenericID, locale: string, languageObj: LanguageEditData): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"PUT\",\r\n      body: languageObj,\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a language from a dictionary.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   */\r\n  public async languageDelete(dictionaryID: GenericID, locale: string): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    Cache.clearCache();\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary by ID.\r\n   *\r\n   * @param dictionaryID Dictionary ID.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\r\n  public async languageInfo(\r\n    dictionaryID: GenericID,\r\n    locale: string,\r\n    queryObj?: LanguageInfoQuery\r\n  ): Promise<LanguageData> {\r\n    const result = await this.doRequest<LanguageData>({\r\n      path: `/dictionary/${dictionaryID}/${locale}`,\r\n      method: \"GET\",\r\n      params: {\r\n        // Default to not getting the fallback language info if language is not found\r\n        // as this route is mainly used to edit a dictionary\r\n        fallback: queryObj?.fallback || false,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get information about a dictionary querying by slug instead of the dictionary's ID.\r\n   *\r\n   * @param slug Dictionary slug.\r\n   * @param locale Language locale string (e.g. `en-US`).\r\n   * @param queryObj Language info query params.\r\n   */\r\n  public async languageInfoBySlug(slug: string, locale: string, queryObj?: LanguageInfoQuery): Promise<LanguageData> {\r\n    const result = await this.doRequest<LanguageData>({\r\n      path: `/dictionary/${slug}/${locale}`,\r\n      method: \"GET\",\r\n      params: {\r\n        // Default to getting the fallback language info if language is not found\r\n        // as this route is mainly used to use the dictionary strings in applications\r\n        fallback: queryObj?.fallback || true,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Dictionaries;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}