{"ast":null,"code":"import { urlAlphabet } from './url-alphabet/index.js';\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nlet customAlphabet = function (alphabet) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nlet nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    let byte = bytes[size] & 63;\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n  return id;\n};\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"sources":["C:/Users/kaique/Documents/SGA/widget/project/node_modules/@tago-io/sdk/node_modules/nanoid/index.browser.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\r\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\r\nlet customRandom = (alphabet, defaultSize, getRandom) => {\r\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\r\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\r\n  return (size = defaultSize) => {\r\n    let id = ''\r\n    while (true) {\r\n      let bytes = getRandom(step)\r\n      let j = step\r\n      while (j--) {\r\n        id += alphabet[bytes[j] & mask] || ''\r\n        if (id.length === size) return id\r\n      }\r\n    }\r\n  }\r\n}\r\nlet customAlphabet = (alphabet, size = 21) =>\r\n  customRandom(alphabet, size, random)\r\nlet nanoid = (size = 21) => {\r\n  let id = ''\r\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\r\n  while (size--) {\r\n    let byte = bytes[size] & 63\r\n    if (byte < 36) {\r\n      id += byte.toString(36)\r\n    } else if (byte < 62) {\r\n      id += (byte - 26).toString(36).toUpperCase()\r\n    } else if (byte < 63) {\r\n      id += '_'\r\n    } else {\r\n      id += '-'\r\n    }\r\n  }\r\n  return id\r\n}\r\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,IAAIC,MAAM,GAAGC,KAAK,IAAIC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACH,KAAK,CAAC,CAAC;AACnE,IAAII,YAAY,GAAG,CAACC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,KAAK;EACvD,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAI,IAAI,CAAC;EAChE,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGL,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACM,MAAM,CAAC;EAC3D,OAAO,YAAwB;IAAA,IAAvBG,IAAI,uEAAGR,WAAW;IACxB,IAAIS,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIf,KAAK,GAAGO,SAAS,CAACM,IAAI,CAAC;MAC3B,IAAIG,CAAC,GAAGH,IAAI;MACZ,OAAOG,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIV,QAAQ,CAACL,KAAK,CAACgB,CAAC,CAAC,GAAGR,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIO,EAAE,CAACJ,MAAM,KAAKG,IAAI,EAAE,OAAOC,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AACD,IAAIE,cAAc,GAAG,UAACZ,QAAQ;EAAA,IAAES,IAAI,uEAAG,EAAE;EAAA,OACvCV,YAAY,CAACC,QAAQ,EAAES,IAAI,EAAEf,MAAM,CAAC;AAAA;AACtC,IAAImB,MAAM,GAAG,YAAe;EAAA,IAAdJ,IAAI,uEAAG,EAAE;EACrB,IAAIC,EAAE,GAAG,EAAE;EACX,IAAIf,KAAK,GAAGC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACW,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI,EAAE,EAAE;IACb,IAAIK,IAAI,GAAGnB,KAAK,CAACc,IAAI,CAAC,GAAG,EAAE;IAC3B,IAAIK,IAAI,GAAG,EAAE,EAAE;MACbJ,EAAE,IAAII,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM,IAAID,IAAI,GAAG,EAAE,EAAE;MACpBJ,EAAE,IAAI,CAACI,IAAI,GAAG,EAAE,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE;IAC9C,CAAC,MAAM,IAAIF,IAAI,GAAG,EAAE,EAAE;MACpBJ,EAAE,IAAI,GAAG;IACX,CAAC,MAAM;MACLA,EAAE,IAAI,GAAG;IACX;EACF;EACA,OAAOA,EAAE;AACX,CAAC;AACD,SAASG,MAAM,EAAED,cAAc,EAAEb,YAAY,EAAEN,WAAW,EAAEC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}