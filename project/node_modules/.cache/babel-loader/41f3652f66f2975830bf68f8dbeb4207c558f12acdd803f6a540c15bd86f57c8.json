{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nconst SDB_1 = __importDefault(require(\"./SDB\"));\nclass RunUser extends TagoIOModule_1.default {\n  constructor() {\n    super(...arguments);\n    this.SDB = new SDB_1.default(this.params);\n  }\n  /**\n   * Get Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  async info(tagoIORunURL) {\n    let result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\"]);\n    return result;\n  }\n  /**\n   * Create new TagoIO Run User (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param newUserObj New user data\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async create(tagoIORunURL, newUserObj, region) {\n    const params = {\n      path: `/run/${tagoIORunURL}/signup`,\n      method: \"POST\",\n      body: newUserObj\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Edit Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param userChangesObj Data to change in user\n   */\n  async edit(tagoIORunURL, userChangesObj) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"PUT\",\n      body: userChangesObj\n    });\n    return result;\n  }\n  /**\n   * Delete Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  async delete(tagoIORunURL) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/delete`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Login at TagoIO Run as user (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param credentialsObj Run user credentials\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async login(tagoIORunURL, credentialsObj, region) {\n    const params = {\n      path: `/run/${tagoIORunURL}/login`,\n      method: \"POST\",\n      body: credentialsObj\n    };\n    let result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n    return result;\n  }\n  /**\n   * Confirm User on TagoIO Run (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param token TagoIO Run user token\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async confirmUser(tagoIORunURL, token, region) {\n    const params = {\n      path: `/run/${tagoIORunURL}/confirm/${token}`,\n      method: \"GET\"\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Sends a password recover e-mail\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param email Run user email to recover the password\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async passwordRecover(tagoIORunURL, email, region) {\n    const params = {\n      path: `/run/${tagoIORunURL}/passwordreset/${email}`,\n      method: \"GET\"\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Change password using token of the password recover.\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param password New password\n   */\n  async passwordChange(tagoIORunURL, password) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/passwordreset`,\n      method: \"POST\",\n      body: {\n        password\n      }\n    });\n    return result;\n  }\n  /**\n   * List notifications.\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  async notificationList(tagoIORunURL, queryObj) {\n    let result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"GET\",\n      params: queryObj\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\"]));\n    return result;\n  }\n  /**\n   * Mark notification as read\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  async notificationMarkRead(tagoIORunURL, notificationIDs) {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: true\n      }\n    });\n    return result;\n  }\n  /**\n   * Mark notification as unread\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  async notificationMarkUnread(tagoIORunURL, notificationIDs) {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: false\n      }\n    });\n    return result;\n  }\n  /**\n   * Mark all notifications as read\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  async notificationMarkAllRead(tagoIORunURL) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification/markallread`,\n      method: \"PUT\"\n    });\n    return result;\n  }\n  /**\n   * Trigger notification button\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   * @param buttonID Notification button id\n   */\n  async notificationButton(tagoIORunURL, notificationID, buttonID) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\"\n    });\n    return result;\n  }\n  /**\n   * Delete notification\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   */\n  async notificationDelete(tagoIORunURL, notificationID) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Request the PIN Code for a given OTP Type.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  static async requestLoginPINCode(tagoIORunURL, credentials, typeOTP) {\n    const result = await this.doRequestAnonymous({\n      path: `/run/${tagoIORunURL}/login/otp`,\n      method: \"POST\",\n      body: {\n        ...credentials,\n        otp_type: typeOTP\n      }\n    });\n    return result;\n  }\n  /**\n   * Enable OTP for a given OTP Type.\n   * You will be requested to confirm the operation with a pin code.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async enableOTP(tagoIORunURL, credentials, typeOTP) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/enable`,\n      method: \"POST\",\n      body: credentials\n    });\n    return result;\n  }\n  /**\n   * Enable OTP for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async disableOTP(tagoIORunURL, credentials, typeOTP) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/disable`,\n      method: \"POST\",\n      body: credentials\n    });\n    return result;\n  }\n  /**\n   * Confirm OTP enabling process for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async confirmOTP(tagoIORunURL, pinCode, typeOTP) {\n    const result = await this.doRequest({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/confirm`,\n      method: \"POST\",\n      body: {\n        pin_code: pinCode\n      }\n    });\n    return result;\n  }\n}\nexports.default = RunUser;","map":{"version":3,"mappings":"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","names":["RunUser","TagoIOModule_1","constructor","SDB_1","params","info","tagoIORunURL","result","doRequest","path","method","create","newUserObj","region","body","doRequestAnonymous","edit","userChangesObj","delete","login","credentialsObj","confirmUser","token","passwordRecover","email","passwordChange","password","notificationList","queryObj","map","data","notificationMarkRead","notificationIDs","Array","isArray","notification_ids","read","notificationMarkUnread","notificationMarkAllRead","notificationButton","notificationID","buttonID","notificationDelete","requestLoginPINCode","credentials","typeOTP","otp_type","enableOTP","disableOTP","confirmOTP","pinCode","pin_code","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\RunUser\\RunUser.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { doRequestParams, GenericModuleParams } from \"../../common/TagoIOModule\";\nimport { Regions } from \"../../regions\";\nimport { NotificationInfo, NotificationQuery } from \"../Account/notifications.types\";\nimport { OTPType } from \"../Account/account.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport {\n  RunNotificationInfo,\n  RunUserCreateInfo,\n  RunUserCreate,\n  RunUserInfo,\n  RunUserLogin,\n  RunUserLoginResponse,\n  RunUserCredentials,\n} from \"./runUser.types\";\nimport SDB from \"./SDB\";\n\nclass RunUser extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Get Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async info(tagoIORunURL: string): Promise<RunUserInfo> {\n    let result = await this.doRequest<RunUserInfo>({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Create new TagoIO Run User (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param newUserObj New user data\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async create(\n    tagoIORunURL: string,\n    newUserObj: RunUserCreateInfo,\n    region?: Regions\n  ): Promise<RunUserCreate> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/signup`,\n      method: \"POST\",\n      body: newUserObj,\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<RunUserCreate>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Edit Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param userChangesObj Data to change in user\n   */\n  public async edit(tagoIORunURL: string, userChangesObj: Partial<RunUserInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"PUT\",\n      body: userChangesObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async delete(tagoIORunURL: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/delete`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Login at TagoIO Run as user (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param credentialsObj Run user credentials\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async login(\n    tagoIORunURL: string,\n    credentialsObj: RunUserLogin,\n    region?: Regions\n  ): Promise<RunUserLoginResponse> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/login`,\n      method: \"POST\",\n      body: credentialsObj,\n    };\n\n    let result = await TagoIOModule.doRequestAnonymous<RunUserLoginResponse>(params, region);\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Confirm User on TagoIO Run (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param token TagoIO Run user token\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async confirmUser(tagoIORunURL: string, token: GenericToken, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/confirm/${token}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Sends a password recover e-mail\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param email Run user email to recover the password\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async passwordRecover(tagoIORunURL: string, email: string, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/passwordreset/${email}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Change password using token of the password recover.\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param password New password\n   */\n  public async passwordChange(tagoIORunURL: string, password: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/passwordreset`,\n      method: \"POST\",\n      body: {\n        password,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * List notifications.\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async notificationList(tagoIORunURL: string, queryObj?: NotificationQuery): Promise<NotificationInfo[]> {\n    let result = await this.doRequest<NotificationInfo[]>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"GET\",\n      params: queryObj,\n    });\n    result = result.map((data) => dateParser(data, [\"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Mark notification as read\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  public async notificationMarkRead(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string> {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: true,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark notification as unread\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  public async notificationMarkUnread(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string> {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: false,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark all notifications as read\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async notificationMarkAllRead(tagoIORunURL: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification/markallread`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n  /**\n   * Trigger notification button\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   * @param buttonID Notification button id\n   */\n  public async notificationButton(tagoIORunURL: string, notificationID: GenericID, buttonID: GenericID): Promise<any> {\n    const result = await this.doRequest<any>({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete notification\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   */\n  public async notificationDelete(tagoIORunURL: string, notificationID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Request the PIN Code for a given OTP Type.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public static async requestLoginPINCode(\n    tagoIORunURL: string,\n    credentials: RunUserCredentials,\n    typeOTP: OTPType\n  ): Promise<string> {\n    const result = await this.doRequestAnonymous<string>({\n      path: `/run/${tagoIORunURL}/login/otp`,\n      method: \"POST\",\n      body: { ...credentials, otp_type: typeOTP },\n    });\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type.\n   * You will be requested to confirm the operation with a pin code.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async enableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/enable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async disableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/disable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Confirm OTP enabling process for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async confirmOTP(tagoIORunURL: string, pinCode: string, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/confirm`,\n      method: \"POST\",\n      body: {\n        pin_code: pinCode,\n      },\n    });\n\n    return result;\n  }\n\n  public SDB = new SDB(this.params);\n}\n\nexport default RunUser;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}