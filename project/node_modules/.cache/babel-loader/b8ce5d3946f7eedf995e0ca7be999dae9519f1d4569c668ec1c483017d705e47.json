{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Account_1 = __importDefault(require(\"../Account/Account\"));\nvar Device_1 = __importDefault(require(\"../Device/Device\"));\nvar getTokenByName_1 = __importDefault(require(\"./getTokenByName\"));\n/**\n * Get the TagoIO Device instanced class from a device id\n */\nfunction getDevice(_x, _x2) {\n  return _getDevice.apply(this, arguments);\n}\nfunction _getDevice() {\n  _getDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(account, device_id) {\n    var token, device;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (account instanceof Account_1.default) {\n              _context.next = 2;\n              break;\n            }\n            throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n          case 2:\n            _context.next = 4;\n            return (0, getTokenByName_1.default)(account, device_id);\n          case 4:\n            token = _context.sent;\n            if (token) {\n              _context.next = 7;\n              break;\n            }\n            throw \"Token not found for the device id \".concat(device_id);\n          case 7:\n            device = new Device_1.default({\n              token: token\n            });\n            return _context.abrupt(\"return\", device);\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDevice.apply(this, arguments);\n}\nexports.default = getDevice;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;AAAA,SAGeA,SAAS;EAAA;AAAA;AAAA;EAAA,wEAAxB,iBAAyBC,OAAgB,EAAEC,SAAiB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACpDD,OAAO,YAAYE,iBAAO;cAAA;cAAA;YAAA;YAAA,MACxB,kEAAkE;UAAA;YAAA;YAAA,OAGtD,4BAAc,EAACF,OAAO,EAAEC,SAAS,CAAC;UAAA;YAAhDE,KAAK;YAAA,IACNA,KAAK;cAAA;cAAA;YAAA;YAAA,kDACmCF,SAAS;UAAA;YAGhDG,MAAM,GAAG,IAAIC,gBAAM,CAAC;cAAEF,KAAK,EAALA;YAAK,CAAE,CAAC;YAAA,iCAE7BC,MAAM;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACd;EAAA;AAAA;AAEDE,kBAAeP,SAAS","names":["getDevice","account","device_id","Account_1","token","device","Device_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\getDevice.ts"],"sourcesContent":["import Account from \"../Account/Account\";\nimport Device from \"../Device/Device\";\nimport getTokenByName from \"./getTokenByName\";\n\n/**\n * Get the TagoIO Device instanced class from a device id\n */\nasync function getDevice(account: Account, device_id: string): Promise<Device> {\n  if (!(account instanceof Account)) {\n    throw \"The parameter 'account' must be an instance of a TagoIO Account.\";\n  }\n\n  const token = await getTokenByName(account, device_id);\n  if (!token) {\n    throw `Token not found for the device id ${device_id}`;\n  }\n\n  const device = new Device({ token });\n\n  return device;\n}\n\nexport default getDevice;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}