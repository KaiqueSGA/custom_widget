{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nfunction convertState(oldState) {\n  const newState = {\n    ...oldState,\n    type: oldState?.type || \"text\",\n    color: oldState?.text_color || \"\"\n  };\n  delete newState.text_color;\n  return newState;\n}\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    analysis_run: oldWidget?.analysis_run,\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      button_type: oldDisplay?.button_type === \"bi-stable\" ? \"bistable\" : \"monostable\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_variables: !oldDisplay?.hide_variables,\n      state_one: convertState(oldDisplay?.state_one),\n      state_two: convertState(oldDisplay?.state_two),\n      theme: {\n        color: {\n          background: null,\n          text: null\n        }\n      }\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"push_button\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":";;;;;;AAMA,SAASA,YAAY,CAACC,QAAa;EACjC,MAAMC,QAAQ,GAAG;IACf,GAAGD,QAAQ;IACXE,IAAI,EAAEF,QAAQ,EAAEE,IAAI,IAAI,MAAM;IAC9BC,KAAK,EAAEH,QAAQ,EAAEI,UAAU,IAAI;GAChC;EACD,OAAOH,QAAQ,CAACG,UAAU;EAE1B,OAAOH,QAAQ;AACjB;AAEA,SAAgBI,OAAO,CAACC,SAAc;EACpC,MAAMC,UAAU,GAAGD,SAAS,CAACE,OAAO,IAAI,EAAE;EAE1C,MAAMC,YAAY,GAAQ;IACxBC,YAAY,EAAEJ,SAAS,EAAEI,YAAY;IACrCC,SAAS,EAAEL,SAAS,CAACK,SAAS;IAC9BH,OAAO,EAAE;MACPI,KAAK,EAAE,EAAE;MACTC,WAAW,EAAEN,UAAU,EAAEM,WAAW,KAAK,WAAW,GAAG,UAAU,GAAG,YAAY;MAChFC,cAAc,EAAEP,UAAU,CAACO,cAAc,IAAI,EAAE;MAC/CC,IAAI,EAAER,UAAU,CAACQ,IAAI,IAAI,EAAE;MAC3BC,cAAc,EAAE,CAACT,UAAU,EAAEU,cAAc;MAC3CC,SAAS,EAAEnB,YAAY,CAACQ,UAAU,EAAEW,SAAS,CAAC;MAC9CC,SAAS,EAAEpB,YAAY,CAACQ,UAAU,EAAEY,SAAS,CAAC;MAC9CC,KAAK,EAAE;QACLjB,KAAK,EAAE;UACLkB,UAAU,EAAE,IAAI;UAChBC,IAAI,EAAE;;;KAGX;IACDC,EAAE,EAAEjB,SAAS,CAACiB,EAAE;IAChBC,KAAK,EAAElB,SAAS,CAACkB,KAAK;IACtBC,QAAQ,EAAE,IAAI;IACdvB,IAAI,EAAE;GACP;EAED,IAAIwB,KAAK,CAACC,OAAO,CAACrB,SAAS,CAACsB,IAAI,CAAC,EAAE;IACjC,KAAK,MAAMC,IAAI,IAAIvB,SAAS,CAACsB,IAAI,EAAE;MACjC,IAAIC,IAAI,EAAEC,OAAO,EAAE;QACjB;;MAEF,KAAK,MAAMC,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE;QACrC,MAAMC,GAAG,GAAG,GAAGJ,IAAI,EAAEK,MAAM,GAAGH,QAAQ,EAAE;QACxC,IAAIxB,UAAU,EAAE4B,WAAW,GAAGF,GAAG,CAAC,IAAI1B,UAAU,EAAE4B,WAAW,GAAGF,GAAG,CAAC,KAAKF,QAAQ,EAAE;UACjFtB,YAAY,CAACD,OAAO,CAACI,KAAK,GAAGL,UAAU,EAAE4B,WAAW,GAAGF,GAAG,CAAC;;;;IAKjExB,YAAY,CAACmB,IAAI,GAAGtB,SAAS,CAACsB,IAAI;;EAEpC,OAAOnB,YAAY;AACrB;AA3CA2B;AA6CA,SAAgBC,cAAc,CAACC,MAAW;EACxC,MAAMC,KAAK,GAAG,CAAC,EAAED,MAAM,EAAE9B,OAAO,EAAE2B,WAAW,IAAIG,MAAM,EAAE9B,OAAO,EAAEgC,WAAW,IAAIF,MAAM,EAAE9B,OAAO,EAAEiC,YAAY,CAAC;EAE/G,OAAOF,KAAK;AACd;AAJAH","names":["convertState","oldState","newState","type","color","text_color","convert","oldWidget","oldDisplay","display","newStructure","analysis_run","dashboard","alias","button_type","header_buttons","help","show_variables","hide_variables","state_one","state_two","theme","background","text","id","label","realtime","Array","isArray","data","item","is_hide","variable","variables","key","origin","vars_labels","exports","isOldStructure","widget","isOld","vars_format","vars_formula"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\pushbutton.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old PUSH BUTTON to new PUSH BUTTON\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\n\r\nfunction convertState(oldState: any) {\r\n  const newState = {\r\n    ...oldState,\r\n    type: oldState?.type || \"text\",\r\n    color: oldState?.text_color || \"\",\r\n  };\r\n  delete newState.text_color;\r\n\r\n  return newState;\r\n}\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  const newStructure: any = {\r\n    analysis_run: oldWidget?.analysis_run,\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      alias: \"\",\r\n      button_type: oldDisplay?.button_type === \"bi-stable\" ? \"bistable\" : \"monostable\",\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      show_variables: !oldDisplay?.hide_variables,\r\n      state_one: convertState(oldDisplay?.state_one),\r\n      state_two: convertState(oldDisplay?.state_two),\r\n      theme: {\r\n        color: {\r\n          background: null,\r\n          text: null,\r\n        },\r\n      },\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"push_button\",\r\n  };\r\n\r\n  if (Array.isArray(oldWidget.data)) {\r\n    for (const item of oldWidget.data) {\r\n      if (item?.is_hide) {\r\n        continue;\r\n      }\r\n      for (const variable of item.variables) {\r\n        const key = `${item?.origin}${variable}`;\r\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\r\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    newStructure.data = oldWidget.data;\r\n  }\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula);\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}