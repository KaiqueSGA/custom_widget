{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Widgets = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Widgets, _TagoIOModule_1$defau);\n  var _super = _createSuper(Widgets);\n  function Widgets() {\n    _classCallCheck(this, Widgets);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Widgets, [{\n    key: \"create\",\n    value:\n    /**\r\n     * Create a Dashboard Widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetObj\r\n     */\n    function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dashboardID, widgetObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/widget/\"),\n                  method: \"POST\",\n                  body: widgetObj\n                });\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function create(_x, _x2) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\r\n     * Edit the Dashboard Widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param data\r\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dashboardID, widgetID, data) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/widget/\").concat(widgetID),\n                  method: \"PUT\",\n                  body: data\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function edit(_x3, _x4, _x5) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\r\n     * Delete the Dashboard Widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dashboardID, widgetID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/widget/\").concat(widgetID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _delete(_x6, _x7) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\r\n     * Get Info of the Dashboard Widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(dashboardID, widgetID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/widget/\").concat(widgetID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function info(_x8, _x9) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\r\n     * Get all data or resource list for the current widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param overwrite It can overwrite 'start_date', 'end_date', 'timezone' fields\r\n     */\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dashboardID, widgetID, params) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID),\n                  method: \"GET\",\n                  params: params\n                });\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getData(_x10, _x11, _x12) {\n        return _getData.apply(this, arguments);\n      }\n      return getData;\n    }()\n    /**\r\n     * Send value of variable for the current widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param data\r\n     * @param bypassBucket\r\n     */\n  }, {\n    key: \"sendData\",\n    value: function () {\n      var _sendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dashboardID, widgetID, data) {\n        var bypassBucket,\n          result,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                bypassBucket = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : false;\n                _context6.next = 3;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID),\n                  method: \"POST\",\n                  params: {\n                    bypass_bucket: bypassBucket\n                  },\n                  body: data\n                });\n              case 3:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function sendData(_x13, _x14, _x15) {\n        return _sendData.apply(this, arguments);\n      }\n      return sendData;\n    }()\n    /**\r\n     * Update value of variable for the current widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param data\r\n     * @param bypassBucket\r\n     */\n  }, {\n    key: \"editData\",\n    value: function () {\n      var _editData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(dashboardID, widgetID, data) {\n        var bypassBucket,\n          result,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                bypassBucket = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : false;\n                _context7.next = 3;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID, \"/data\"),\n                  method: \"PUT\",\n                  params: {\n                    bypass_bucket: bypassBucket\n                  },\n                  body: data\n                });\n              case 3:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function editData(_x16, _x17, _x18) {\n        return _editData.apply(this, arguments);\n      }\n      return editData;\n    }()\n    /**\r\n     * Update value of a resource for the current widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param resourceData Updated data for the resource\r\n     * @param options Additional options\r\n     */\n  }, {\n    key: \"editResource\",\n    value: function () {\n      var _editResource = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dashboardID, widgetID, resourceData, options) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID, \"/resource\"),\n                  method: \"PUT\",\n                  params: {\n                    widget_exec: options === null || options === void 0 ? void 0 : options.identifier\n                  },\n                  body: resourceData\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function editResource(_x19, _x20, _x21, _x22) {\n        return _editResource.apply(this, arguments);\n      }\n      return editResource;\n    }()\n    /**\r\n     * Run analysis without inserting data to bucket\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param data\r\n     */\n  }, {\n    key: \"runAnalysis\",\n    value: function () {\n      var _runAnalysis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(dashboardID, widgetID, data) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID, \"/run\"),\n                  method: \"POST\",\n                  body: data\n                });\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function runAnalysis(_x23, _x24, _x25) {\n        return _runAnalysis.apply(this, arguments);\n      }\n      return runAnalysis;\n    }()\n    /**\r\n     * Delete data by it's id, bucket and variable must be associeted with the widget\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     * @param ids\r\n     */\n  }, {\n    key: \"deleteData\",\n    value: function () {\n      var _deleteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(dashboardID, widgetID, ids) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.doRequest({\n                  path: \"/data/\".concat(dashboardID, \"/\").concat(widgetID),\n                  method: \"DELETE\",\n                  params: {\n                    ids: ids\n                  }\n                });\n              case 2:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function deleteData(_x26, _x27, _x28) {\n        return _deleteData.apply(this, arguments);\n      }\n      return deleteData;\n    }()\n    /**\r\n     * Generate a new token for the embed widgets\r\n     * It can regenerate the token if call it multi-times\r\n     * @param dashboardID Dashboard identification\r\n     * @param widgetID Widget identification\r\n     */\n  }, {\n    key: \"tokenGenerate\",\n    value: function () {\n      var _tokenGenerate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(dashboardID, widgetID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.doRequest({\n                  path: \"/dashboard/\".concat(dashboardID, \"/widget/\").concat(widgetID, \"/token\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function tokenGenerate(_x29, _x30) {\n        return _tokenGenerate.apply(this, arguments);\n      }\n      return tokenGenerate;\n    }()\n  }]);\n  return Widgets;\n}(TagoIOModule_1.default);\nexports.default = Widgets;","map":{"version":3,"mappings":"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","names":["Widgets","dashboardID","widgetObj","doRequest","path","method","body","result","widgetID","data","params","bypassBucket","bypass_bucket","resourceData","options","widget_exec","identifier","ids","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dashboard.Widgets.ts"],"sourcesContent":["import { Data, GenericID, GenericToken } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport {\r\n  EditDataModel,\r\n  EditDeviceResource,\r\n  EditResourceOptions,\r\n  GetDataModel,\r\n  PostDataModel,\r\n  WidgetInfo,\r\n} from \"./dashboards.types\";\r\n\r\nclass Widgets extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Create a Dashboard Widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetObj\r\n   */\r\n  public async create(dashboardID: GenericID, widgetObj: WidgetInfo): Promise<{ widget: GenericID }> {\r\n    const result = await this.doRequest<any>({\r\n      path: `/dashboard/${dashboardID}/widget/`,\r\n      method: \"POST\",\r\n      body: widgetObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Edit the Dashboard Widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param data\r\n   */\r\n  public async edit(dashboardID: GenericID, widgetID: GenericID, data: Partial<WidgetInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete the Dashboard Widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   */\r\n  public async delete(dashboardID: GenericID, widgetID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Info of the Dashboard Widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   */\r\n  public async info(dashboardID: GenericID, widgetID: GenericID): Promise<WidgetInfo> {\r\n    const result = await this.doRequest<WidgetInfo>({\r\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get all data or resource list for the current widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param overwrite It can overwrite 'start_date', 'end_date', 'timezone' fields\r\n   */\r\n  public async getData(dashboardID: GenericID, widgetID: GenericID, params?: GetDataModel): Promise<object> {\r\n    const result = await this.doRequest<object>({\r\n      path: `/data/${dashboardID}/${widgetID}`,\r\n      method: \"GET\",\r\n      params,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Send value of variable for the current widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param data\r\n   * @param bypassBucket\r\n   */\r\n  public async sendData(\r\n    dashboardID: GenericID,\r\n    widgetID: GenericID,\r\n    data: PostDataModel | PostDataModel[],\r\n    bypassBucket: boolean = false\r\n  ): Promise<object> {\r\n    const result = await this.doRequest<object>({\r\n      path: `/data/${dashboardID}/${widgetID}`,\r\n      method: \"POST\",\r\n      params: {\r\n        bypass_bucket: bypassBucket,\r\n      },\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update value of variable for the current widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param data\r\n   * @param bypassBucket\r\n   */\r\n  public async editData(\r\n    dashboardID: GenericID,\r\n    widgetID: GenericID,\r\n    data: EditDataModel | EditDataModel[],\r\n    bypassBucket: boolean = false\r\n  ): Promise<object> {\r\n    const result = await this.doRequest<object>({\r\n      path: `/data/${dashboardID}/${widgetID}/data`,\r\n      method: \"PUT\",\r\n      params: {\r\n        bypass_bucket: bypassBucket,\r\n      },\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update value of a resource for the current widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param resourceData Updated data for the resource\r\n   * @param options Additional options\r\n   */\r\n  public async editResource(\r\n    dashboardID: GenericID,\r\n    widgetID: GenericID,\r\n    resourceData: EditDeviceResource | EditDeviceResource[],\r\n    options?: EditResourceOptions\r\n  ): Promise<object> {\r\n    const result = await this.doRequest<object>({\r\n      path: `/data/${dashboardID}/${widgetID}/resource`,\r\n      method: \"PUT\",\r\n      params: {\r\n        widget_exec: options?.identifier,\r\n      },\r\n      body: resourceData,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Run analysis without inserting data to bucket\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param data\r\n   */\r\n  public async runAnalysis(dashboardID: GenericID, widgetID: GenericID, data: [object | Data]): Promise<object> {\r\n    const result = await this.doRequest<object>({\r\n      path: `/data/${dashboardID}/${widgetID}/run`,\r\n      method: \"POST\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete data by it's id, bucket and variable must be associeted with the widget\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   * @param ids\r\n   */\r\n  public async deleteData(dashboardID: GenericID, widgetID: GenericID, ids: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/data/${dashboardID}/${widgetID}`,\r\n      method: \"DELETE\",\r\n      params: {\r\n        ids,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate a new token for the embed widgets\r\n   * It can regenerate the token if call it multi-times\r\n   * @param dashboardID Dashboard identification\r\n   * @param widgetID Widget identification\r\n   */\r\n  public async tokenGenerate(dashboardID: GenericID, widgetID: GenericID): Promise<{ widget_token: GenericToken }> {\r\n    const result = await this.doRequest<{ widget_token: GenericToken }>({\r\n      path: `/dashboard/${dashboardID}/widget/${widgetID}/token`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Widgets;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}