{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Profile extends TagoIOModule_1.default {\n  /**\n   * Lists all the profiles in your account\n   */\n  async list() {\n    const result = await this.doRequest({\n      path: \"/profile\",\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Get Profile info\n   * @param profileID Profile identification\n   */\n  async info(profileID) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}`,\n      method: \"GET\"\n    });\n    if (result.info) result.info = (0, dateParser_1.default)(result.info, [\"created_at\", \"updated_at\"]);\n    return result;\n  }\n  /**\n   * Gets profile summary\n   */\n  async summary(profileID) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/summary`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Create a profile.\n   *\n   * If `allocate_free_resources` is passed as an option, all the free resources available\n   * in allocation will be allocated to the new profile.\n   *\n   * @param profileObj Profile object with data to be created\n   * @param options Options for the created profile.\n   */\n  async create(profileObj, options) {\n    const {\n      allocate_free_resources\n    } = options || {};\n    const params = {\n      ...(allocate_free_resources && {\n        allocate_free_resources\n      })\n    };\n    const result = await this.doRequest({\n      path: `/profile/`,\n      method: \"POST\",\n      body: profileObj,\n      params\n    });\n    return result;\n  }\n  /**\n   * Edits a profile\n   * @param profileObj Profile object with data to be changed\n   */\n  async edit(profileID, profileObj) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}`,\n      method: \"PUT\",\n      body: profileObj\n    });\n    return result;\n  }\n  /**\n   * Delete profile\n   * @param profileID Profile identification\n   */\n  async delete(profileID) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * List all the usage statistics of a profile.\n   *\n   * Usage statistics are cumulative: if a service was not used in a time period,\n   * the statistics for that time period will not be in the object.\n   *\n   * @param profileID Profile identification\n   * @param dateObj Object with date and their timezone\n   *\n   * @returns Array of cumulative usage statistics.\n   *\n   * @example\n   *\n   * ```json\n   * [\n   *   { \"time\": \"2022-01-01T00:00:00.000Z\", \"input\": 5 },\n   *   { \"time\": \"2022-01-02T00:00:00.000Z\", \"input\": 5, \"output\": 10 },\n   *   { \"time\": \"2022-01-03T00:00:00.000Z\", \"input\": 10, \"output\": 15 },\n   * ]\n   * ```\n   */\n  async usageStatisticList(profileID, dateObj) {\n    let result = await this.doRequest({\n      path: `/profile/${profileID}/statistics`,\n      method: \"GET\",\n      params: {\n        ...dateObj\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"time\"]));\n    return result;\n  }\n  /**\n   * Create a query for auditlog\n   * @param profileID Profile identification\n   * @param filterObj auditlog filter object\n   */\n  async auditLog(profileID, filterObj) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/auditlog`,\n      method: \"GET\",\n      params: filterObj || {}\n    });\n    result.events = result?.events.map(data => (0, dateParser_1.default)(data, [\"date\"]));\n    return result;\n  }\n  /**\n   * Fetches the information from an auditlog query\n   * @param profileID Profile identification\n   * @param queryId auditlog queryId from auditLogCreate\n   */\n  async auditLogQuery(profileID, queryId) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/auditlog/${queryId}`,\n      method: \"GET\"\n    });\n    result.events = result?.events.map(data => (0, dateParser_1.default)(data, [\"date\"]));\n    return result;\n  }\n  /**\n   * Gets the information of addons for the profile\n   * @param profileID Profile identification\n   */\n  async addonList(profileID) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/addons`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Sets the information of addons for the profile\n   * @param profileID Profile identification\n   * @param addonObj\n   */\n  async addonEdit(profileID, addonObj) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/addons`,\n      method: \"POST\",\n      body: addonObj\n    });\n    return result;\n  }\n  /**\n   * Sets the information of services for the profile. Services are the main resources\n   * in your profile, for example data input, data output, etc...\n   * @param profileID Profile identification\n   * @param serviceObj\n   */\n  async serviceEdit(profileID, serviceObj) {\n    const result = await this.doRequest({\n      path: `/profile/${profileID}/services`,\n      method: \"POST\",\n      body: serviceObj\n    });\n    return result;\n  }\n  /**\n   * Transforms the current token to another profile. The current profile will\n   * no longer have the current token, as the current token will be acquired by the profile informed.\n   * After this call is done, other requests using this token will work solely for the new profile, and\n   * no longer for the current profile.\n   * @param targetProfileID Profile identification\n   */\n  async transferTokenToAnotherProfile(targetProfileID) {\n    const result = await this.doRequest({\n      path: `/profile/switch/${targetProfileID}`,\n      method: \"PUT\"\n    });\n    return result;\n  }\n  /**\n   * Retrieves a list of all tokens\n   * @param profileID Profile ID\n   * @param queryObj Search query params\n   */\n  async tokenList(profileID, queryObj) {\n    let result = await this.doRequest({\n      path: `/profile/${profileID}/token`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"last_authorization\", \"expire_time\", \"created_at\"]));\n    return result;\n  }\n  /**\n   * Generates and retrieves a new token\n   * @param profileID Profile ID\n   * @param tokenParams Token params for new token\n   */\n  async tokenCreate(profileID, tokenParams) {\n    let result = await this.doRequest({\n      path: `/profile/${profileID}/token`,\n      method: \"POST\",\n      body: tokenParams\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n    return result;\n  }\n  /**\n   * Deletes a token\n   * @param token Token\n   */\n  async tokenDelete(token) {\n    const result = await this.doRequest({\n      path: `/profile/token/${token}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Remove an add-on from a profile at the end of the billing cycle.\n   *\n   * @throws If profile ID is invalid.\n   * @throws If profile doesn't have the add-on.\n   *\n   * @returns Success message.\n   */\n  async removeAddOn(profileId, addon) {\n    const result = await this.doRequest({\n      path: `/profile/${profileId}/${addon}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n}\nexports.default = Profile;","map":{"version":3,"mappings":"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","names":["Profile","TagoIOModule_1","list","result","doRequest","path","method","info","profileID","summary","create","profileObj","options","allocate_free_resources","params","body","edit","delete","usageStatisticList","dateObj","map","data","auditLog","filterObj","events","auditLogQuery","queryId","addonList","addonEdit","addonObj","serviceEdit","serviceObj","transferTokenToAnotherProfile","targetProfileID","tokenList","queryObj","page","fields","filter","amount","orderBy","tokenCreate","tokenParams","tokenDelete","token","removeAddOn","profileId","addon","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Profile.ts"],"sourcesContent":["import {\n  GenericID,\n  GenericToken,\n  ListTokenQuery,\n  TokenCreateResponse,\n  TokenData,\n  TokenDataList,\n} from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { BillingAddOn } from \"./billing.types\";\nimport type {\n  AddonInfo,\n  AuditLog,\n  AuditLogFilter,\n  ProfileInfo,\n  ProfileListInfo,\n  ProfileSummary,\n  StatisticsDate,\n  UsageStatistic,\n} from \"./profile.types\";\n\nclass Profile extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Lists all the profiles in your account\n   */\n  public async list(): Promise<ProfileListInfo[]> {\n    const result = await this.doRequest<ProfileListInfo[]>({\n      path: \"/profile\",\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Profile info\n   * @param profileID Profile identification\n   */\n  public async info(profileID: GenericID): Promise<ProfileInfo> {\n    const result = await this.doRequest<ProfileInfo>({\n      path: `/profile/${profileID}`,\n      method: \"GET\",\n    });\n\n    if (result.info) result.info = dateParser(result.info, [\"created_at\", \"updated_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Gets profile summary\n   */\n  public async summary(profileID: GenericID): Promise<ProfileSummary> {\n    const result = await this.doRequest<ProfileSummary>({\n      path: `/profile/${profileID}/summary`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a profile.\n   *\n   * If `allocate_free_resources` is passed as an option, all the free resources available\n   * in allocation will be allocated to the new profile.\n   *\n   * @param profileObj Profile object with data to be created\n   * @param options Options for the created profile.\n   */\n  public async create(\n    profileObj: { name: string },\n    options?: { allocate_free_resources?: boolean }\n  ): Promise<{ id: GenericID }> {\n    const { allocate_free_resources } = options || {};\n    const params = {\n      ...(allocate_free_resources && { allocate_free_resources }),\n    };\n\n    const result = await this.doRequest<{ id: GenericID }>({\n      path: `/profile/`,\n      method: \"POST\",\n      body: profileObj,\n      params,\n    });\n\n    return result;\n  }\n\n  /**\n   * Edits a profile\n   * @param profileObj Profile object with data to be changed\n   */\n  public async edit(profileID: GenericID, profileObj: Partial<ProfileInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}`,\n      method: \"PUT\",\n      body: profileObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete profile\n   * @param profileID Profile identification\n   */\n  public async delete(profileID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * List all the usage statistics of a profile.\n   *\n   * Usage statistics are cumulative: if a service was not used in a time period,\n   * the statistics for that time period will not be in the object.\n   *\n   * @param profileID Profile identification\n   * @param dateObj Object with date and their timezone\n   *\n   * @returns Array of cumulative usage statistics.\n   *\n   * @example\n   *\n   * ```json\n   * [\n   *   { \"time\": \"2022-01-01T00:00:00.000Z\", \"input\": 5 },\n   *   { \"time\": \"2022-01-02T00:00:00.000Z\", \"input\": 5, \"output\": 10 },\n   *   { \"time\": \"2022-01-03T00:00:00.000Z\", \"input\": 10, \"output\": 15 },\n   * ]\n   * ```\n   */\n  public async usageStatisticList(profileID: GenericID, dateObj?: StatisticsDate): Promise<UsageStatistic[]> {\n    let result = await this.doRequest<UsageStatistic[]>({\n      path: `/profile/${profileID}/statistics`,\n      method: \"GET\",\n      params: {\n        ...dateObj,\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"time\"]));\n\n    return result;\n  }\n\n  /**\n   * Create a query for auditlog\n   * @param profileID Profile identification\n   * @param filterObj auditlog filter object\n   */\n  public async auditLog(profileID: GenericID, filterObj?: AuditLogFilter): Promise<AuditLog> {\n    const result = await this.doRequest<AuditLog>({\n      path: `/profile/${profileID}/auditlog`,\n      method: \"GET\",\n      params: filterObj || {},\n    });\n\n    result.events = result?.events.map((data) => dateParser(data, [\"date\"]));\n    return result;\n  }\n\n  /**\n   * Fetches the information from an auditlog query\n   * @param profileID Profile identification\n   * @param queryId auditlog queryId from auditLogCreate\n   */\n  public async auditLogQuery(profileID: GenericID, queryId?: string): Promise<AuditLog> {\n    const result = await this.doRequest<AuditLog>({\n      path: `/profile/${profileID}/auditlog/${queryId}`,\n      method: \"GET\",\n    });\n\n    result.events = result?.events.map((data) => dateParser(data, [\"date\"]));\n    return result;\n  }\n\n  /**\n   * Gets the information of addons for the profile\n   * @param profileID Profile identification\n   */\n  public async addonList(profileID: GenericID): Promise<AddonInfo> {\n    const result = await this.doRequest<AddonInfo>({\n      path: `/profile/${profileID}/addons`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Sets the information of addons for the profile\n   * @param profileID Profile identification\n   * @param addonObj\n   */\n  public async addonEdit(profileID: GenericID, addonObj: Partial<AddonInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}/addons`,\n      method: \"POST\",\n      body: addonObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Sets the information of services for the profile. Services are the main resources\n   * in your profile, for example data input, data output, etc...\n   * @param profileID Profile identification\n   * @param serviceObj\n   */\n  public async serviceEdit(profileID: GenericID, serviceObj: object): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}/services`,\n      method: \"POST\",\n      body: serviceObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Transforms the current token to another profile. The current profile will\n   * no longer have the current token, as the current token will be acquired by the profile informed.\n   * After this call is done, other requests using this token will work solely for the new profile, and\n   * no longer for the current profile.\n   * @param targetProfileID Profile identification\n   */\n  public async transferTokenToAnotherProfile(targetProfileID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/switch/${targetProfileID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list of all tokens\n   * @param profileID Profile ID\n   * @param queryObj Search query params\n   */\n  public async tokenList(profileID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<TokenDataList>[]> {\n    let result = await this.doRequest<Partial<TokenDataList>[]>({\n      path: `/profile/${profileID}/token`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"last_authorization\", \"expire_time\", \"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token\n   * @param profileID Profile ID\n   * @param tokenParams Token params for new token\n   */\n  public async tokenCreate(profileID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\n    let result = await this.doRequest<TokenCreateResponse>({\n      path: `/profile/${profileID}/token`,\n      method: \"POST\",\n      body: tokenParams,\n    });\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Deletes a token\n   * @param token Token\n   */\n  public async tokenDelete(token: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/token/${token}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Remove an add-on from a profile at the end of the billing cycle.\n   *\n   * @throws If profile ID is invalid.\n   * @throws If profile doesn't have the add-on.\n   *\n   * @returns Success message.\n   */\n  public async removeAddOn(profileId: GenericID, addon: BillingAddOn): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileId}/${addon}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n}\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}