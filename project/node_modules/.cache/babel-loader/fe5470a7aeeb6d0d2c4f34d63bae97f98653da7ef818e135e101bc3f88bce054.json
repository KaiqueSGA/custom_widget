{"ast":null,"code":"\"use strict\";\n\n// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Converts the OLD FORMULA to BLUEPRINT FORMULA\n// ? ====================================================================================\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction convertFormula(oldFormula) {\n  if (!oldFormula || Object.keys(oldFormula).length === 0) {\n    return null;\n  }\n  const newFormula = {\n    enable: oldFormula?.enable,\n    formula_type: \"fixed\",\n    unit_type: oldFormula?.unit_type,\n    value: oldFormula?.formula\n  };\n  if (oldFormula.unit_type) {\n    // fixed, variable, origin\n    newFormula.unit_type = oldFormula.unit_type;\n  }\n  if (oldFormula.unit) {\n    // fixed unit (F, C, ...)\n    newFormula.fixed_unit = oldFormula.unit;\n  }\n  if (oldFormula?.formula_type === \"dynamic\") {\n    // uses variable for formula instead of value\n    newFormula.formula_type = \"variable\";\n  }\n  if (oldFormula?.formula_variable) {\n    const oldVariable = oldFormula.formula_variable;\n    newFormula.variable = {\n      origin: oldVariable.origin?.id || oldVariable?.origin,\n      variable: oldVariable?.variable\n    };\n    if (typeof newFormula.variable.origin !== \"string\") {\n      // origin has to be a string. If it's not, then something went wrong\n      // during the formula conversion.\n      newFormula.variable = null;\n    }\n  }\n  return newFormula;\n}\nexports.default = convertFormula;","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;;;;AAEA,SAASA,cAAc,CAACC,UAAe;EACrC,IAAI,CAACA,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACvD,OAAO,IAAI;;EAGb,MAAMC,UAAU,GAAQ;IACtBC,MAAM,EAAEL,UAAU,EAAEK,MAAM;IAC1BC,YAAY,EAAE,OAAO;IACrBC,SAAS,EAAEP,UAAU,EAAEO,SAAS;IAChCC,KAAK,EAAER,UAAU,EAAES;GACpB;EAED,IAAIT,UAAU,CAACO,SAAS,EAAE;IACxB;IACAH,UAAU,CAACG,SAAS,GAAGP,UAAU,CAACO,SAAS;;EAG7C,IAAIP,UAAU,CAACU,IAAI,EAAE;IACnB;IACAN,UAAU,CAACO,UAAU,GAAGX,UAAU,CAACU,IAAI;;EAGzC,IAAIV,UAAU,EAAEM,YAAY,KAAK,SAAS,EAAE;IAC1C;IACAF,UAAU,CAACE,YAAY,GAAG,UAAU;;EAGtC,IAAIN,UAAU,EAAEY,gBAAgB,EAAE;IAChC,MAAMC,WAAW,GAAGb,UAAU,CAACY,gBAAgB;IAC/CR,UAAU,CAACU,QAAQ,GAAG;MACpBC,MAAM,EAAEF,WAAW,CAACE,MAAM,EAAEC,EAAE,IAAIH,WAAW,EAAEE,MAAM;MACrDD,QAAQ,EAAED,WAAW,EAAEC;KACxB;IAED,IAAI,OAAOV,UAAU,CAACU,QAAQ,CAACC,MAAM,KAAK,QAAQ,EAAE;MAClD;MACA;MACAX,UAAU,CAACU,QAAQ,GAAG,IAAI;;;EAI9B,OAAOV,UAAU;AACnB;AAEAa,kBAAelB,cAAc","names":["convertFormula","oldFormula","Object","keys","length","newFormula","enable","formula_type","unit_type","value","formula","unit","fixed_unit","formula_variable","oldVariable","variable","origin","id","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\common\\convertFormula.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Converts the OLD FORMULA to BLUEPRINT FORMULA\n// ? ====================================================================================\n\nfunction convertFormula(oldFormula: any): any {\n  if (!oldFormula || Object.keys(oldFormula).length === 0) {\n    return null;\n  }\n\n  const newFormula: any = {\n    enable: oldFormula?.enable,\n    formula_type: \"fixed\",\n    unit_type: oldFormula?.unit_type,\n    value: oldFormula?.formula,\n  };\n\n  if (oldFormula.unit_type) {\n    // fixed, variable, origin\n    newFormula.unit_type = oldFormula.unit_type;\n  }\n\n  if (oldFormula.unit) {\n    // fixed unit (F, C, ...)\n    newFormula.fixed_unit = oldFormula.unit;\n  }\n\n  if (oldFormula?.formula_type === \"dynamic\") {\n    // uses variable for formula instead of value\n    newFormula.formula_type = \"variable\";\n  }\n\n  if (oldFormula?.formula_variable) {\n    const oldVariable = oldFormula.formula_variable;\n    newFormula.variable = {\n      origin: oldVariable.origin?.id || oldVariable?.origin,\n      variable: oldVariable?.variable,\n    };\n\n    if (typeof newFormula.variable.origin !== \"string\") {\n      // origin has to be a string. If it's not, then something went wrong\n      // during the formula conversion.\n      newFormula.variable = null;\n    }\n  }\n\n  return newFormula;\n}\n\nexport default convertFormula;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}