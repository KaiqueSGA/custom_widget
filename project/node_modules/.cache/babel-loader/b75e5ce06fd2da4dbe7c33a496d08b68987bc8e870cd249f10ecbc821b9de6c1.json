{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Notifications extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list with all actions from the account\n   * @param queryObj Search query params\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/notification/\",\n      method: \"GET\",\n      params: queryObj\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\"]));\n    return result;\n  }\n  /**\n   * Mark notifications as read\n   * @param notificationIDS An array of ids or a single id\n   */\n  async markAsRead(notificationIDS) {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n    const result = await this.doRequest({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: true\n      }\n    });\n    return result;\n  }\n  /**\n   * Mark notifications as unread\n   * @param notificationIDS An array of ids or a single id\n   */\n  async markAsUnread(notificationIDS) {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n    const result = await this.doRequest({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: false\n      }\n    });\n    return result;\n  }\n  /**\n   * Mark all notifications as read\n   */\n  async markAllAsRead() {\n    const result = await this.doRequest({\n      path: \"/notification/markallread\",\n      method: \"PUT\"\n    });\n    return result;\n  }\n  /**\n   * Acknowledge notification button pressed\n   * @param notificationID ID of the notification\n   * @param buttonID ID of the button\n   */\n  async notificationButton(notificationID, buttonID) {\n    const result = await this.doRequest({\n      path: `/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\"\n    });\n    return result;\n  }\n  /**\n   * Create a notification\n   * @param notificationData Notification Object\n   * @example\n   * ```json\n   * notificationData: [\n   *   {\n   *     title: \"My notification title\",\n   *     message: \"My notification message\"\n   *   }\n   * ]\n   * ```\n   */\n  async create(notificationData) {\n    const result = await this.doRequest({\n      path: `/notification`,\n      method: \"POST\",\n      body: {\n        ...notificationData\n      }\n    });\n    return result;\n  }\n  /**\n   * Remove a notification\n   * @param notificationID Notification identification\n   */\n  async remove(notificationID) {\n    const result = await this.doRequest({\n      path: `/notification/${notificationID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Register device Token on Push Notification Service\n   * @param deviceToken Device token\n   * @param platform Platform of device\n   */\n  async registerDevice(deviceToken, platform) {\n    const result = await this.doRequest({\n      path: `/notification/push/register`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken,\n        platform\n      }\n    });\n    return result;\n  }\n  /**\n   * Unregister device Token on Push Notification Service\n   * @param deviceToken Device token\n   */\n  async unRegisterDevice(deviceToken) {\n    const result = await this.doRequest({\n      path: `/notification/push/unregister`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken\n      }\n    });\n    return result;\n  }\n}\nexports.default = Notifications;","map":{"version":3,"mappings":"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","names":["Notifications","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","map","data","markAsRead","notificationIDS","Array","isArray","body","notification_ids","read","markAsUnread","markAllAsRead","notificationButton","notificationID","buttonID","create","notificationData","remove","registerDevice","deviceToken","platform","device_token","unRegisterDevice","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Notifications.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { NotificationCreate, NotificationInfo, NotificationQuery } from \"./notifications.types\";\n\nclass Notifications extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all actions from the account\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: NotificationQuery): Promise<NotificationInfo[]> {\n    let result = await this.doRequest<NotificationInfo[]>({\n      path: \"/notification/\",\n      method: \"GET\",\n      params: queryObj,\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Mark notifications as read\n   * @param notificationIDS An array of ids or a single id\n   */\n  public async markAsRead(notificationIDS: GenericID[] | GenericID): Promise<string> {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: true,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark notifications as unread\n   * @param notificationIDS An array of ids or a single id\n   */\n  public async markAsUnread(notificationIDS: GenericID[] | GenericID): Promise<string> {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: false,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark all notifications as read\n   */\n  public async markAllAsRead(): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: \"/notification/markallread\",\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Acknowledge notification button pressed\n   * @param notificationID ID of the notification\n   * @param buttonID ID of the button\n   */\n  public async notificationButton(notificationID: GenericID, buttonID: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a notification\n   * @param notificationData Notification Object\n   * @example\n   * ```json\n   * notificationData: [\n   *   {\n   *     title: \"My notification title\",\n   *     message: \"My notification message\"\n   *   }\n   * ]\n   * ```\n   */\n  public async create(notificationData: NotificationCreate): Promise<{ id: GenericID }> {\n    const result = await this.doRequest<{ id: GenericID }>({\n      path: `/notification`,\n      method: \"POST\",\n      body: { ...notificationData },\n    });\n\n    return result;\n  }\n\n  /**\n   * Remove a notification\n   * @param notificationID Notification identification\n   */\n  public async remove(notificationID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/${notificationID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Register device Token on Push Notification Service\n   * @param deviceToken Device token\n   * @param platform Platform of device\n   */\n  public async registerDevice(deviceToken: GenericToken, platform: \"ios\" | \"android\"): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/push/register`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken,\n        platform,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Unregister device Token on Push Notification Service\n   * @param deviceToken Device token\n   */\n  public async unRegisterDevice(deviceToken: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/push/unregister`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken,\n      },\n    });\n\n    return result;\n  }\n}\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}