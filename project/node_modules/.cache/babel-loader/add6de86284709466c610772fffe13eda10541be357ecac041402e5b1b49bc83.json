{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst convertFormula_1 = __importDefault(require(\"./common/convertFormula\"));\nconst layoutMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_units: !!oldDisplay?.show_unit,\n      show_values: !oldDisplay?.hide_values,\n      show_variables: !oldDisplay?.hide_variables,\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"icon\"\n  };\n  const variables = [];\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n        const {\n          show_thousand,\n          decimals\n        } = oldDisplay.vars_format?.[key] || {};\n        const numberFormat = show_thousand || decimals ? {\n          decimals,\n          show_thousand\n        } : null;\n        const alias = oldDisplay.vars_labels?.[key];\n        const formula = (0, convertFormula_1.default)(oldDisplay.vars_formula?.[key]);\n        const iconConditions = oldDisplay?.conditions?.[key] || [];\n        const colorConditions = iconConditions.map(e => ({\n          color: e?.color,\n          condition: e?.condition\n        }));\n        const layout = oldDisplay?.layout?.[key] || null;\n        /**\r\n         * If none column or row has been found, it should takes the 0 position\r\n         * If two variables has the same position doesn't matter\r\n         */\n        const row = layout?.row || 0;\n        const column = layout?.column || 0;\n        const position = layout ? layoutMatrix[row][column] : 10;\n        variables.push({\n          // Not sent to backend, position tracking for sorting the variables\n          _position: position,\n          origin: item.origin,\n          variable,\n          ...(alias ? {\n            alias\n          } : {}),\n          ...(numberFormat ? {\n            number_format: numberFormat\n          } : {}),\n          ...(formula ? {\n            formula\n          } : {}),\n          ...(iconConditions ? {\n            icon_conditions: iconConditions\n          } : {}),\n          ...(colorConditions ? {\n            color_conditions: colorConditions\n          } : {})\n        });\n      }\n    }\n  }\n  /**\r\n   * Sort by the position of the icon\r\n   */\n  variables.sort((a, b) => {\n    if (a._position > b._position) {\n      return 1;\n    }\n    if (a._position < b._position) {\n      return -1;\n    }\n    return 0;\n  });\n  /**\r\n   * Remove the _position property\r\n   */\n  newStructure.display.variables = variables.map(e => {\n    delete e._position;\n    return e;\n  });\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula || widget?.display?.numberformat || widget?.display?.hide_values || widget?.display?.hide_variables) && !widget?.display?.variables;\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["layoutMatrix","convert","oldWidget","oldDisplay","display","newStructure","dashboard","header_buttons","help","show_units","show_unit","show_values","hide_values","show_variables","hide_variables","variables","id","label","realtime","type","Array","isArray","data","item","is_hide","variable","key","origin","show_thousand","decimals","vars_format","numberFormat","alias","vars_labels","formula","vars_formula","iconConditions","conditions","colorConditions","map","e","color","condition","layout","row","column","position","push","_position","number_format","icon_conditions","color_conditions","sort","a","b","exports","isOldStructure","widget","isOld","numberformat"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\icon.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old ICON to new ICON\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport convertFormula from \"./common/convertFormula\";\r\n\r\nconst layoutMatrix = [\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9],\r\n];\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  const newStructure: any = {\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      show_units: !!oldDisplay?.show_unit,\r\n      show_values: !oldDisplay?.hide_values,\r\n      show_variables: !oldDisplay?.hide_variables,\r\n      variables: [],\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"icon\",\r\n  };\r\n\r\n  const variables = [];\r\n\r\n  if (Array.isArray(oldWidget.data)) {\r\n    newStructure.data = oldWidget.data; // transfers the .data property\r\n\r\n    for (const item of oldWidget.data) {\r\n      if (item.is_hide) {\r\n        // is_hide items are not visible in the columns, so we cannot\r\n        // put them in the variables array\r\n        continue;\r\n      }\r\n\r\n      for (const variable of item.variables) {\r\n        const key = `${item.origin}${variable}`;\r\n\r\n        const { show_thousand, decimals } = oldDisplay.vars_format?.[key] || {};\r\n        const numberFormat =\r\n          show_thousand || decimals\r\n            ? {\r\n                decimals,\r\n                show_thousand,\r\n              }\r\n            : null;\r\n\r\n        const alias = oldDisplay.vars_labels?.[key];\r\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\r\n\r\n        const iconConditions = oldDisplay?.conditions?.[key] || [];\r\n        const colorConditions = iconConditions.map((e: any) => ({\r\n          color: e?.color,\r\n          condition: e?.condition,\r\n        }));\r\n\r\n        const layout = oldDisplay?.layout?.[key] || null;\r\n        /**\r\n         * If none column or row has been found, it should takes the 0 position\r\n         * If two variables has the same position doesn't matter\r\n         */\r\n        const row = layout?.row || 0;\r\n        const column = layout?.column || 0;\r\n        const position = layout ? layoutMatrix[row][column] : 10;\r\n\r\n        variables.push({\r\n          // Not sent to backend, position tracking for sorting the variables\r\n          _position: position,\r\n          origin: item.origin,\r\n          variable,\r\n          ...(alias ? { alias } : {}),\r\n          ...(numberFormat ? { number_format: numberFormat } : {}),\r\n          ...(formula ? { formula } : {}),\r\n          ...(iconConditions ? { icon_conditions: iconConditions } : {}),\r\n          ...(colorConditions ? { color_conditions: colorConditions } : {}),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort by the position of the icon\r\n   */\r\n  variables.sort((a, b) => {\r\n    if (a._position > b._position) {\r\n      return 1;\r\n    }\r\n    if (a._position < b._position) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  /**\r\n   * Remove the _position property\r\n   */\r\n  newStructure.display.variables = variables.map((e) => {\r\n    delete e._position;\r\n    return e;\r\n  });\r\n\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld =\r\n    !!(\r\n      widget?.display?.vars_labels ||\r\n      widget?.display?.vars_format ||\r\n      widget?.display?.vars_formula ||\r\n      widget?.display?.numberformat ||\r\n      widget?.display?.hide_values ||\r\n      widget?.display?.hide_variables\r\n    ) && !widget?.display?.variables;\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}