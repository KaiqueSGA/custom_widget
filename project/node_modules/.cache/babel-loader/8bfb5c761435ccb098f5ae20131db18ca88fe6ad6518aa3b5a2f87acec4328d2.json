{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Console_1 = __importDefault(require(\"../Services/Console\"));\nvar apiSocket_1 = __importStar(require(\"../../infrastructure/apiSocket\"));\nvar JSONParseSafe_1 = require(\"../../common/JSONParseSafe\");\n/**\r\n * This class is used to instance an analysis\r\n *\r\n * It's can run locally or on TagoIO.\r\n */\nvar Analysis = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Analysis, _TagoIOModule_1$defau);\n  var _super = _createSuper(Analysis);\n  function Analysis(analysis) {\n    var _this;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      token: \"unknown\"\n    };\n    _classCallCheck(this, Analysis);\n    _this = _super.call(this, params);\n    _this.started = false;\n    _this.analysis = analysis;\n    if (params.autostart !== false) {\n      _this.start();\n    }\n    return _this;\n  }\n  _createClass(Analysis, [{\n    key: \"start\",\n    value: function start() {\n      if (this.started) {\n        return;\n      } else {\n        this.started = true;\n      }\n      if (!process.env.T_ANALYSIS_CONTEXT) {\n        this.localRuntime();\n      } else {\n        this.runOnTagoIO();\n      }\n    }\n  }, {\n    key: \"runOnTagoIO\",\n    value: function runOnTagoIO() {\n      if (!this.analysis || typeof this.analysis !== \"function\") {\n        throw \"Invalid analysis function\";\n      }\n      var context = {\n        log: console.log,\n        token: process.env.T_ANALYSIS_TOKEN,\n        environment: (0, JSONParseSafe_1.JSONParseSafe)(process.env.T_ANALYSIS_ENV, []),\n        analysis_id: process.env.T_ANALYSIS_ID\n      };\n      var data = (0, JSONParseSafe_1.JSONParseSafe)(process.env.T_ANALYSIS_DATA, []);\n      this.analysis(context, data);\n    }\n  }, {\n    key: \"stringifyMsg\",\n    value: function stringifyMsg(msg) {\n      return typeof msg === \"object\" && !Array.isArray(msg) ? JSON.stringify(msg) : String(msg);\n    }\n    /**\r\n     * Run Analysis\r\n     * @internal\r\n     * @param environment\r\n     * @param data\r\n     * @param analysis_id\r\n     * @param token\r\n     */\n  }, {\n    key: \"runLocal\",\n    value: function runLocal(environment, data, analysis_id, token) {\n      var _this2 = this;\n      if (!this.analysis || typeof this.analysis !== \"function\") {\n        throw \"Invalid analysis function\";\n      }\n      var tagoConsole = new Console_1.default({\n        token: token,\n        region: this.params.region\n      });\n      var log = function log() {\n        var _args$;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (!process.env.T_ANALYSIS_AUTO_RUN) {\n          var _console;\n          (_console = console).log.apply(_console, args);\n        }\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && _args$.stack) {\n          args[0] = args[0].stack;\n        }\n        var argsStrings = Object.keys(args).map(function (x) {\n          return _this2.stringifyMsg(args[x]);\n        });\n        tagoConsole.log(argsStrings.join(\" \")).catch(console.error);\n      };\n      var context = {\n        log: log,\n        token: token,\n        environment: environment,\n        analysis_id: analysis_id\n      };\n      if (this.analysis.constructor.name === \"AsyncFunction\") {\n        this.analysis(context, data || []).catch(log);\n      } else {\n        try {\n          this.analysis(context, data || []);\n        } catch (error) {\n          log(error);\n        }\n      }\n    }\n  }, {\n    key: \"localRuntime\",\n    value: function localRuntime() {\n      var _this3 = this;\n      if (this.params.token === \"unknown\") {\n        throw \"To run analysis locally, you needs a token\";\n      }\n      var socket = (0, apiSocket_1.default)(this.params);\n      socket.on(\"connect\", function () {\n        return console.info(\"Connected to TagoIO, Getting analysis information...\");\n      });\n      socket.on(\"disconnect\", function () {\n        return console.info(\"Disconnected from TagoIO.\\n\\n\");\n      });\n      socket.on(\"error\", function (e) {\n        return console.error(\"Connection error\", e);\n      });\n      socket.on(\"ready\", function (analysis) {\n        return console.info(\"Analysis [\".concat(analysis.name, \"] Started.\"));\n      });\n      socket.on(apiSocket_1.channels.analysisTrigger, function (scope) {\n        _this3.runLocal(scope.environment, scope.data, scope.analysis_id, scope.token);\n      });\n    }\n  }], [{\n    key: \"use\",\n    value: function use(analysis, params) {\n      return new Analysis(analysis, params);\n    }\n  }]);\n  return Analysis;\n}(TagoIOModule_1.default);\nexports.default = Analysis;","map":{"version":3,"mappings":"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","names":["Analysis","analysis","params","token","autostart","start","started","process","env","T_ANALYSIS_CONTEXT","localRuntime","runOnTagoIO","context","log","console","T_ANALYSIS_TOKEN","environment","T_ANALYSIS_ENV","analysis_id","T_ANALYSIS_ID","data","T_ANALYSIS_DATA","msg","Array","isArray","JSON","stringify","String","tagoConsole","Console_1","region","args","T_ANALYSIS_AUTO_RUN","stack","argsStrings","Object","keys","map","x","stringifyMsg","join","catch","error","constructor","name","socket","on","info","e","apiSocket_1","analysisTrigger","scope","runLocal","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Analysis\\Analysis.ts"],"sourcesContent":["import TagoIOModule from \"../../common/TagoIOModule\";\r\nimport ConsoleService from \"../Services/Console\";\r\nimport apiSocket, { channels } from \"../../infrastructure/apiSocket\";\r\nimport { AnalysisConstructorParams, analysisFunction, AnalysisEnvironment } from \"./analysis.types\";\r\nimport { JSONParseSafe } from \"../../common/JSONParseSafe\";\r\n\r\n/**\r\n * This class is used to instance an analysis\r\n *\r\n * It's can run locally or on TagoIO.\r\n */\r\nclass Analysis extends TagoIOModule<AnalysisConstructorParams> {\r\n  private analysis: analysisFunction;\r\n  public started = false;\r\n\r\n  constructor(analysis: analysisFunction, params: AnalysisConstructorParams = { token: \"unknown\" }) {\r\n    super(params);\r\n    this.analysis = analysis;\r\n\r\n    if (params.autostart !== false) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  public start() {\r\n    if (this.started) {\r\n      return;\r\n    } else {\r\n      this.started = true;\r\n    }\r\n\r\n    if (!process.env.T_ANALYSIS_CONTEXT) {\r\n      this.localRuntime();\r\n    } else {\r\n      this.runOnTagoIO();\r\n    }\r\n  }\r\n\r\n  private runOnTagoIO() {\r\n    if (!this.analysis || typeof this.analysis !== \"function\") {\r\n      throw \"Invalid analysis function\";\r\n    }\r\n\r\n    const context = {\r\n      log: console.log,\r\n      token: process.env.T_ANALYSIS_TOKEN,\r\n      environment: JSONParseSafe(process.env.T_ANALYSIS_ENV, []),\r\n      analysis_id: process.env.T_ANALYSIS_ID,\r\n    };\r\n\r\n    const data = JSONParseSafe(process.env.T_ANALYSIS_DATA, []);\r\n\r\n    this.analysis(context, data);\r\n  }\r\n\r\n  private stringifyMsg(msg: any) {\r\n    return typeof msg === \"object\" && !Array.isArray(msg) ? JSON.stringify(msg) : String(msg);\r\n  }\r\n\r\n  /**\r\n   * Run Analysis\r\n   * @internal\r\n   * @param environment\r\n   * @param data\r\n   * @param analysis_id\r\n   * @param token\r\n   */\r\n  private runLocal(environment: AnalysisEnvironment[], data: any[], analysis_id: string, token: string) {\r\n    if (!this.analysis || typeof this.analysis !== \"function\") {\r\n      throw \"Invalid analysis function\";\r\n    }\r\n\r\n    const tagoConsole = new ConsoleService({ token, region: this.params.region });\r\n\r\n    const log = (...args: any[]) => {\r\n      if (!process.env.T_ANALYSIS_AUTO_RUN) {\r\n        console.log(...args);\r\n      }\r\n\r\n      if (args[0]?.stack) {\r\n        args[0] = args[0].stack;\r\n      }\r\n\r\n      const argsStrings = Object.keys(args).map((x: any) => this.stringifyMsg(args[x]));\r\n\r\n      tagoConsole.log(argsStrings.join(\" \")).catch(console.error);\r\n    };\r\n\r\n    const context = {\r\n      log,\r\n      token,\r\n      environment,\r\n      analysis_id,\r\n    };\r\n\r\n    if (this.analysis.constructor.name === \"AsyncFunction\") {\r\n      this.analysis(context, data || []).catch(log);\r\n    } else {\r\n      try {\r\n        this.analysis(context, data || []);\r\n      } catch (error) {\r\n        log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private localRuntime() {\r\n    if (this.params.token === \"unknown\") {\r\n      throw \"To run analysis locally, you needs a token\";\r\n    }\r\n\r\n    const socket = apiSocket(this.params);\r\n\r\n    socket.on(\"connect\", () => console.info(\"Connected to TagoIO, Getting analysis information...\"));\r\n\r\n    socket.on(\"disconnect\", () => console.info(\"Disconnected from TagoIO.\\n\\n\"));\r\n\r\n    socket.on(\"error\", (e: Error) => console.error(\"Connection error\", e));\r\n\r\n    socket.on(\"ready\", (analysis: any) => console.info(`Analysis [${analysis.name}] Started.`));\r\n\r\n    socket.on(channels.analysisTrigger, (scope: any) => {\r\n      this.runLocal(scope.environment, scope.data, scope.analysis_id, scope.token);\r\n    });\r\n  }\r\n\r\n  public static use(analysis: analysisFunction, params?: AnalysisConstructorParams) {\r\n    return new Analysis(analysis, params);\r\n  }\r\n}\r\n\r\nexport default Analysis;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}