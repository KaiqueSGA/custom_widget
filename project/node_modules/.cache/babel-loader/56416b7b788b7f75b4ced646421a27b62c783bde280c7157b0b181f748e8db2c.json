{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst angular_1 = require(\"./angular\");\nconst areachart_1 = require(\"./areachart\");\nconst card_1 = require(\"./card\");\nconst clock_1 = require(\"./clock\");\nconst compose_1 = require(\"./compose\");\nconst custom_1 = require(\"./custom\");\nconst cylinder_1 = require(\"./cylinder\");\nconst dial_1 = require(\"./dial\");\nconst display_1 = require(\"./display\");\nconst dynamic_table_1 = require(\"./dynamic_table\");\nconst grainbin_1 = require(\"./grainbin\");\nconst heatmap_1 = require(\"./heatmap\");\nconst horizontalbarchart_1 = require(\"./horizontalbarchart\");\nconst icon_1 = require(\"./icon\");\nconst image_1 = require(\"./image\");\nconst imagemarker_1 = require(\"./imagemarker\");\nconst inputcontrol_1 = require(\"./inputcontrol\");\nconst inputform_1 = require(\"./inputform\");\nconst keypad_1 = require(\"./keypad\");\nconst linechart_1 = require(\"./linechart\");\nconst map_1 = require(\"./map\");\nconst multipleaxischart_1 = require(\"./multipleaxischart\");\nconst note_1 = require(\"./note\");\nconst pie_1 = require(\"./pie\");\nconst pushbutton_1 = require(\"./pushbutton\");\nconst semidonut_1 = require(\"./semidonut\");\nconst solid_1 = require(\"./solid\");\nconst statictable_1 = require(\"./statictable\");\nconst stepbutton_1 = require(\"./stepbutton\");\nconst tile_1 = require(\"./tile\");\nconst verticalbarchart_1 = require(\"./verticalbarchart\");\nconst video_1 = require(\"./video\");\nconst vumeter_1 = require(\"./vumeter\");\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nclass Migration extends TagoIOModule_1.default {\n  static convertImagerMarkerData(widget, widgetData) {\n    return (0, imagemarker_1.convertLayerData)(widget, widgetData);\n  }\n  /**\n   * Returns if the widget type is supported by migration\n   */\n  static hasMigrate(widget) {\n    const {\n      type\n    } = widget || {};\n    const {\n      gauge_type,\n      chart_type,\n      layer_type\n    } = widget?.display || {};\n    switch (type) {\n      case \"pie\":\n        return true;\n      case \"note\":\n        return true;\n      case \"cylinder\":\n        return true;\n      case \"display\":\n        return true;\n      case \"table\":\n        return true;\n      case \"iframe\":\n        return true;\n      case \"dial\":\n        return true;\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return true;\n        } else if (gauge_type === \"solid\") {\n          return true;\n        } else if (gauge_type === \"clock\") {\n          return true;\n        } else if (gauge_type === \"vu_meter\") {\n          return true;\n        } else if (gauge_type === \"dial\") {\n          return true;\n        }\n        return false;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return true;\n        } else if (chart_type === \"area\") {\n          return true;\n        } else if (chart_type === \"bar_horizontal\") {\n          return true;\n        } else if (chart_type === \"bar_vertical\") {\n          return true;\n        } else if (chart_type === \"multiple_axis\") {\n          return true;\n        }\n        return false;\n      case \"card\":\n        return true;\n      case \"tile\":\n        return true;\n      case \"keypad\":\n        return true;\n      case \"incremental_button\":\n      case \"step_button\":\n        return true;\n      case \"push_button\":\n        return true;\n      case \"input\":\n        return true;\n      case \"icon\":\n        return true;\n      case \"map\":\n        return true;\n      case \"media\":\n      case \"image\":\n        return true;\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return true;\n        } else if (layer_type === \"image_marker\") {\n          return true;\n        } else if (layer_type === \"compose\") {\n          return true;\n        } else if (layer_type === \"virtualization_layer\") {\n          return true;\n        }\n        return false;\n      case \"grainbin\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  /**\n   * Check if a widget structure is old or not,\n   * based on his type\n   */\n  static isOldStructure(widget) {\n    const {\n      type\n    } = widget || {};\n    const {\n      gauge_type,\n      chart_type,\n      input_type,\n      layer_type,\n      type_media\n    } = widget?.display || {};\n    switch (type) {\n      case \"pie\":\n        return widget?.display?.pie_type === \"circle\" ? (0, pie_1.isOldStructure)(widget) : (0, semidonut_1.isOldStructure)(widget);\n      case \"note\":\n        return (0, note_1.isOldStructure)(widget);\n      case \"cylinder\":\n        return (0, cylinder_1.isOldStructure)(widget);\n      case \"display\":\n        return (0, display_1.isOldStructure)(widget);\n      case \"table\":\n        return widget?.display?.table_type === \"dynamic\" ? (0, dynamic_table_1.isOldStructure)(widget) : (0, statictable_1.isOldStructure)(widget);\n      case \"iframe\":\n        return (0, custom_1.isOldStructure)(widget);\n      case \"dial\":\n        return (0, dial_1.isOldStructure)(widget);\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return (0, angular_1.isOldStructure)(widget);\n        } else if (gauge_type === \"solid\") {\n          return (0, solid_1.isOldStructure)(widget);\n        } else if (gauge_type === \"clock\") {\n          return (0, clock_1.isOldStructure)(widget);\n        } else if (gauge_type === \"vu_meter\") {\n          return (0, vumeter_1.isOldStructure)(widget);\n        } else if (gauge_type === \"dial\") {\n          return (0, dial_1.isOldStructure)(widget);\n        }\n        return widget;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return (0, linechart_1.isOldStructure)(widget);\n        } else if (chart_type === \"area\") {\n          return (0, areachart_1.isOldStructure)(widget);\n        } else if (chart_type === \"bar_horizontal\") {\n          return (0, horizontalbarchart_1.isOldStructure)(widget);\n        } else if (chart_type === \"bar_vertical\") {\n          return (0, verticalbarchart_1.isOldStructure)(widget);\n        } else if (chart_type === \"multiple_axis\") {\n          return (0, multipleaxischart_1.isOldStructure)(widget);\n        }\n        return widget;\n      case \"card\":\n        return (0, card_1.isOldStructure)(widget);\n      case \"tile\":\n        return (0, tile_1.isOldStructure)(widget);\n      case \"keypad\":\n        return (0, keypad_1.isOldStructure)(widget);\n      case \"incremental_button\":\n      case \"step_button\":\n        return (0, stepbutton_1.isOldStructure)(widget);\n      case \"push_button\":\n        return (0, pushbutton_1.isOldStructure)(widget);\n      case \"input\":\n        return input_type === \"form\" ? (0, inputform_1.isOldStructure)(widget) : (0, inputcontrol_1.isOldStructure)(widget);\n      case \"icon\":\n        return (0, icon_1.isOldStructure)(widget);\n      case \"map\":\n        return (0, map_1.isOldStructure)(widget);\n      case \"media\":\n      case \"image\":\n        if (type_media === \"static_video\") {\n          return (0, video_1.isOldStructure)(widget);\n        }\n        return (0, image_1.isOldStructure)(widget);\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return (0, heatmap_1.isOldStructure)(widget);\n        } else if (layer_type === \"image_marker\") {\n          return (0, imagemarker_1.isOldStructure)(widget);\n        } else if (layer_type === \"compose\") {\n          return (0, compose_1.isOldStructure)(widget);\n        } else if (layer_type === \"virtualization_layer\") {\n          return (0, compose_1.isOldStructure)(widget);\n        }\n        return widget;\n      case \"grainbin\":\n        return (0, grainbin_1.isOldStructure)(widget);\n      default:\n        return false;\n    }\n  }\n  /**\n   * Convert widget old structure to new one\n   */\n  static convertWidget(widget) {\n    const {\n      type\n    } = widget || {};\n    const {\n      gauge_type,\n      layer_type,\n      chart_type,\n      input_type,\n      type_media\n    } = widget?.display || {};\n    switch (type) {\n      case \"pie\":\n        return widget?.display?.pie_type === \"circle\" ? (0, pie_1.convert)(widget) : (0, semidonut_1.convert)(widget);\n      case \"note\":\n        return (0, note_1.convert)(widget);\n      case \"cylinder\":\n        return (0, cylinder_1.convert)(widget);\n      case \"display\":\n        return (0, display_1.convert)(widget);\n      case \"table\":\n        return widget?.display?.table_type === \"dynamic\" ? (0, dynamic_table_1.convert)(widget) : (0, statictable_1.convert)(widget);\n      case \"iframe\":\n        return (0, custom_1.convert)(widget);\n      case \"dial\":\n        return (0, dial_1.convert)(widget);\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return (0, angular_1.convert)(widget);\n        } else if (gauge_type === \"solid\") {\n          return (0, solid_1.convert)(widget);\n        } else if (gauge_type === \"clock\") {\n          return (0, clock_1.convert)(widget);\n        } else if (gauge_type === \"vu_meter\") {\n          return (0, vumeter_1.convert)(widget);\n        } else if (gauge_type === \"dial\") {\n          return (0, dial_1.convert)(widget);\n        }\n        return widget;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return (0, linechart_1.convert)(widget);\n        } else if (chart_type === \"area\") {\n          return (0, areachart_1.convert)(widget);\n        } else if (chart_type === \"bar_horizontal\") {\n          return (0, horizontalbarchart_1.convert)(widget);\n        } else if (chart_type === \"bar_vertical\") {\n          return (0, verticalbarchart_1.convert)(widget);\n        } else if (chart_type === \"multiple_axis\") {\n          return (0, multipleaxischart_1.convert)(widget);\n        }\n        return widget;\n      case \"card\":\n        return (0, card_1.convert)(widget);\n      case \"tile\":\n        return (0, tile_1.convert)(widget);\n      case \"keypad\":\n        return (0, keypad_1.convert)(widget);\n      case \"incremental_button\":\n      case \"step_button\":\n        return (0, stepbutton_1.convert)(widget);\n      case \"push_button\":\n        return (0, pushbutton_1.convert)(widget);\n      case \"input\":\n        return input_type === \"form\" ? (0, inputform_1.convert)(widget) : (0, inputcontrol_1.convert)(widget);\n      case \"icon\":\n        return (0, icon_1.convert)(widget);\n      case \"map\":\n        return (0, map_1.convert)(widget);\n      case \"media\":\n      case \"image\":\n        if (type_media === \"static_video\") {\n          return (0, video_1.convert)(widget);\n        }\n        return (0, image_1.convert)(widget);\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return (0, heatmap_1.convert)(widget);\n        } else if (layer_type === \"image_marker\") {\n          return (0, imagemarker_1.convert)(widget);\n        } else if (layer_type === \"compose\") {\n          return (0, compose_1.convert)(widget);\n        } else if (layer_type === \"virtualization_layer\") {\n          return (0, compose_1.convert)(widget);\n        }\n        return widget;\n      case \"grainbin\":\n        return (0, grainbin_1.convert)(widget);\n      default:\n        return widget;\n    }\n  }\n}\nexports.default = Migration;","map":{"version":3,"mappings":"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","names":["Migration","TagoIOModule_1","convertImagerMarkerData","widget","widgetData","hasMigrate","type","gauge_type","chart_type","layer_type","display","isOldStructure","input_type","type_media","pie_type","table_type","convertWidget","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\Migration.ts"],"sourcesContent":["import { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convert as convertAngular, isOldStructure as isOldStructureAngular } from \"./angular\";\nimport { convert as convertAreaChart, isOldStructure as isOldStructureAreaChart } from \"./areachart\";\nimport { convert as convertCard, isOldStructure as isOldStructureCard } from \"./card\";\nimport { convert as convertClock, isOldStructure as isOldStructureClock } from \"./clock\";\nimport { convert as convertCompose, isOldStructure as isOldStructureCompose } from \"./compose\";\nimport { convert as convertCustom, isOldStructure as isOldStructureCustom } from \"./custom\";\nimport { convert as convertCylinder, isOldStructure as isOldStructureCylinder } from \"./cylinder\";\nimport { convert as convertDial, isOldStructure as isOldStructureDial } from \"./dial\";\nimport { convert as convertDisplay, isOldStructure as isOldStructureDisplay } from \"./display\";\nimport { convert as convertDynamicTable, isOldStructure as isOldStructureDynamicTable } from \"./dynamic_table\";\nimport { convert as convertGrainBin, isOldStructure as isOldStructureGrainBin } from \"./grainbin\";\nimport { convert as convertHeatMap, isOldStructure as isOldStructureHeatMap } from \"./heatmap\";\nimport {\n  convert as convertHorizontalBarChart,\n  isOldStructure as isOldStructureHorizontalBarChart,\n} from \"./horizontalbarchart\";\nimport { convert as convertIcon, isOldStructure as isOldStructureIcon } from \"./icon\";\nimport { convert as convertImage, isOldStructure as isOldStructureImage } from \"./image\";\nimport {\n  convert as convertImageMarker,\n  isOldStructure as isOldStructureImageMarker,\n  convertLayerData,\n} from \"./imagemarker\";\nimport { convert as convertInputControl, isOldStructure as isOldStructureInputControl } from \"./inputcontrol\";\nimport { convert as convertInputForm, isOldStructure as isOldStructureInputForm } from \"./inputform\";\nimport { convert as convertKeypad, isOldStructure as isOldStructureKeypad } from \"./keypad\";\nimport { convert as convertLineChart, isOldStructure as isOldStructureLineChart } from \"./linechart\";\nimport { convert as convertMap, isOldStructure as isOldStructureMap } from \"./map\";\nimport {\n  convert as convertMultipleAxisChart,\n  isOldStructure as isOldStructureMultipleAxisChart,\n} from \"./multipleaxischart\";\nimport { convert as convertNote, isOldStructure as isOldStructureNote } from \"./note\";\nimport { convert as convertPie, isOldStructure as isOldStructurePie } from \"./pie\";\nimport { convert as convertPushButton, isOldStructure as isOldStructurePushButton } from \"./pushbutton\";\nimport { convert as convertSemiDonut, isOldStructure as isOldStructureSemiDonut } from \"./semidonut\";\nimport { convert as convertSolid, isOldStructure as isOldStructureSolid } from \"./solid\";\nimport { convert as convertStaticTable, isOldStructure as isOldStructureStaticTable } from \"./statictable\";\nimport { convert as convertStepButton, isOldStructure as isOldStructureStepButton } from \"./stepbutton\";\nimport { convert as convertTile, isOldStructure as isOldStructureTile } from \"./tile\";\nimport {\n  convert as convertVerticalBarChart,\n  isOldStructure as isOldStructureVerticalBarChart,\n} from \"./verticalbarchart\";\nimport { convert as convertVideo, isOldStructure as isOldStructureVideo } from \"./video\";\nimport { convert as convertVuMeter, isOldStructure as isOldStructureVuMeter } from \"./vumeter\";\nimport TagoIOModule from \"../../common/TagoIOModule\";\n\nclass Migration extends TagoIOModule<any> {\n  public static convertImagerMarkerData(widget: any, widgetData: any) {\n    return convertLayerData(widget, widgetData);\n  }\n  /**\n   * Returns if the widget type is supported by migration\n   */\n  public static hasMigrate(widget: any): boolean {\n    const { type } = widget || {};\n    const { gauge_type, chart_type, layer_type } = widget?.display || {};\n\n    switch (type) {\n      case \"pie\":\n        return true;\n      case \"note\":\n        return true;\n      case \"cylinder\":\n        return true;\n      case \"display\":\n        return true;\n      case \"table\":\n        return true;\n      case \"iframe\":\n        return true;\n      case \"dial\":\n        return true;\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return true;\n        } else if (gauge_type === \"solid\") {\n          return true;\n        } else if (gauge_type === \"clock\") {\n          return true;\n        } else if (gauge_type === \"vu_meter\") {\n          return true;\n        } else if (gauge_type === \"dial\") {\n          return true;\n        }\n        return false;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return true;\n        } else if (chart_type === \"area\") {\n          return true;\n        } else if (chart_type === \"bar_horizontal\") {\n          return true;\n        } else if (chart_type === \"bar_vertical\") {\n          return true;\n        } else if (chart_type === \"multiple_axis\") {\n          return true;\n        }\n        return false;\n      case \"card\":\n        return true;\n      case \"tile\":\n        return true;\n      case \"keypad\":\n        return true;\n      case \"incremental_button\":\n      case \"step_button\":\n        return true;\n      case \"push_button\":\n        return true;\n      case \"input\":\n        return true;\n      case \"icon\":\n        return true;\n      case \"map\":\n        return true;\n      case \"media\":\n      case \"image\":\n        return true;\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return true;\n        } else if (layer_type === \"image_marker\") {\n          return true;\n        } else if (layer_type === \"compose\") {\n          return true;\n        } else if (layer_type === \"virtualization_layer\") {\n          return true;\n        }\n        return false;\n      case \"grainbin\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check if a widget structure is old or not,\n   * based on his type\n   */\n  public static isOldStructure(widget: any): boolean {\n    const { type } = widget || {};\n    const { gauge_type, chart_type, input_type, layer_type, type_media } = widget?.display || {};\n\n    switch (type) {\n      case \"pie\":\n        return widget?.display?.pie_type === \"circle\" ? isOldStructurePie(widget) : isOldStructureSemiDonut(widget);\n      case \"note\":\n        return isOldStructureNote(widget);\n      case \"cylinder\":\n        return isOldStructureCylinder(widget);\n      case \"display\":\n        return isOldStructureDisplay(widget);\n      case \"table\":\n        return widget?.display?.table_type === \"dynamic\"\n          ? isOldStructureDynamicTable(widget)\n          : isOldStructureStaticTable(widget);\n      case \"iframe\":\n        return isOldStructureCustom(widget);\n      case \"dial\":\n        return isOldStructureDial(widget);\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return isOldStructureAngular(widget);\n        } else if (gauge_type === \"solid\") {\n          return isOldStructureSolid(widget);\n        } else if (gauge_type === \"clock\") {\n          return isOldStructureClock(widget);\n        } else if (gauge_type === \"vu_meter\") {\n          return isOldStructureVuMeter(widget);\n        } else if (gauge_type === \"dial\") {\n          return isOldStructureDial(widget);\n        }\n        return widget;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return isOldStructureLineChart(widget);\n        } else if (chart_type === \"area\") {\n          return isOldStructureAreaChart(widget);\n        } else if (chart_type === \"bar_horizontal\") {\n          return isOldStructureHorizontalBarChart(widget);\n        } else if (chart_type === \"bar_vertical\") {\n          return isOldStructureVerticalBarChart(widget);\n        } else if (chart_type === \"multiple_axis\") {\n          return isOldStructureMultipleAxisChart(widget);\n        }\n        return widget;\n      case \"card\":\n        return isOldStructureCard(widget);\n      case \"tile\":\n        return isOldStructureTile(widget);\n      case \"keypad\":\n        return isOldStructureKeypad(widget);\n      case \"incremental_button\":\n      case \"step_button\":\n        return isOldStructureStepButton(widget);\n      case \"push_button\":\n        return isOldStructurePushButton(widget);\n      case \"input\":\n        return input_type === \"form\" ? isOldStructureInputForm(widget) : isOldStructureInputControl(widget);\n      case \"icon\":\n        return isOldStructureIcon(widget);\n      case \"map\":\n        return isOldStructureMap(widget);\n      case \"media\":\n      case \"image\":\n        if (type_media === \"static_video\") {\n          return isOldStructureVideo(widget);\n        }\n        return isOldStructureImage(widget);\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return isOldStructureHeatMap(widget);\n        } else if (layer_type === \"image_marker\") {\n          return isOldStructureImageMarker(widget);\n        } else if (layer_type === \"compose\") {\n          return isOldStructureCompose(widget);\n        } else if (layer_type === \"virtualization_layer\") {\n          return isOldStructureCompose(widget);\n        }\n        return widget;\n      case \"grainbin\":\n        return isOldStructureGrainBin(widget);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Convert widget old structure to new one\n   */\n  public static convertWidget(widget: any): WidgetInfo {\n    const { type } = widget || {};\n    const { gauge_type, layer_type, chart_type, input_type, type_media } = widget?.display || {};\n\n    switch (type) {\n      case \"pie\":\n        return widget?.display?.pie_type === \"circle\" ? convertPie(widget) : convertSemiDonut(widget);\n      case \"note\":\n        return convertNote(widget);\n      case \"cylinder\":\n        return convertCylinder(widget);\n      case \"display\":\n        return convertDisplay(widget);\n      case \"table\":\n        return widget?.display?.table_type === \"dynamic\" ? convertDynamicTable(widget) : convertStaticTable(widget);\n      case \"iframe\":\n        return convertCustom(widget);\n      case \"dial\":\n        return convertDial(widget);\n      case \"gauge\":\n        if (gauge_type === \"angular\") {\n          return convertAngular(widget);\n        } else if (gauge_type === \"solid\") {\n          return convertSolid(widget);\n        } else if (gauge_type === \"clock\") {\n          return convertClock(widget);\n        } else if (gauge_type === \"vu_meter\") {\n          return convertVuMeter(widget);\n        } else if (gauge_type === \"dial\") {\n          return convertDial(widget);\n        }\n        return widget;\n      case \"chart\":\n        if (chart_type === \"spline\") {\n          return convertLineChart(widget);\n        } else if (chart_type === \"area\") {\n          return convertAreaChart(widget);\n        } else if (chart_type === \"bar_horizontal\") {\n          return convertHorizontalBarChart(widget);\n        } else if (chart_type === \"bar_vertical\") {\n          return convertVerticalBarChart(widget);\n        } else if (chart_type === \"multiple_axis\") {\n          return convertMultipleAxisChart(widget);\n        }\n        return widget;\n      case \"card\":\n        return convertCard(widget);\n      case \"tile\":\n        return convertTile(widget);\n      case \"keypad\":\n        return convertKeypad(widget);\n      case \"incremental_button\":\n      case \"step_button\":\n        return convertStepButton(widget);\n      case \"push_button\":\n        return convertPushButton(widget);\n      case \"input\":\n        return input_type === \"form\" ? convertInputForm(widget) : convertInputControl(widget);\n      case \"icon\":\n        return convertIcon(widget);\n      case \"map\":\n        return convertMap(widget);\n      case \"media\":\n      case \"image\":\n        if (type_media === \"static_video\") {\n          return convertVideo(widget);\n        }\n        return convertImage(widget);\n      case \"layer\":\n        if (layer_type === \"heat_map\") {\n          return convertHeatMap(widget);\n        } else if (layer_type === \"image_marker\") {\n          return convertImageMarker(widget);\n        } else if (layer_type === \"compose\") {\n          return convertCompose(widget);\n        } else if (layer_type === \"virtualization_layer\") {\n          return convertCompose(widget);\n        }\n        return widget;\n      case \"grainbin\":\n        return convertGrainBin(widget);\n      default:\n        return widget;\n    }\n  }\n}\n\nexport default Migration;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}