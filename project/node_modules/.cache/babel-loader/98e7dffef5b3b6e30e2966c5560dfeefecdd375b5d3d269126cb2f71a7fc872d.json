{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass TagoCores extends TagoIOModule_1.default {\n  /**\n   * Retrieves a list with all TagoCores from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/tcore/instance\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"system_start_time\", \"tcore_start_time\"]));\n    return result;\n  }\n  /**\n   * Gets information about the TagoCore\n   * @param tagoCoreID TagoCore ID\n   * @param summary Fetch summary from the instance if it is connected\n   */\n  async info(tagoCoreID, summary) {\n    const result = await this.doRequest({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"GET\",\n      params: {\n        summary\n      }\n    });\n    return result;\n  }\n  /**\n   * Modify any property of the TagoCore.\n   * @param tagoCoreID TagoCore ID\n   * @param tagoCoreObj TagoCore Object with data to replace\n   */\n  async edit(tagoCoreID, tagoCoreObj) {\n    const result = await this.doRequest({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"PUT\",\n      body: tagoCoreObj\n    });\n    return result;\n  }\n  /**\n   * Generate a new token for the TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  async tokenGenerate(tagoCoreID) {\n    const result = await this.doRequest({\n      path: `/tcore/instance/${tagoCoreID}/token`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Deletes a TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  async delete(tagocoreID) {\n    const result = await this.doRequest({\n      path: `/tcore/instance/${tagocoreID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Retrieves a list with all TagoCore Clusters from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  async clusterList(queryObj) {\n    let result = await this.doRequest({\n      path: \"/tcore/cluster\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]));\n    return result;\n  }\n  /**\n   * Generate a new token for the TagoCore\n   * @param clusterID TagoCore Cluster ID\n   */\n  async clusterTokenCreate(clusterID) {\n    const result = await this.doRequest({\n      path: `/tcore/cluster/${clusterID}/token`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Gets information about the TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  async clusterInfo(clusterID) {\n    const result = await this.doRequest({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Modify any property of the TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param updateObj TagoCore Cluster Object with data to replace\n   */\n  async clusterEdit(clusterID, updateObj) {\n    const result = await this.doRequest({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"PUT\",\n      body: updateObj\n    });\n    return result;\n  }\n  /**\n   * Generates and retrieves a new Cluster for the account\n   * @param clusterObj Object with data to create new bucket\n   */\n  async clusterCreate(clusterObj) {\n    const result = await this.doRequest({\n      path: \"/tcore/cluster\",\n      method: \"POST\",\n      body: clusterObj\n    });\n    return result;\n  }\n  /**\n   * Deletes a TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  async clusterDelete(clusterID) {\n    const result = await this.doRequest({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Get Info of the Device from a Standalone TagoCore instance.\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param deviceID Device ID\n   */\n  async standaloneDeviceInfo(tagoCoreID, deviceID) {\n    let result = await this.doRequest({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: {\n        tcore: tagoCoreID\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n    return result;\n  }\n  /**\n   * Get Info of the Device from a TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param deviceID Device ID\n   */\n  async clusterDeviceInfo(clusterID, deviceID) {\n    let result = await this.doRequest({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: {\n        tcore_cluster: clusterID\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n    return result;\n  }\n  /**\n   * Retrieves a list with all devices from a Standalone TagoCore instance.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param queryObj Search query params\n   */\n  async standaloneDeviceList(tagoCoreID, queryObj) {\n    let result = await this.doRequest({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore: tagoCoreID || \"\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]));\n    return result;\n  }\n  /**\n   * Retrieves a list with all devices from a TagoCore Cluster.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param clusterID TagoCore Cluster ID\n   * @param queryObj Search query params\n   */\n  async clusterDeviceList(clusterID, queryObj) {\n    let result = await this.doRequest({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore_cluster: clusterID || \"\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]));\n    return result;\n  }\n}\nexports.default = TagoCores;","map":{"version":3,"mappings":"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","names":["TagoCores","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","info","tagoCoreID","summary","edit","tagoCoreObj","body","tokenGenerate","delete","tagocoreID","clusterList","clusterTokenCreate","clusterID","clusterInfo","clusterEdit","updateObj","clusterCreate","clusterObj","clusterDelete","standaloneDeviceInfo","deviceID","tcore","clusterDeviceInfo","tcore_cluster","standaloneDeviceList","resolveBucketName","clusterDeviceList","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\TagoCores.ts"],"sourcesContent":["import {\n  TagoCoreClusterCreateInfo,\n  TagoCoreClusterInfo,\n  TagoCoreClusterListInfo,\n  TagoCoreClusterQuery,\n  TagoCoreInfo,\n  TagoCoreListInfo,\n  TagoCoreQuery,\n} from \"./tagocore.types\";\nimport { GenericID } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { DeviceInfo, DeviceListItem, DeviceQuery } from \"./devices.types\";\n\nclass TagoCores extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all TagoCores from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: TagoCoreQuery): Promise<TagoCoreListInfo[]> {\n    let result = await this.doRequest<TagoCoreListInfo[]>({\n      path: \"/tcore/instance\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"created_at\", \"updated_at\", \"system_start_time\", \"tcore_start_time\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Gets information about the TagoCore\n   * @param tagoCoreID TagoCore ID\n   * @param summary Fetch summary from the instance if it is connected\n   */\n  public async info(tagoCoreID: GenericID, summary?: boolean): Promise<TagoCoreInfo> {\n    const result = await this.doRequest<TagoCoreInfo>({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"GET\",\n      params: { summary },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the TagoCore.\n   * @param tagoCoreID TagoCore ID\n   * @param tagoCoreObj TagoCore Object with data to replace\n   */\n  public async edit(tagoCoreID: GenericID, tagoCoreObj: Partial<TagoCoreInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"PUT\",\n      body: tagoCoreObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  public async tokenGenerate(tagoCoreID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagoCoreID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  public async delete(tagocoreID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagocoreID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all TagoCore Clusters from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async clusterList(queryObj?: TagoCoreClusterQuery): Promise<TagoCoreClusterListInfo[]> {\n    let result = await this.doRequest<TagoCoreClusterListInfo[]>({\n      path: \"/tcore/cluster\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the TagoCore\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterTokenCreate(clusterID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Gets information about the TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterInfo(clusterID: GenericID): Promise<TagoCoreClusterInfo> {\n    const result = await this.doRequest<TagoCoreClusterInfo>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param updateObj TagoCore Cluster Object with data to replace\n   */\n  public async clusterEdit(clusterID: GenericID, updateObj: Partial<TagoCoreClusterInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"PUT\",\n      body: updateObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new Cluster for the account\n   * @param clusterObj Object with data to create new bucket\n   */\n  public async clusterCreate(clusterObj: TagoCoreClusterCreateInfo): Promise<{ id: string; token: string }> {\n    const result = await this.doRequest<{ id: string; token: string }>({\n      path: \"/tcore/cluster\",\n      method: \"POST\",\n      body: clusterObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterDelete(clusterID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device from a Standalone TagoCore instance.\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param deviceID Device ID\n   */\n  public async standaloneDeviceInfo(tagoCoreID: GenericID, deviceID: GenericID): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: { tcore: tagoCoreID },\n    });\n\n    result = dateParser(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device from a TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param deviceID Device ID\n   */\n  public async clusterDeviceInfo(clusterID: GenericID, deviceID: GenericID): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: { tcore_cluster: clusterID },\n    });\n\n    result = dateParser(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices from a Standalone TagoCore instance.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param queryObj Search query params\n   */\n  public async standaloneDeviceList(tagoCoreID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\n    let result = await this.doRequest<DeviceListItem[]>({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore: tagoCoreID || \"\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices from a TagoCore Cluster.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param clusterID TagoCore Cluster ID\n   * @param queryObj Search query params\n   */\n  public async clusterDeviceList(clusterID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\n    let result = await this.doRequest<DeviceListItem[]>({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore_cluster: clusterID || \"\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n}\n\nexport default TagoCores;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}