{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar convertFormula_1 = __importDefault(require(\"./common/convertFormula\"));\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      font_size: {\n        type: \"auto\"\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_units: true,\n      show_variables: !oldDisplay.hide_variables,\n      style: \"default\",\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"display\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (item.is_hide) {\n          // is_hide items are not visible in the columns, so we cannot\n          // put them in the variables array\n          continue;\n        }\n        var _iterator2 = _createForOfIteratorHelper(item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$vars_labe, _oldDisplay$vars_form, _oldDisplay$vars_form2;\n            var variable = _step2.value;\n            var key = \"\".concat(item.origin).concat(variable);\n            var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[key];\n            var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[key];\n            var formula = (0, convertFormula_1.default)((_oldDisplay$vars_form2 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[key]);\n            newStructure.display.variables.push(_objectSpread(_objectSpread(_objectSpread({\n              origin: item.origin,\n              variable: variable\n            }, alias ? {\n              alias: alias\n            } : {}), numberFormat ? {\n              number_format: numberFormat\n            } : {}), formula ? {\n              formula: formula\n            } : {}));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4, _widget$display5, _widget$display6, _widget$display7;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.vars_formula || widget !== null && widget !== void 0 && (_widget$display4 = widget.display) !== null && _widget$display4 !== void 0 && _widget$display4.numberformat || widget !== null && widget !== void 0 && (_widget$display5 = widget.display) !== null && _widget$display5 !== void 0 && _widget$display5.column_alignments || (widget === null || widget === void 0 ? void 0 : (_widget$display6 = widget.display) === null || _widget$display6 === void 0 ? void 0 : _widget$display6.hide_variables) !== undefined || (widget === null || widget === void 0 ? void 0 : (_widget$display7 = widget.display) === null || _widget$display7 === void 0 ? void 0 : _widget$display7.watermark) !== undefined);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","font_size","type","header_buttons","help","show_units","show_variables","hide_variables","style","variables","id","label","realtime","Array","isArray","data","item","is_hide","variable","key","origin","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","push","number_format","exports","isOldStructure","widget","isOld","numberformat","column_alignments","undefined","watermark"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\display.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old DISPLAY to new DISPLAY\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport convertFormula from \"./common/convertFormula\";\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  const newStructure: any = {\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      font_size: {\r\n        type: \"auto\",\r\n      },\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      show_units: true,\r\n      show_variables: !oldDisplay.hide_variables,\r\n      style: \"default\",\r\n      variables: [],\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"display\",\r\n  };\r\n\r\n  if (Array.isArray(oldWidget.data)) {\r\n    newStructure.data = oldWidget.data; // transfers the .data property\r\n\r\n    newStructure.display.variables = []; // creates the variable array\r\n\r\n    for (const item of oldWidget.data) {\r\n      if (item.is_hide) {\r\n        // is_hide items are not visible in the columns, so we cannot\r\n        // put them in the variables array\r\n        continue;\r\n      }\r\n\r\n      for (const variable of item.variables) {\r\n        const key = `${item.origin}${variable}`;\r\n\r\n        const alias = oldDisplay.vars_labels?.[key];\r\n        const numberFormat = oldDisplay.vars_format?.[key];\r\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\r\n\r\n        newStructure.display.variables.push({\r\n          origin: item.origin,\r\n          variable,\r\n          ...(alias ? { alias } : {}),\r\n          ...(numberFormat ? { number_format: numberFormat } : {}),\r\n          ...(formula ? { formula } : {}),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(\r\n    widget?.display?.vars_labels ||\r\n    widget?.display?.vars_format ||\r\n    widget?.display?.vars_formula ||\r\n    widget?.display?.numberformat ||\r\n    widget?.display?.column_alignments ||\r\n    widget?.display?.hide_variables !== undefined ||\r\n    widget?.display?.watermark !== undefined\r\n  );\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}