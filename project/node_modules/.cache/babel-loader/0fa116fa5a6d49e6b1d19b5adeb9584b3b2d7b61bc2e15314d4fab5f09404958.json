{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar common_1 = require(\"./common/\");\nfunction isValidMode(mode) {\n  return mode === \"basic\" || mode === \"dark\" || mode === \"light\" || mode === \"sattelite\";\n}\nfunction convertFilterBy(filterBy) {\n  switch (filterBy) {\n    case \"values\":\n      return \"value\";\n    case \"devices\":\n      return \"device\";\n    // When filterBy is null, the default is \"variable\" for legacy\n    default:\n      return \"variable\";\n  }\n}\nfunction convertFilterVariables(filterVariable) {\n  if (!Array.isArray(filterVariable)) {\n    return [];\n  }\n  // Remove duplicate strings\n  return _toConsumableArray(Array.from(new Set((filterVariable === null || filterVariable === void 0 ? void 0 : filterVariable.map(function (e) {\n    return e === null || e === void 0 ? void 0 : e.variable;\n  })) || [])));\n}\nfunction convertGeofence(oldDisplay) {\n  var _oldDisplay$geo_varia, _oldDisplay$geo_varia2, _oldDisplay$geo_varia3, _oldDisplay$geo_varia4, _oldDisplay$geo_varia5;\n  if (!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.geo_variable)) {\n    return null;\n  }\n  return {\n    enable_user: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_enable_user,\n    events: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_events) || [],\n    events_label: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_events_label,\n    limit: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_limit,\n    type_enable_user: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_type_enable_user) || \"circle\",\n    variable: {\n      bucket: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$geo_varia = oldDisplay.geo_variable) === null || _oldDisplay$geo_varia === void 0 ? void 0 : (_oldDisplay$geo_varia2 = _oldDisplay$geo_varia.origin) === null || _oldDisplay$geo_varia2 === void 0 ? void 0 : _oldDisplay$geo_varia2.bucket,\n      origin: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$geo_varia3 = oldDisplay.geo_variable) === null || _oldDisplay$geo_varia3 === void 0 ? void 0 : (_oldDisplay$geo_varia4 = _oldDisplay$geo_varia3.origin) === null || _oldDisplay$geo_varia4 === void 0 ? void 0 : _oldDisplay$geo_varia4.id,\n      variable: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$geo_varia5 = oldDisplay.geo_variable) === null || _oldDisplay$geo_varia5 === void 0 ? void 0 : _oldDisplay$geo_varia5.variable\n    }\n  };\n}\n/**\n * Some icons use the old form\n */\nfunction parserIcon(cssClass) {\n  switch (cssClass) {\n    case \"flaticon flaticon-car95\":\n      return \"car\";\n    case \"flaticon flaticon-pin56\":\n      return \"location\";\n    case \"flaticon flaticon-home152\":\n      return \"residence\";\n    case \"flaticon flaticon-vehicle12\":\n      return \"bus\";\n    case \"flaticon flaticon-scooter8\":\n      return \"motorcycle\";\n    case \"flaticon flaticon-delivery51\":\n      return \"truck\";\n    case \"flaticon flaticon-mail10\":\n      return \"mail\";\n    case \"flaticon flaticon-home153\":\n      return \"residence\";\n    default:\n      return cssClass;\n  }\n}\nfunction convertGroupBy(oldGroupBy) {\n  if (oldGroupBy === \"date\") {\n    return \"time\";\n  }\n  return oldGroupBy !== null && oldGroupBy !== void 0 ? oldGroupBy : \"time\";\n}\nfunction convert(oldWidget) {\n  var _oldDisplay$filter_de, _oldDisplay$direction, _oldDisplay$direction2, _oldDisplay$direction3, _oldDisplay$group_mar, _oldDisplay$intervals, _oldWidget$data, _oldWidget$data$;\n  var oldDisplay = oldWidget.display || {};\n  var geofence = convertGeofence(oldDisplay);\n  var filterBy = convertFilterBy(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_by);\n  var canListByDevice = !!((_oldDisplay$filter_de = oldDisplay.filter_devices) !== null && _oldDisplay$filter_de !== void 0 && _oldDisplay$filter_de.find(function (e) {\n    return e === null || e === void 0 ? void 0 : e.name;\n  })) || false;\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: _objectSpread(_objectSpread({\n      center_options: {\n        center_all_variables: true,\n        show_only_last_values: false,\n        variables: []\n      },\n      custom_text: _objectSpread({}, oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.filter_title ? {\n        SEARCH_FOR_FILTER: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_title\n      } : {}),\n      direction_variable: oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.show_directions ? {\n        show_current_direction: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.show_current_direction),\n        variable: {\n          origin: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$direction = oldDisplay.direction_variable) === null || _oldDisplay$direction === void 0 ? void 0 : (_oldDisplay$direction2 = _oldDisplay$direction.origin) === null || _oldDisplay$direction2 === void 0 ? void 0 : _oldDisplay$direction2.id,\n          variable: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$direction3 = oldDisplay.direction_variable) === null || _oldDisplay$direction3 === void 0 ? void 0 : _oldDisplay$direction3.variable\n        }\n      } : {},\n      filter_by: filterBy,\n      filter_list_by: canListByDevice && filterBy === \"device\" ? \"device\" : \"variable\",\n      filter_variables: convertFilterVariables(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_variable),\n      group_by: convertGroupBy(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by),\n      group_markers: (_oldDisplay$group_mar = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_markers) !== null && _oldDisplay$group_mar !== void 0 ? _oldDisplay$group_mar : true,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      infobox_config: {\n        date_format: \"\",\n        image: {\n          behavior: \"landscape\",\n          object_fit: \"contain\",\n          position: \"top\"\n        },\n        show_window_closed: oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.infowindow_closed ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.infowindow_closed : true\n      },\n      initial_mode: isValidMode(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.mode) ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.mode : \"basic\",\n      intervals: (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$intervals = oldDisplay.intervals) === null || _oldDisplay$intervals === void 0 ? void 0 : _oldDisplay$intervals.map(common_1.convertInterval)) || [],\n      max_points: (oldWidget === null || oldWidget === void 0 ? void 0 : (_oldWidget$data = oldWidget.data) === null || _oldWidget$data === void 0 ? void 0 : (_oldWidget$data$ = _oldWidget$data[0]) === null || _oldWidget$data$ === void 0 ? void 0 : _oldWidget$data$.query) === \"last_location\" ? 1 : oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.max_points,\n      show_directions: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.show_directions),\n      show_filter: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.show_filter),\n      show_icons_for_all: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.icons_for_all,\n      show_lines: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.connect_markers),\n      show_lines_animated: !!(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.ant_path),\n      variables: []\n    }, geofence ? {\n      geofence: geofence\n    } : {}), (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.initial_zoom) !== 0 ? {\n      initial_zoom: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.initial_zoom\n    } : {}),\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"map\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    if ((oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.query) === \"last_location\") {\n      newStructure.display.max_points = 1;\n    }\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var item = _step.value;\n        if (item.is_hide || item !== null && item !== void 0 && item.is_global_time_data) {\n          // is_hide items are not visible in the columns, so we cannot\n          // put them in the variables array\n          return \"continue\";\n        }\n        var _iterator2 = _createForOfIteratorHelper(item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$map_icons, _oldDisplay$map_icons2, _oldDisplay$map_icons3, _oldDisplay$map_icons4, _oldDisplay$vars_labe, _oldDisplay$vars_form, _oldDisplay$vars_form2, _oldDisplay$vars_cond, _oldDisplay$vars_cond2, _oldDisplay$vars_cond3, _oldDisplay$vars_cond4, _oldDisplay$vars_that, _oldDisplay$condition, _oldDisplay$vars_imag, _oldDisplay$vars_url, _oldDisplay$vars_url$, _oldDisplay$vars_url2, _oldDisplay$vars_url3;\n            var variable = _step2.value;\n            var key = \"\".concat(item.origin).concat(variable);\n            /**\n             * Getting the icon svg\n             */\n            var icon = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$map_icons = oldDisplay.map_icons) === null || _oldDisplay$map_icons === void 0 ? void 0 : (_oldDisplay$map_icons2 = _oldDisplay$map_icons[item.origin]) === null || _oldDisplay$map_icons2 === void 0 ? void 0 : _oldDisplay$map_icons2.css_class) || null;\n            var color = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$map_icons3 = oldDisplay.map_icons) === null || _oldDisplay$map_icons3 === void 0 ? void 0 : (_oldDisplay$map_icons4 = _oldDisplay$map_icons3[item.origin]) === null || _oldDisplay$map_icons4 === void 0 ? void 0 : _oldDisplay$map_icons4.color) || null;\n            var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[key];\n            var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[key];\n            var formula = (0, common_1.convertFormula)((_oldDisplay$vars_form2 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[key]);\n            var hasConditions = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_cond = oldDisplay.vars_conditions) === null || _oldDisplay$vars_cond === void 0 ? void 0 : (_oldDisplay$vars_cond2 = _oldDisplay$vars_cond[\"\".concat(item === null || item === void 0 ? void 0 : item.origin)]) === null || _oldDisplay$vars_cond2 === void 0 ? void 0 : _oldDisplay$vars_cond2.variable) === variable;\n            var iconType = hasConditions ? \"conditional\" : \"fixed\";\n            var iconConditions = hasConditions ? oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_cond3 = oldDisplay.vars_conditions) === null || _oldDisplay$vars_cond3 === void 0 ? void 0 : (_oldDisplay$vars_cond4 = _oldDisplay$vars_cond3[\"\".concat(item === null || item === void 0 ? void 0 : item.origin)]) === null || _oldDisplay$vars_cond4 === void 0 ? void 0 : _oldDisplay$vars_cond4.conditions : null;\n            /**\n             * If the pin was not set, the default value is the\n             * map-marker.\n             */\n            if (iconConditions && !(iconConditions !== null && iconConditions !== void 0 && iconConditions.url)) {\n              iconConditions.url = \"https://svg.internal.tago.io/map-marker.svg\";\n            }\n            var aliasType = oldDisplay !== null && oldDisplay !== void 0 && (_oldDisplay$vars_that = oldDisplay.vars_that_have_conditions) !== null && _oldDisplay$vars_that !== void 0 && _oldDisplay$vars_that[key] ? \"icon\" : \"text\";\n            var iconLabelConditions = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$condition = oldDisplay.conditions) === null || _oldDisplay$condition === void 0 ? void 0 : _oldDisplay$condition[key]) || [];\n            var image = {\n              static_image: oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_imag = oldDisplay.vars_images) === null || _oldDisplay$vars_imag === void 0 ? void 0 : _oldDisplay$vars_imag[key]\n            } || null;\n            var url = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_url = oldDisplay.vars_url) === null || _oldDisplay$vars_url === void 0 ? void 0 : (_oldDisplay$vars_url$ = _oldDisplay$vars_url[key]) === null || _oldDisplay$vars_url$ === void 0 ? void 0 : _oldDisplay$vars_url$.url) || null;\n            var label = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_url2 = oldDisplay.vars_url) === null || _oldDisplay$vars_url2 === void 0 ? void 0 : (_oldDisplay$vars_url3 = _oldDisplay$vars_url2[key]) === null || _oldDisplay$vars_url3 === void 0 ? void 0 : _oldDisplay$vars_url3.alias) || null;\n            var link = url || label ? _objectSpread(_objectSpread({}, url ? {\n              url: url\n            } : {}), label ? {\n              label: label\n            } : {}) : null;\n            var filterDevices = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_devices) || [];\n            var findFilterDevice = filterDevices.find(function (e) {\n              return (e === null || e === void 0 ? void 0 : e.id) === (item === null || item === void 0 ? void 0 : item.origin);\n            });\n            newStructure.display.variables.push(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n              alias_type: aliasType,\n              icon_conditions: iconLabelConditions,\n              infobox: _objectSpread({}, image || link ? _objectSpread(_objectSpread({}, image ? {\n                image: image\n              } : {}), link ? {\n                link: link\n              } : {}) : {}),\n              origin: item === null || item === void 0 ? void 0 : item.origin,\n              pin_config: _objectSpread(_objectSpread({\n                color: color,\n                icon: parserIcon(icon)\n              }, iconType ? {\n                icon_type: iconType\n              } : {}), iconConditions ? {\n                icon_conditions: iconConditions\n              } : {}),\n              variable: variable\n            }, alias ? {\n              alias: alias\n            } : {}), numberFormat ? {\n              number_format: numberFormat\n            } : {}), formula ? {\n              formula: formula\n            } : {}), findFilterDevice ? {\n              originName: findFilterDevice === null || findFilterDevice === void 0 ? void 0 : findFilterDevice.name\n            } : {}));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4, _widget$display5, _widget$display6, _widget$display7, _widget$display8;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.vars_formula || widget !== null && widget !== void 0 && (_widget$display4 = widget.display) !== null && _widget$display4 !== void 0 && _widget$display4.numberformat || widget !== null && widget !== void 0 && (_widget$display5 = widget.display) !== null && _widget$display5 !== void 0 && _widget$display5.map_icons || widget !== null && widget !== void 0 && (_widget$display6 = widget.display) !== null && _widget$display6 !== void 0 && _widget$display6.ignore_00 || widget !== null && widget !== void 0 && (_widget$display7 = widget.display) !== null && _widget$display7 !== void 0 && _widget$display7.connect_markers || (widget === null || widget === void 0 ? void 0 : (_widget$display8 = widget.display) === null || _widget$display8 === void 0 ? void 0 : _widget$display8.watermark) !== undefined);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":";;;;;;;;;AAKA;AAEA,SAASA,WAAW,CAACC,IAAY;EAC/B,OAAOA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,WAAW;AACxF;AAEA,SAASC,eAAe,CAACC,QAAgB;EACvC,QAAQA,QAAQ;IACd,KAAK,QAAQ;MACX,OAAO,OAAO;IAChB,KAAK,SAAS;MACZ,OAAO,QAAQ;IACjB;IACA;MACE,OAAO,UAAU;EAAC;AAExB;AAEA,SAASC,sBAAsB,CAACC,cAAmB;EACjD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,cAAc,CAAC,EAAE;IAClC,OAAO,EAAE;;EAGX;EACA,0BAAWC,KAAK,CAACE,IAAI,CAAC,IAAIC,GAAG,CAAC,eAAc,aAAdJ,cAAc,uBAAdA,cAAc,CAAEK,GAAG,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,QAAQ;EAAA,EAAC,KAAI,EAAE,CAAC,CAAC;AAC/E;AAEA,SAASC,eAAe,CAACC,UAAe;EAAA;EACtC,IAAI,EAACA,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEC,YAAY,GAAE;IAC7B,OAAO,IAAI;;EAEb,OAAO;IACLC,WAAW,EAAEF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEG,eAAe;IACxCC,MAAM,EAAE,WAAU,aAAVJ,UAAU,uBAAVA,UAAU,CAAEK,UAAU,KAAI,EAAE;IACpCC,YAAY,EAAEN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,gBAAgB;IAC1CC,KAAK,EAAER,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAES,SAAS;IAC5BC,gBAAgB,EAAE,WAAU,aAAVV,UAAU,uBAAVA,UAAU,CAAEW,oBAAoB,KAAI,QAAQ;IAC9Db,QAAQ,EAAE;MACRc,MAAM,EAAEZ,UAAU,aAAVA,UAAU,gDAAVA,UAAU,CAAEC,YAAY,oFAAxB,sBAA0BY,MAAM,2DAAhC,uBAAkCD,MAAM;MAChDC,MAAM,EAAEb,UAAU,aAAVA,UAAU,iDAAVA,UAAU,CAAEC,YAAY,qFAAxB,uBAA0BY,MAAM,2DAAhC,uBAAkCC,EAAE;MAC5ChB,QAAQ,EAAEE,UAAU,aAAVA,UAAU,iDAAVA,UAAU,CAAEC,YAAY,2DAAxB,uBAA0BH;;GAEvC;AACH;AAEA;;;AAGA,SAASiB,UAAU,CAACC,QAAgB;EAClC,QAAQA,QAAQ;IACd,KAAK,yBAAyB;MAC5B,OAAO,KAAK;IACd,KAAK,yBAAyB;MAC5B,OAAO,UAAU;IACnB,KAAK,2BAA2B;MAC9B,OAAO,WAAW;IACpB,KAAK,6BAA6B;MAChC,OAAO,KAAK;IACd,KAAK,4BAA4B;MAC/B,OAAO,YAAY;IACrB,KAAK,8BAA8B;MACjC,OAAO,OAAO;IAChB,KAAK,0BAA0B;MAC7B,OAAO,MAAM;IACf,KAAK,2BAA2B;MAC9B,OAAO,WAAW;IACpB;MACE,OAAOA,QAAQ;EAAC;AAEtB;AAEA,SAASC,cAAc,CAACC,UAAkB;EACxC,IAAIA,UAAU,KAAK,MAAM,EAAE;IACzB,OAAO,MAAM;;EAEf,OAAOA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,MAAM;AAC7B;AAEA,SAAgBC,OAAO,CAACC,SAAc;EAAA;EACpC,IAAMpB,UAAU,GAAGoB,SAAS,CAACC,OAAO,IAAI,EAAE;EAC1C,IAAMC,QAAQ,GAAGvB,eAAe,CAACC,UAAU,CAAC;EAC5C,IAAMX,QAAQ,GAAGD,eAAe,CAACY,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuB,SAAS,CAAC;EACvD,IAAMC,eAAe,GAAG,CAAC,2BAACxB,UAAU,CAACyB,cAAc,kDAAzB,sBAA2BC,IAAI,CAAC,UAAC7B,CAAM;IAAA,OAAKA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE8B,IAAI;EAAA,EAAC,KAAI,KAAK;EACvF,IAAMC,YAAY,GAAQ;IACxBC,SAAS,EAAET,SAAS,CAACS,SAAS;IAC9BR,OAAO;MACLS,cAAc,EAAE;QACdC,oBAAoB,EAAE,IAAI;QAC1BC,qBAAqB,EAAE,KAAK;QAC5BC,SAAS,EAAE;OACZ;MACDC,WAAW,oBACLlC,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEmC,YAAY,GAAG;QAAEC,iBAAiB,EAAEpC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEmC;MAAY,CAAE,GAAG,EAAE,CACpF;MACDE,kBAAkB,EAAErC,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEsC,eAAe,GAC3C;QACEC,sBAAsB,EAAE,CAAC,EAACvC,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEuC,sBAAsB;QAC5DzC,QAAQ,EAAE;UACRe,MAAM,EAAEb,UAAU,aAAVA,UAAU,gDAAVA,UAAU,CAAEqC,kBAAkB,oFAA9B,sBAAgCxB,MAAM,2DAAtC,uBAAwCC,EAAE;UAClDhB,QAAQ,EAAEE,UAAU,aAAVA,UAAU,iDAAVA,UAAU,CAAEqC,kBAAkB,2DAA9B,uBAAgCvC;;OAE7C,GACD,EAAE;MACNyB,SAAS,EAAElC,QAAQ;MACnBmD,cAAc,EAAEhB,eAAe,IAAInC,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,UAAU;MAChFoD,gBAAgB,EAAEnD,sBAAsB,CAACU,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE0C,eAAe,CAAC;MACrEC,QAAQ,EAAE1B,cAAc,CAACjB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE2C,QAAQ,CAAC;MAC9CC,aAAa,2BAAE5C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE4C,aAAa,yEAAI,IAAI;MAChDC,cAAc,EAAE7C,UAAU,CAAC6C,cAAc,IAAI,EAAE;MAC/CC,IAAI,EAAE9C,UAAU,CAAC8C,IAAI,IAAI,EAAE;MAC3BC,cAAc,EAAE;QACdC,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE;UACLC,QAAQ,EAAE,WAAW;UACrBC,UAAU,EAAE,SAAS;UACrBC,QAAQ,EAAE;SACX;QACDC,kBAAkB,EAAErD,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEsD,iBAAiB,GAAGtD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEsD,iBAAiB,GAAG;OACrF;MACDC,YAAY,EAAErE,WAAW,CAACc,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEb,IAAI,CAAC,GAAGa,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEb,IAAI,GAAG,OAAO;MACxEqE,SAAS,EAAE,WAAU,aAAVxD,UAAU,gDAAVA,UAAU,CAAEwD,SAAS,0DAArB,sBAAuB5D,GAAG,CAAC6D,wBAAe,CAAC,KAAI,EAAE;MAC5DC,UAAU,EAAE,UAAS,aAATtC,SAAS,0CAATA,SAAS,CAAEuC,IAAI,wEAAf,gBAAkB,CAAC,CAAC,qDAApB,iBAAsBC,KAAK,MAAK,eAAe,GAAG,CAAC,GAAG5D,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE0D,UAAU;MACxFpB,eAAe,EAAE,CAAC,EAACtC,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEsC,eAAe;MAC9CuB,WAAW,EAAE,CAAC,EAAC7D,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAE6D,WAAW;MACtCC,kBAAkB,EAAE9D,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE+D,aAAa;MAC7CC,UAAU,EAAE,CAAC,EAAChE,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEiE,eAAe;MACzCC,mBAAmB,EAAE,CAAC,EAAClE,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEmE,QAAQ;MAC3ClC,SAAS,EAAE;IAAE,GACTX,QAAQ,GAAG;MAAEA,QAAQ,EAARA;IAAQ,CAAE,GAAG,EAAE,GAC5B,WAAU,aAAVtB,UAAU,uBAAVA,UAAU,CAAEoE,YAAY,MAAK,CAAC,GAAG;MAAEA,YAAY,EAAEpE,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEoE;IAAY,CAAE,GAAG,EAAE,CACrF;IACDtD,EAAE,EAAEM,SAAS,CAACN,EAAE;IAChBuD,KAAK,EAAEjD,SAAS,CAACiD,KAAK;IACtBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;GACP;EAED,IAAI/E,KAAK,CAACC,OAAO,CAAC2B,SAAS,CAACuC,IAAI,CAAC,EAAE;IACjC/B,YAAY,CAAC+B,IAAI,GAAGvC,SAAS,CAACuC,IAAI,CAAC,CAAC;IAEpC/B,YAAY,CAACP,OAAO,CAACY,SAAS,GAAG,EAAE,CAAC,CAAC;IAErC,IAAI,UAAS,aAATb,SAAS,uBAATA,SAAS,CAAEwC,KAAK,MAAK,eAAe,EAAE;MACxChC,YAAY,CAACP,OAAO,CAACqC,UAAU,GAAG,CAAC;;IACpC,2CAEkBtC,SAAS,CAACuC,IAAI;MAAA;IAAA;MAAA;QAAA,IAAtBa,IAAI;QACb,IAAIA,IAAI,CAACC,OAAO,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,mBAAmB,EAAE;UAC7C;UACA;UACA;;QACD,4CAEsBF,IAAI,CAACvC,SAAS;UAAA;QAAA;UAArC,uDAAuC;YAAA;YAAA,IAA5BnC,QAAQ;YACjB,IAAM6E,GAAG,aAAMH,IAAI,CAAC3D,MAAM,SAAGf,QAAQ,CAAE;YACvC;;;YAGA,IAAM8E,IAAI,GAAG,WAAU,aAAV5E,UAAU,gDAAVA,UAAU,CAAE6E,SAAS,oFAArB,sBAAwBL,IAAI,CAAC3D,MAAM,CAAC,2DAApC,uBAAsCiE,SAAS,KAAI,IAAI;YACpE,IAAMC,KAAK,GAAG,WAAU,aAAV/E,UAAU,iDAAVA,UAAU,CAAE6E,SAAS,qFAArB,uBAAwBL,IAAI,CAAC3D,MAAM,CAAC,2DAApC,uBAAsCkE,KAAK,KAAI,IAAI;YAEjE,IAAMC,KAAK,4BAAGhF,UAAU,CAACiF,WAAW,0DAAtB,sBAAyBN,GAAG,CAAC;YAC3C,IAAMO,YAAY,4BAAGlF,UAAU,CAACmF,WAAW,0DAAtB,sBAAyBR,GAAG,CAAC;YAClD,IAAMS,OAAO,GAAG,2BAAc,4BAACpF,UAAU,CAACqF,YAAY,2DAAvB,uBAA0BV,GAAG,CAAC,CAAC;YAE9D,IAAMW,aAAa,GAAG,WAAU,aAAVtF,UAAU,gDAAVA,UAAU,CAAEuF,eAAe,oFAA3B,gCAAiCf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE3D,MAAM,EAAG,2DAAhD,uBAAkDf,QAAQ,MAAKA,QAAQ;YAC7F,IAAM0F,QAAQ,GAAGF,aAAa,GAAG,aAAa,GAAG,OAAO;YAExD,IAAMG,cAAc,GAAGH,aAAa,GAAGtF,UAAU,aAAVA,UAAU,iDAAVA,UAAU,CAAEuF,eAAe,qFAA3B,iCAAiCf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE3D,MAAM,EAAG,2DAAhD,uBAAkD6E,UAAU,GAAG,IAAI;YAE1G;;;;YAIA,IAAID,cAAc,IAAI,EAACA,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,GAAG,GAAE;cAC1CF,cAAc,CAACE,GAAG,GAAG,6CAA6C;;YAGpE,IAAMC,SAAS,GAAG5F,UAAU,aAAVA,UAAU,wCAAVA,UAAU,CAAE6F,yBAAyB,kDAArC,sBAAwClB,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;YAChF,IAAMmB,mBAAmB,GAAG,WAAU,aAAV9F,UAAU,gDAAVA,UAAU,CAAE0F,UAAU,0DAAtB,sBAAyBf,GAAG,CAAC,KAAI,EAAE;YAE/D,IAAM1B,KAAK,GAAG;cAAE8C,YAAY,EAAE/F,UAAU,aAAVA,UAAU,gDAAVA,UAAU,CAAEgG,WAAW,0DAAvB,sBAA0BrB,GAAG;YAAC,CAAE,IAAI,IAAI;YAEtE,IAAMgB,GAAG,GAAG,WAAU,aAAV3F,UAAU,+CAAVA,UAAU,CAAEiG,QAAQ,kFAApB,qBAAuBtB,GAAG,CAAC,0DAA3B,sBAA6BgB,GAAG,KAAI,IAAI;YACpD,IAAMtB,KAAK,GAAG,WAAU,aAAVrE,UAAU,gDAAVA,UAAU,CAAEiG,QAAQ,mFAApB,sBAAuBtB,GAAG,CAAC,0DAA3B,sBAA6BK,KAAK,KAAI,IAAI;YACxD,IAAMkB,IAAI,GACRP,GAAG,IAAItB,KAAK,mCAEFsB,GAAG,GAAG;cAAEA,GAAG,EAAHA;YAAG,CAAE,GAAG,EAAE,GAClBtB,KAAK,GAAG;cAAEA,KAAK,EAALA;YAAK,CAAE,GAAG,EAAE,IAE5B,IAAI;YAEV,IAAM8B,aAAa,GAAG,WAAU,aAAVnG,UAAU,uBAAVA,UAAU,CAAEyB,cAAc,KAAI,EAAE;YACtD,IAAM2E,gBAAgB,GAAGD,aAAa,CAACzE,IAAI,CAAC,UAAC7B,CAAM;cAAA,OAAK,EAAC,aAADA,CAAC,uBAADA,CAAC,CAAEiB,EAAE,OAAK0D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE3D,MAAM;YAAA,EAAC;YAE/Ee,YAAY,CAACP,OAAO,CAACY,SAAS,CAACoE,IAAI;cACjCC,UAAU,EAAEV,SAAS;cACrBW,eAAe,EAAET,mBAAmB;cACpCU,OAAO,oBACDvD,KAAK,IAAIiD,IAAI,mCAEPjD,KAAK,GAAG;gBAAEA,KAAK,EAALA;cAAK,CAAE,GAAG,EAAE,GACtBiD,IAAI,GAAG;gBAAEA,IAAI,EAAJA;cAAI,CAAE,GAAG,EAAE,IAE1B,EAAE,CACP;cACDrF,MAAM,EAAE2D,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE3D,MAAM;cACpB4F,UAAU;gBACR1B,KAAK,EAALA,KAAK;gBACLH,IAAI,EAAE7D,UAAU,CAAC6D,IAAI;cAAC,GAClBY,QAAQ,GAAG;gBAAEkB,SAAS,EAAElB;cAAQ,CAAE,GAAG,EAAE,GACvCC,cAAc,GAAG;gBAAEc,eAAe,EAAEd;cAAc,CAAE,GAAG,EAAE,CAC9D;cACD3F,QAAQ,EAARA;YAAQ,GACJkF,KAAK,GAAG;cAAEA,KAAK,EAALA;YAAK,CAAE,GAAG,EAAE,GACtBE,YAAY,GAAG;cAAEyB,aAAa,EAAEzB;YAAY,CAAE,GAAG,EAAE,GACnDE,OAAO,GAAG;cAAEA,OAAO,EAAPA;YAAO,CAAE,GAAG,EAAE,GAC1BgB,gBAAgB,GAAG;cAAEQ,UAAU,EAAER,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEzE;YAAI,CAAE,GAAG,EAAE,EAClE;;QACH;UAAA;QAAA;UAAA;QAAA;MAAA;MA1EH,oDAAmC;QAAA;QAAA,yBAI/B;;IAuEH;MAAA;IAAA;MAAA;IAAA;;EAGH,OAAOC,YAAY;AACrB;AAnJAiF;AAqJA,SAAgBC,cAAc,CAACC,MAAW;EAAA;EACxC,IAAMC,KAAK,GAAG,CAAC,EACbD,MAAM,aAANA,MAAM,kCAANA,MAAM,CAAE1F,OAAO,4CAAf,gBAAiB4D,WAAW,IAC5B8B,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiB8D,WAAW,IAC5B4B,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiBgE,YAAY,IAC7B0B,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiB4F,YAAY,IAC7BF,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiBwD,SAAS,IAC1BkC,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiB6F,SAAS,IAC1BH,MAAM,aAANA,MAAM,mCAANA,MAAM,CAAE1F,OAAO,6CAAf,iBAAiB4C,eAAe,IAChC,OAAM,aAAN8C,MAAM,2CAANA,MAAM,CAAE1F,OAAO,qDAAf,iBAAiB8F,SAAS,MAAKC,SAAS,CACzC;EAED,OAAOJ,KAAK;AACd;AAbAH","names":["isValidMode","mode","convertFilterBy","filterBy","convertFilterVariables","filterVariable","Array","isArray","from","Set","map","e","variable","convertGeofence","oldDisplay","geo_variable","enable_user","geo_enable_user","events","geo_events","events_label","geo_events_label","limit","geo_limit","type_enable_user","geo_type_enable_user","bucket","origin","id","parserIcon","cssClass","convertGroupBy","oldGroupBy","convert","oldWidget","display","geofence","filter_by","canListByDevice","filter_devices","find","name","newStructure","dashboard","center_options","center_all_variables","show_only_last_values","variables","custom_text","filter_title","SEARCH_FOR_FILTER","direction_variable","show_directions","show_current_direction","filter_list_by","filter_variables","filter_variable","group_by","group_markers","header_buttons","help","infobox_config","date_format","image","behavior","object_fit","position","show_window_closed","infowindow_closed","initial_mode","intervals","common_1","max_points","data","query","show_filter","show_icons_for_all","icons_for_all","show_lines","connect_markers","show_lines_animated","ant_path","initial_zoom","label","realtime","type","item","is_hide","is_global_time_data","key","icon","map_icons","css_class","color","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","hasConditions","vars_conditions","iconType","iconConditions","conditions","url","aliasType","vars_that_have_conditions","iconLabelConditions","static_image","vars_images","vars_url","link","filterDevices","findFilterDevice","push","alias_type","icon_conditions","infobox","pin_config","icon_type","number_format","originName","exports","isOldStructure","widget","isOld","numberformat","ignore_00","watermark","undefined"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\map.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old MAP to new MAP\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, convertInterval } from \"./common/\";\n\nfunction isValidMode(mode: string): boolean {\n  return mode === \"basic\" || mode === \"dark\" || mode === \"light\" || mode === \"sattelite\";\n}\n\nfunction convertFilterBy(filterBy: string): string {\n  switch (filterBy) {\n    case \"values\":\n      return \"value\";\n    case \"devices\":\n      return \"device\";\n    // When filterBy is null, the default is \"variable\" for legacy\n    default:\n      return \"variable\";\n  }\n}\n\nfunction convertFilterVariables(filterVariable: any): any {\n  if (!Array.isArray(filterVariable)) {\n    return [];\n  }\n\n  // Remove duplicate strings\n  return [...Array.from(new Set(filterVariable?.map((e) => e?.variable) || []))];\n}\n\nfunction convertGeofence(oldDisplay: any): any {\n  if (!oldDisplay?.geo_variable) {\n    return null;\n  }\n  return {\n    enable_user: oldDisplay?.geo_enable_user,\n    events: oldDisplay?.geo_events || [],\n    events_label: oldDisplay?.geo_events_label,\n    limit: oldDisplay?.geo_limit,\n    type_enable_user: oldDisplay?.geo_type_enable_user || \"circle\",\n    variable: {\n      bucket: oldDisplay?.geo_variable?.origin?.bucket,\n      origin: oldDisplay?.geo_variable?.origin?.id,\n      variable: oldDisplay?.geo_variable?.variable,\n    },\n  };\n}\n\n/**\n * Some icons use the old form\n */\nfunction parserIcon(cssClass: string): string {\n  switch (cssClass) {\n    case \"flaticon flaticon-car95\":\n      return \"car\";\n    case \"flaticon flaticon-pin56\":\n      return \"location\";\n    case \"flaticon flaticon-home152\":\n      return \"residence\";\n    case \"flaticon flaticon-vehicle12\":\n      return \"bus\";\n    case \"flaticon flaticon-scooter8\":\n      return \"motorcycle\";\n    case \"flaticon flaticon-delivery51\":\n      return \"truck\";\n    case \"flaticon flaticon-mail10\":\n      return \"mail\";\n    case \"flaticon flaticon-home153\":\n      return \"residence\";\n    default:\n      return cssClass;\n  }\n}\n\nfunction convertGroupBy(oldGroupBy: string): string {\n  if (oldGroupBy === \"date\") {\n    return \"time\";\n  }\n  return oldGroupBy ?? \"time\";\n}\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n  const geofence = convertGeofence(oldDisplay);\n  const filterBy = convertFilterBy(oldDisplay?.filter_by);\n  const canListByDevice = !!oldDisplay.filter_devices?.find((e: any) => e?.name) || false;\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      center_options: {\n        center_all_variables: true,\n        show_only_last_values: false,\n        variables: [],\n      },\n      custom_text: {\n        ...(oldDisplay?.filter_title ? { SEARCH_FOR_FILTER: oldDisplay?.filter_title } : {}),\n      },\n      direction_variable: oldDisplay?.show_directions\n        ? {\n            show_current_direction: !!oldDisplay?.show_current_direction,\n            variable: {\n              origin: oldDisplay?.direction_variable?.origin?.id,\n              variable: oldDisplay?.direction_variable?.variable,\n            },\n          }\n        : {},\n      filter_by: filterBy,\n      filter_list_by: canListByDevice && filterBy === \"device\" ? \"device\" : \"variable\", // The old widget does not have this feature\n      filter_variables: convertFilterVariables(oldDisplay?.filter_variable),\n      group_by: convertGroupBy(oldDisplay?.group_by),\n      group_markers: oldDisplay?.group_markers ?? true,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      infobox_config: {\n        date_format: \"\",\n        image: {\n          behavior: \"landscape\",\n          object_fit: \"contain\",\n          position: \"top\",\n        },\n        show_window_closed: oldDisplay?.infowindow_closed ? oldDisplay?.infowindow_closed : true,\n      },\n      initial_mode: isValidMode(oldDisplay?.mode) ? oldDisplay?.mode : \"basic\",\n      intervals: oldDisplay?.intervals?.map(convertInterval) || [],\n      max_points: oldWidget?.data?.[0]?.query === \"last_location\" ? 1 : oldDisplay?.max_points,\n      show_directions: !!oldDisplay?.show_directions,\n      show_filter: !!oldDisplay?.show_filter,\n      show_icons_for_all: oldDisplay?.icons_for_all,\n      show_lines: !!oldDisplay?.connect_markers,\n      show_lines_animated: !!oldDisplay?.ant_path,\n      variables: [],\n      ...(geofence ? { geofence } : {}),\n      ...(oldDisplay?.initial_zoom !== 0 ? { initial_zoom: oldDisplay?.initial_zoom } : {}),\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"map\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    if (oldWidget?.query === \"last_location\") {\n      newStructure.display.max_points = 1;\n    }\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide || item?.is_global_time_data) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n        /**\n         * Getting the icon svg\n         */\n        const icon = oldDisplay?.map_icons?.[item.origin]?.css_class || null;\n        const color = oldDisplay?.map_icons?.[item.origin]?.color || null;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\n\n        const hasConditions = oldDisplay?.vars_conditions?.[`${item?.origin}`]?.variable === variable;\n        const iconType = hasConditions ? \"conditional\" : \"fixed\";\n\n        const iconConditions = hasConditions ? oldDisplay?.vars_conditions?.[`${item?.origin}`]?.conditions : null;\n\n        /**\n         * If the pin was not set, the default value is the\n         * map-marker.\n         */\n        if (iconConditions && !iconConditions?.url) {\n          iconConditions.url = \"https://svg.internal.tago.io/map-marker.svg\";\n        }\n\n        const aliasType = oldDisplay?.vars_that_have_conditions?.[key] ? \"icon\" : \"text\";\n        const iconLabelConditions = oldDisplay?.conditions?.[key] || [];\n\n        const image = { static_image: oldDisplay?.vars_images?.[key] } || null;\n\n        const url = oldDisplay?.vars_url?.[key]?.url || null;\n        const label = oldDisplay?.vars_url?.[key]?.alias || null;\n        const link =\n          url || label\n            ? {\n                ...(url ? { url } : {}),\n                ...(label ? { label } : {}),\n              }\n            : null;\n\n        const filterDevices = oldDisplay?.filter_devices || [];\n        const findFilterDevice = filterDevices.find((e: any) => e?.id === item?.origin);\n\n        newStructure.display.variables.push({\n          alias_type: aliasType,\n          icon_conditions: iconLabelConditions,\n          infobox: {\n            ...(image || link\n              ? {\n                  ...(image ? { image } : {}),\n                  ...(link ? { link } : {}),\n                }\n              : {}),\n          },\n          origin: item?.origin,\n          pin_config: {\n            color,\n            icon: parserIcon(icon),\n            ...(iconType ? { icon_type: iconType } : {}),\n            ...(iconConditions ? { icon_conditions: iconConditions } : {}),\n          },\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n          ...(formula ? { formula } : {}),\n          ...(findFilterDevice ? { originName: findFilterDevice?.name } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.vars_formula ||\n    widget?.display?.numberformat ||\n    widget?.display?.map_icons ||\n    widget?.display?.ignore_00 ||\n    widget?.display?.connect_markers ||\n    widget?.display?.watermark !== undefined\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}