{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false\n      },\n      range: (0, common_1.convertRange)(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: null,\n          outline: null,\n          text: null,\n          text_border: null\n        }\n      }\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"dial\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key] && !newStructure.display?.formula) {\n          newStructure.display.formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n    if (!newStructure.display?.formula) {\n      newStructure.display.formula = {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\"\n      };\n    }\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula || widget?.display?.gauge_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","decimalsString","numberformat","split","decimals","length","newStructure","dashboard","alias","header_buttons","help","number_format","show_thousand","range","show_variables","hide_variables","theme","color","background","fill","outline","text","text_border","id","label","realtime","type","Array","isArray","data","item","is_hide","variable","variables","key","origin","vars_format","vars_formula","formula","vars_labels","fixed_unit","unit","unit_type","exports","isOldStructure","widget","isOld","gauge_type"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\dial.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old DIAL to new DIAL.\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, convertRange } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false,\n      },\n      range: convertRange(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: null,\n          outline: null,\n          text: null,\n          text_border: null,\n        },\n      },\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"dial\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key] && !newStructure.display?.formula) {\n          newStructure.display.formula = convertFormula(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n\n    if (!newStructure.display?.formula) {\n      newStructure.display.formula = {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\",\n      };\n    }\n\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.vars_formula ||\n    widget?.display?.gauge_type\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}