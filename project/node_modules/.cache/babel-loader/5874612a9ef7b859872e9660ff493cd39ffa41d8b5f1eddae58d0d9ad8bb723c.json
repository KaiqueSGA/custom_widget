{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Notification = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Notification, _TagoIOModule_1$defau);\n  var _super = _createSuper(Notification);\n  function Notification() {\n    _classCallCheck(this, Notification);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Notification, [{\n    key: \"send\",\n    value:\n    /**\r\n     * Send Notification\r\n     * You can add ref_id from a bucket or dashboard,\r\n     * if it is valid it will show up a button Go To Dashboard\r\n     * Any account with share of the dashboard/bucket will receive too.\r\n     * @param notification Notification Object\r\n     */\n    function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(notification) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/analysis/services/notification/send\",\n                  method: \"POST\",\n                  body: notification\n                });\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }]);\n  return Notification;\n}(TagoIOModule_1.default);\nexports.default = Notification;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AAA8E,IAIxEA,YAAa;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACjB;;;;;;;IAAA;MAAA,uEAOO,iBAAWC,YAAgC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC3B,IAAI,CAACC,SAAS,CAAS;kBAC1CC,IAAI,EAAE,sCAAsC;kBAC5CC,MAAM,EAAE,MAAM;kBACdC,IAAI,EAAEJ;iBACP,CAAC;cAAA;gBAJIK,MAAM;gBAAA,iCAMLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAhBwBC,sBAAiC;AAmB5DC,kBAAeR,YAAY","names":["Notification","notification","doRequest","path","method","body","result","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Services\\Notification.ts"],"sourcesContent":["import TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport { GenericID } from \"../../common/common.types\";\r\nimport { NotificationCreate } from \"../Account/notifications.types\";\r\n\r\nclass Notification extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Send Notification\r\n   * You can add ref_id from a bucket or dashboard,\r\n   * if it is valid it will show up a button Go To Dashboard\r\n   * Any account with share of the dashboard/bucket will receive too.\r\n   * @param notification Notification Object\r\n   */\r\n  public async send(notification: NotificationCreate): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: \"/analysis/services/notification/send\",\r\n      method: \"POST\",\r\n      body: notification,\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}