{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Networks = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Networks, _TagoIOModule_1$defau);\n  var _super = _createSuper(Networks);\n  function Networks() {\n    _classCallCheck(this, Networks);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Networks, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all Networks from account\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     * }\n     * ```\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Get Info of the Network\n     * @param networkID Network identification\n     * @param fields Fields to fetch.\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(networkID) {\n        var fields,\n          result,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fields = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [\"id\", \"name\"];\n                _context2.next = 3;\n                return this.doRequest({\n                  path: \"/integration/network/\".concat(networkID),\n                  method: \"GET\",\n                  params: {\n                    fields: fields\n                  }\n                });\n              case 3:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function info(_x2) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Generates and retrieves a new network from the account\n     * @param connectorObj Object data to create new Network\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connectorObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/\",\n                  method: \"POST\",\n                  body: _objectSpread({}, connectorObj)\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function create(_x3) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Modify any property of the network\n     * @param networkID Network identification\n     * @param connectorObj Object data to create new Network\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(networkID, connectorObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/\".concat(networkID),\n                  method: \"PUT\",\n                  body: _objectSpread({}, connectorObj)\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function edit(_x4, _x5) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Retrieves a list of all tokens\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"name\", \"token\", \"permission\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"created_at,desc\",\n     * }\n     * ```\n     * @param networkID Network ID\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"tokenList\",\n    value: function () {\n      var _tokenList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(networkID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/token/\".concat(networkID),\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"name\", \"token\", \"permission\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"created_at,desc\"\n                  }\n                });\n              case 2:\n                result = _context5.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]);\n                });\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function tokenList(_x6, _x7) {\n        return _tokenList.apply(this, arguments);\n      }\n      return tokenList;\n    }()\n    /**\n     * Generates and retrieves a new token\n     * @param networkID Network ID\n     * @param tokenParams Details of new token\n     */\n  }, {\n    key: \"tokenCreate\",\n    value: function () {\n      var _tokenCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(networkID, tokenParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/token\",\n                  method: \"POST\",\n                  body: _objectSpread({\n                    network: networkID\n                  }, tokenParams)\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function tokenCreate(_x8, _x9) {\n        return _tokenCreate.apply(this, arguments);\n      }\n      return tokenCreate;\n    }()\n    /**\n     * Deletes a token\n     * @param token Token ID\n     */\n  }, {\n    key: \"tokenDelete\",\n    value: function () {\n      var _tokenDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(token) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/integration/network/token/\".concat(token),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function tokenDelete(_x10) {\n        return _tokenDelete.apply(this, arguments);\n      }\n      return tokenDelete;\n    }()\n  }]);\n  return Networks;\n}(TagoIOModule_1.default);\nexports.default = Networks;","map":{"version":3,"mappings":"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","names":["Networks","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","result","networkID","connectorObj","body","map","data","tokenParams","network","token","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Integration.Networks.ts"],"sourcesContent":["import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { NetworkCreateInfo, NetworkInfo, NetworkQuery, NetworkTokenInfo } from \"./integration.networks.types\";\n\nclass Networks extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all Networks from account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: NetworkQuery): Promise<NetworkInfo[]> {\n    const result = await this.doRequest<NetworkInfo[]>({\n      path: \"/integration/network/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Network\n   * @param networkID Network identification\n   * @param fields Fields to fetch.\n   */\n  public async info(networkID: GenericID, fields = [\"id\", \"name\"]): Promise<NetworkInfo> {\n    const result = await this.doRequest<NetworkInfo>({\n      path: `/integration/network/${networkID}`,\n      method: \"GET\",\n      params: {\n        fields,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new network from the account\n   * @param connectorObj Object data to create new Network\n   */\n  public async create(connectorObj: NetworkCreateInfo): Promise<{ network: GenericID }> {\n    const result = await this.doRequest<{ network: GenericID }>({\n      path: `/integration/network/`,\n      method: \"POST\",\n      body: {\n        ...connectorObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the network\n   * @param networkID Network identification\n   * @param connectorObj Object data to create new Network\n   */\n  public async edit(networkID: GenericID, connectorObj: Partial<NetworkCreateInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/integration/network/${networkID}`,\n      method: \"PUT\",\n      body: {\n        ...connectorObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list of all tokens\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"name\", \"token\", \"permission\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"created_at,desc\",\n   * }\n   * ```\n   * @param networkID Network ID\n   * @param queryObj Search query params\n   */\n  public async tokenList(networkID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<NetworkTokenInfo>[]> {\n    let result = await this.doRequest<Partial<NetworkTokenInfo>[]>({\n      path: `/integration/network/token/${networkID}`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token\n   * @param networkID Network ID\n   * @param tokenParams Details of new token\n   */\n  public async tokenCreate(networkID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\n    const result = await this.doRequest<TokenCreateResponse>({\n      path: `/integration/network/token`,\n      method: \"POST\",\n      body: { network: networkID, ...tokenParams },\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a token\n   * @param token Token ID\n   */\n  public async tokenDelete(token: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/integration/network/token/${token}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n}\n\nexport default Networks;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}