{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nconst convertFields_1 = require(\"./convertFields\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      buttons: [(0, convertFields_1.convertSubmitButton)(oldDisplay, oldWidget?.analysis_run)],\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      sections: [],\n      theme: {\n        color: {\n          background: null,\n          field: null,\n          header: null\n        }\n      }\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"form\"\n  };\n  const section = {\n    description: \"\",\n    fields: [],\n    id: (0, common_1.generateWidgetItemId)(),\n    show_border: false,\n    show_caption: false,\n    title: \"\"\n  };\n  const fieldsKeys = Object.keys(oldDisplay?.form?.fields || []);\n  for (const key of fieldsKeys) {\n    const oldField = oldDisplay?.form?.fields[key];\n    const visibilityConditions = oldField?.visibility_conditions && Array.isArray(oldField?.visibility_conditions) ? oldField?.visibility_conditions.map(e => ({\n      condition: e?.condition,\n      field: `${e?.variable}${e?.origin}`,\n      value: e?.value\n    })) : [];\n    /**\n     * Old input form only use one field per variable,\n     * so there is no problem to use his key as an id\n     * when some fields use the id to reference it, it\n     * will be easier to apply\n     */\n    const field = {\n      ...oldField,\n      id: key,\n      visibility_conditions: visibilityConditions\n    };\n    const convertedField = (0, convertFields_1.convertField)(field, oldDisplay?.form?.show_map);\n    if (convertedField) {\n      section.fields.push(convertedField);\n    }\n  }\n  newStructure.display.sections.push(section);\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(!widget?.display?.buttons || widget?.display?.form || widget?.display?.input_type || widget?.display?.bypass_bucket || widget?.display?.label_submit);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":";;;;;;AAKA;AACA;AAEA,SAAgBA,OAAO,CAACC,SAAc;EACpC,MAAMC,UAAU,GAAGD,SAAS,CAACE,OAAO,IAAI,EAAE;EAE1C,MAAMC,YAAY,GAAQ;IACxBC,SAAS,EAAEJ,SAAS,CAACI,SAAS;IAC9BF,OAAO,EAAE;MACPG,OAAO,EAAE,CAAC,uCAAmB,EAACJ,UAAU,EAAED,SAAS,EAAEM,YAAY,CAAC,CAAC;MACnEC,cAAc,EAAEN,UAAU,CAACM,cAAc,IAAI,EAAE;MAC/CC,IAAI,EAAEP,UAAU,CAACO,IAAI,IAAI,EAAE;MAC3BC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;QACLC,KAAK,EAAE;UACLC,UAAU,EAAE,IAAI;UAChBC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE;;;KAGb;IACDC,EAAE,EAAEf,SAAS,CAACe,EAAE;IAChBC,KAAK,EAAEhB,SAAS,CAACgB,KAAK;IACtBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;GACP;EAED,MAAMC,OAAO,GAAQ;IACnBC,WAAW,EAAE,EAAE;IACfC,MAAM,EAAE,EAAE;IACVN,EAAE,EAAE,iCAAoB,GAAE;IAC1BO,WAAW,EAAE,KAAK;IAClBC,YAAY,EAAE,KAAK;IACnBC,KAAK,EAAE;GACR;EAED,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAAC1B,UAAU,EAAE2B,IAAI,EAAEP,MAAM,IAAI,EAAE,CAAC;EAE9D,KAAK,MAAMQ,GAAG,IAAIJ,UAAU,EAAE;IAC5B,MAAMK,QAAQ,GAAG7B,UAAU,EAAE2B,IAAI,EAAEP,MAAM,CAACQ,GAAG,CAAC;IAC9C,MAAME,oBAAoB,GACxBD,QAAQ,EAAEE,qBAAqB,IAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,EAAEE,qBAAqB,CAAC,GAC7EF,QAAQ,EAAEE,qBAAqB,CAACG,GAAG,CAAEC,CAAM,KAAM;MAC/CC,SAAS,EAAED,CAAC,EAAEC,SAAS;MACvBxB,KAAK,EAAE,GAAGuB,CAAC,EAAEE,QAAQ,GAAGF,CAAC,EAAEG,MAAM,EAAE;MACnCC,KAAK,EAAEJ,CAAC,EAAEI;KACX,CAAC,CAAC,GACH,EAAE;IAER;;;;;;IAMA,MAAM3B,KAAK,GAAG;MACZ,GAAGiB,QAAQ;MACXf,EAAE,EAAEc,GAAG;MACPG,qBAAqB,EAAED;KACxB;IAED,MAAMU,cAAc,GAAG,gCAAY,EAAC5B,KAAK,EAAEZ,UAAU,EAAE2B,IAAI,EAAEc,QAAQ,CAAC;IAEtE,IAAID,cAAc,EAAE;MAClBtB,OAAO,CAACE,MAAM,CAACsB,IAAI,CAACF,cAAc,CAAC;;;EAIvCtC,YAAY,CAACD,OAAO,CAACO,QAAQ,CAACkC,IAAI,CAACxB,OAAO,CAAC;EAE3C,IAAIc,KAAK,CAACC,OAAO,CAAClC,SAAS,CAAC4C,IAAI,CAAC,EAAE;IACjCzC,YAAY,CAACyC,IAAI,GAAG5C,SAAS,CAAC4C,IAAI;;EAGpC,OAAOzC,YAAY;AACrB;AAxEA0C;AA0EA,SAAgBC,cAAc,CAACC,MAAW;EACxC,MAAMC,KAAK,GAAG,CAAC,EACb,CAACD,MAAM,EAAE7C,OAAO,EAAEG,OAAO,IACzB0C,MAAM,EAAE7C,OAAO,EAAE0B,IAAI,IACrBmB,MAAM,EAAE7C,OAAO,EAAE+C,UAAU,IAC3BF,MAAM,EAAE7C,OAAO,EAAEgD,aAAa,IAC9BH,MAAM,EAAE7C,OAAO,EAAEiD,YAAY,CAC9B;EAED,OAAOH,KAAK;AACd;AAVAH","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","buttons","analysis_run","header_buttons","help","sections","theme","color","background","field","header","id","label","realtime","type","section","description","fields","show_border","show_caption","title","fieldsKeys","Object","keys","form","key","oldField","visibilityConditions","visibility_conditions","Array","isArray","map","e","condition","variable","origin","value","convertedField","show_map","push","data","exports","isOldStructure","widget","isOld","input_type","bypass_bucket","label_submit"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\inputform.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old INPUT FORM to new INPUT FORM\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { generateWidgetItemId } from \"./common\";\nimport { convertField, convertSubmitButton } from \"./convertFields\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      buttons: [convertSubmitButton(oldDisplay, oldWidget?.analysis_run)],\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      sections: [],\n      theme: {\n        color: {\n          background: null,\n          field: null,\n          header: null,\n        },\n      },\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"form\",\n  };\n\n  const section: any = {\n    description: \"\",\n    fields: [],\n    id: generateWidgetItemId(),\n    show_border: false,\n    show_caption: false,\n    title: \"\",\n  };\n\n  const fieldsKeys = Object.keys(oldDisplay?.form?.fields || []);\n\n  for (const key of fieldsKeys) {\n    const oldField = oldDisplay?.form?.fields[key];\n    const visibilityConditions =\n      oldField?.visibility_conditions && Array.isArray(oldField?.visibility_conditions)\n        ? oldField?.visibility_conditions.map((e: any) => ({\n            condition: e?.condition,\n            field: `${e?.variable}${e?.origin}`,\n            value: e?.value,\n          }))\n        : [];\n\n    /**\n     * Old input form only use one field per variable,\n     * so there is no problem to use his key as an id\n     * when some fields use the id to reference it, it\n     * will be easier to apply\n     */\n    const field = {\n      ...oldField,\n      id: key,\n      visibility_conditions: visibilityConditions,\n    };\n\n    const convertedField = convertField(field, oldDisplay?.form?.show_map);\n\n    if (convertedField) {\n      section.fields.push(convertedField);\n    }\n  }\n\n  newStructure.display.sections.push(section);\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data;\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    !widget?.display?.buttons ||\n    widget?.display?.form ||\n    widget?.display?.input_type ||\n    widget?.display?.bypass_bucket ||\n    widget?.display?.label_submit\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}