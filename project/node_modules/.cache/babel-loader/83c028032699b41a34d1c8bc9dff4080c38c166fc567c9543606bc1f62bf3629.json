{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.channels = void 0;\nconst socket_io_client_1 = __importDefault(require(\"socket.io-client\"));\nconst config_1 = __importDefault(require(\"../config\"));\nconst regions_1 = __importDefault(require(\"../regions\"));\n/**\r\n * TagoIO Socket Connection\r\n * In some cases you will should emit channels to subscribe/unsubscribe\r\n * example:\r\n *  - socket.emit('attach', 'bucket', '5d30e5f8577736001b1a5e11');\r\n *  - socket.emit('unattach', 'bucket', '5d30e5f8577736001b1a5e11');\r\n * @internal\r\n * @param params TagoIO Token and Region\r\n * @param socketIOExtraOptions SocketIO Extra Options\r\n */\nfunction apiSocket(params) {\n  let socketIOExtraOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const socket = socket_io_client_1.default.connect((0, regions_1.default)(params.region).realtime, {\n    ...config_1.default.socketOpts,\n    query: {\n      token: params.token\n    },\n    ...socketIOExtraOptions\n  });\n  return socket;\n}\n/**\r\n * @internal\r\n */\nconst channels = {\n  notification: \"notification::data\",\n  analysisConsole: \"analysis::console\",\n  analysisTrigger: \"analysis::trigger\",\n  bucketData: \"bucket::data\"\n};\nexports.channels = channels;\nexports.default = apiSocket;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAGA;;;;;;;;;;AAUA,SAASA,SAAS,CAACC,MAA2B,EAA2B;EAAA,IAAzBC,oBAAoB,uEAAG,EAAE;EACvE,MAAMC,MAAM,GAAGC,0BAAE,CAACC,OAAO,CAAC,qBAAO,EAACJ,MAAM,CAACK,MAAM,CAAC,CAACC,QAAQ,EAAE;IACzD,GAAGC,gBAAM,CAACC,UAAU;IACpBC,KAAK,EAAE;MACLC,KAAK,EAAEV,MAAM,CAACU;KACf;IACD,GAAGT;GACJ,CAAC;EAEF,OAAOC,MAAM;AACf;AAEA;;;AAGA,MAAMS,QAAQ,GAAG;EACfC,YAAY,EAAE,oBAAoB;EAClCC,eAAe,EAAE,mBAAmB;EACpCC,eAAe,EAAE,mBAAmB;EACpCC,UAAU,EAAE;CACb;AAGQC;AADTA,kBAAejB,SAAS","names":["apiSocket","params","socketIOExtraOptions","socket","socket_io_client_1","connect","region","realtime","config_1","socketOpts","query","token","channels","notification","analysisConsole","analysisTrigger","bucketData","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\infrastructure\\apiSocket.ts"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport config from \"../config\";\r\nimport regions from \"../regions\";\r\nimport { GenericModuleParams } from \"../common/TagoIOModule\";\r\n\r\n/**\r\n * TagoIO Socket Connection\r\n * In some cases you will should emit channels to subscribe/unsubscribe\r\n * example:\r\n *  - socket.emit('attach', 'bucket', '5d30e5f8577736001b1a5e11');\r\n *  - socket.emit('unattach', 'bucket', '5d30e5f8577736001b1a5e11');\r\n * @internal\r\n * @param params TagoIO Token and Region\r\n * @param socketIOExtraOptions SocketIO Extra Options\r\n */\r\nfunction apiSocket(params: GenericModuleParams, socketIOExtraOptions = {}) {\r\n  const socket = io.connect(regions(params.region).realtime, {\r\n    ...config.socketOpts,\r\n    query: {\r\n      token: params.token,\r\n    },\r\n    ...socketIOExtraOptions,\r\n  });\r\n\r\n  return socket;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nconst channels = {\r\n  notification: \"notification::data\",\r\n  analysisConsole: \"analysis::console\",\r\n  analysisTrigger: \"analysis::trigger\",\r\n  bucketData: \"bucket::data\",\r\n};\r\n\r\nexport default apiSocket;\r\nexport { channels };\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}