{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Connectors = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Connectors, _TagoIOModule_1$defau);\n  var _super = _createSuper(Connectors);\n  function Connectors() {\n    _classCallCheck(this, Connectors);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Connectors, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all connectors from account\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     * }\n     * ```\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/integration/connector/\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Get Info of the Connector\n     * @param connectorID Connector identification\n     * @param fields Fields to fetch.\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connectorID, fields) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/integration/connector/\".concat(connectorID),\n                  method: \"GET\",\n                  params: {\n                    fields: fields\n                  }\n                });\n              case 2:\n                result = _context2.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\"]);\n                return _context2.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function info(_x2, _x3) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Generates and retrieves a new connector from the account\n     * @param connectorObj Object data to create new Connector\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(connectorObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/integration/connector/\",\n                  method: \"POST\",\n                  body: _objectSpread({}, connectorObj)\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function create(_x4) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Modify any property of the connector\n     * @param connectorID Connector identification\n     * @param connectorObj Object data to create new Connector\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connectorID, connectorObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/integration/connector/\".concat(connectorID),\n                  method: \"PUT\",\n                  body: _objectSpread({}, connectorObj)\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function edit(_x5, _x6) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n  }]);\n  return Connectors;\n}(TagoIOModule_1.default);\nexports.default = Connectors;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AACA;AACA;AAA6C,IAGvCA,UAAW;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACf;;;;;;;;;;;;;;IAAA;MAAA,uEAcO,iBAAWC,QAAyB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACtB,IAAI,CAACC,SAAS,CAAkB;kBACjDC,IAAI,EAAE,yBAAyB;kBAC/BC,MAAM,EAAE,KAAK;kBACbC,MAAM,EAAE;oBACNC,IAAI,EAAE,SAAQ,aAARL,QAAQ,uBAARA,QAAQ,CAAEK,IAAI,KAAI,CAAC;oBACzBC,MAAM,EAAE,SAAQ,aAARN,QAAQ,uBAARA,QAAQ,CAAEM,MAAM,KAAI,CAAC,IAAI,EAAE,MAAM,CAAC;oBAC1CC,MAAM,EAAE,SAAQ,aAARP,QAAQ,uBAARA,QAAQ,CAAEO,MAAM,KAAI,EAAE;oBAC9BC,MAAM,EAAE,SAAQ,aAARR,QAAQ,uBAARA,QAAQ,CAAEQ,MAAM,KAAI,EAAE;oBAC9BC,OAAO,EAAET,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAES,OAAO,aAAMT,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,cAAIT,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,IAAK;;iBAElF,CAAC;cAAA;gBAVEC,MAAM;gBAYVA,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,UAACC,IAAI;kBAAA,OAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;gBAAA,EAAC;gBAAC,iCAEvEF,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,uEAKO,kBAAWG,WAAsB,EAAEP,MAAiB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACtC,IAAI,CAACL,SAAS,CAAgB;kBAC/CC,IAAI,mCAA4BW,WAAW,CAAE;kBAC7CV,MAAM,EAAE,KAAK;kBACbC,MAAM,EAAE;oBACNE,MAAM,EAANA;;iBAEH,CAAC;cAAA;gBANEI,MAAM;gBAQVA,MAAM,GAAG,wBAAU,EAACA,MAAM,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;gBAAC,kCAEnDA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,yEAIO,kBAAaI,YAAiC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC9B,IAAI,CAACb,SAAS,CAA2B;kBAC5DC,IAAI,2BAA2B;kBAC/BC,MAAM,EAAE,MAAM;kBACdY,IAAI,oBACCD,YAAY;iBAElB,CAAC;cAAA;gBANIJ,MAAM;gBAAA,kCAQLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,uEAKO,kBAAWG,WAAsB,EAAEC,YAA0C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC7D,IAAI,CAACb,SAAS,CAAS;kBAC1CC,IAAI,mCAA4BW,WAAW,CAAE;kBAC7CV,MAAM,EAAE,KAAK;kBACbY,IAAI,oBACCD,YAAY;iBAElB,CAAC;cAAA;gBANIJ,MAAM;gBAAA,kCAQLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAnFsBM,sBAAiC;AAsF1DC,kBAAelB,UAAU","names":["Connectors","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","result","map","data","connectorID","connectorObj","body","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Integration.Connectors.ts"],"sourcesContent":["import { GenericID } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { ConnectorCreateInfo, ConnectorInfo, ConnectorQuery } from \"./integration.connectors.types\";\n\nclass Connectors extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all connectors from account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: ConnectorQuery): Promise<ConnectorInfo[]> {\n    let result = await this.doRequest<ConnectorInfo[]>({\n      path: \"/integration/connector/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Connector\n   * @param connectorID Connector identification\n   * @param fields Fields to fetch.\n   */\n  public async info(connectorID: GenericID, fields?: string[]): Promise<ConnectorInfo> {\n    let result = await this.doRequest<ConnectorInfo>({\n      path: `/integration/connector/${connectorID}`,\n      method: \"GET\",\n      params: {\n        fields,\n      },\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new connector from the account\n   * @param connectorObj Object data to create new Connector\n   */\n  public async create(connectorObj: ConnectorCreateInfo): Promise<{ connector: GenericID }> {\n    const result = await this.doRequest<{ connector: GenericID }>({\n      path: `/integration/connector/`,\n      method: \"POST\",\n      body: {\n        ...connectorObj,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the connector\n   * @param connectorID Connector identification\n   * @param connectorObj Object data to create new Connector\n   */\n  public async edit(connectorID: GenericID, connectorObj: Partial<ConnectorCreateInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/integration/connector/${connectorID}`,\n      method: \"PUT\",\n      body: {\n        ...connectorObj,\n      },\n    });\n\n    return result;\n  }\n}\n\nexport default Connectors;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}