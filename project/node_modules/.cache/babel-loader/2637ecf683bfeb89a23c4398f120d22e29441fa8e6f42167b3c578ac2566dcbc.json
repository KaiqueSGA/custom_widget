{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var decimalsString = \"\";\n  if (oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.numberformat && typeof (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.numberformat) === \"string\") {\n    var _oldDisplay$numberfor, _oldDisplay$numberfor2;\n    decimalsString = (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$numberfor = oldDisplay.numberformat) === null || _oldDisplay$numberfor === void 0 ? void 0 : (_oldDisplay$numberfor2 = _oldDisplay$numberfor.split(\".\")) === null || _oldDisplay$numberfor2 === void 0 ? void 0 : _oldDisplay$numberfor2[1]) || \"\";\n  }\n  var decimals = decimalsString.length || -1;\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      formula: {\n        fixed_unit: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.unit,\n        unit_type: oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.unit ? \"fixed\" : \"origin\"\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals: decimals,\n        show_thousand: false\n      },\n      range: (0, common_1.convertRange)(oldDisplay),\n      show_variables: !(oldDisplay !== null && oldDisplay !== void 0 && oldDisplay.hide_variables),\n      theme: {\n        color: {\n          background: null,\n          fill: null,\n          outline: null,\n          text: null,\n          text_border: null\n        }\n      }\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"solid\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (item !== null && item !== void 0 && item.is_hide) {\n          continue;\n        }\n        var _iterator2 = _createForOfIteratorHelper(item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$vars_form, _oldDisplay$vars_form3, _oldDisplay$vars_labe, _oldDisplay$vars_labe2;\n            var variable = _step2.value;\n            var key = \"\".concat(item === null || item === void 0 ? void 0 : item.origin).concat(variable);\n            if (oldDisplay !== null && oldDisplay !== void 0 && (_oldDisplay$vars_form = oldDisplay.vars_format) !== null && _oldDisplay$vars_form !== void 0 && _oldDisplay$vars_form[key]) {\n              var _oldDisplay$vars_form2;\n              newStructure.display.number_format = oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_form2 = oldDisplay.vars_format) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[key];\n            }\n            // This is the formula variable\n            if ((_oldDisplay$vars_form3 = oldDisplay.vars_formula) !== null && _oldDisplay$vars_form3 !== void 0 && _oldDisplay$vars_form3[key]) {\n              var _oldDisplay$vars_form4;\n              newStructure.display.formula = (0, common_1.convertFormula)((_oldDisplay$vars_form4 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form4 === void 0 ? void 0 : _oldDisplay$vars_form4[key]);\n            }\n            if (oldDisplay !== null && oldDisplay !== void 0 && (_oldDisplay$vars_labe = oldDisplay.vars_labels) !== null && _oldDisplay$vars_labe !== void 0 && _oldDisplay$vars_labe[key] && (oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_labe2 = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe2 === void 0 ? void 0 : _oldDisplay$vars_labe2[key]) !== variable) {\n              var _oldDisplay$vars_labe3;\n              newStructure.display.alias = oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_labe3 = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe3 === void 0 ? void 0 : _oldDisplay$vars_labe3[key];\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.vars_formula || widget !== null && widget !== void 0 && (_widget$display4 = widget.display) !== null && _widget$display4 !== void 0 && _widget$display4.gauge_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","decimalsString","numberformat","split","decimals","length","newStructure","dashboard","alias","formula","fixed_unit","unit","unit_type","header_buttons","help","number_format","show_thousand","range","show_variables","hide_variables","theme","color","background","fill","outline","text","text_border","id","label","realtime","type","Array","isArray","data","item","is_hide","variables","variable","key","origin","vars_format","vars_formula","vars_labels","exports","isOldStructure","widget","isOld","gauge_type"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\solid.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old SOLID to new SOLID\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, convertRange } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      formula: {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\",\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false,\n      },\n      range: convertRange(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: null,\n          outline: null,\n          text: null,\n          text_border: null,\n        },\n      },\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"solid\",\n  };\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key]) {\n          newStructure.display.formula = convertFormula(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.vars_formula ||\n    widget?.display?.gauge_type\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}