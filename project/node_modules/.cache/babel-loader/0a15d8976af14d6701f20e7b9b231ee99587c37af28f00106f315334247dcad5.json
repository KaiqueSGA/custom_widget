{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Access_1 = __importDefault(require(\"./Access\"));\nvar Actions_1 = __importDefault(require(\"./Actions\"));\nvar Analyses_1 = __importDefault(require(\"./Analyses\"));\nvar Billing_1 = __importDefault(require(\"./Billing\"));\nvar Buckets_1 = __importDefault(require(\"./Buckets\"));\nvar Dashboards_1 = __importDefault(require(\"./Dashboards\"));\nvar Devices_1 = __importDefault(require(\"./Devices\"));\nvar Dictionaries_1 = __importDefault(require(\"./Dictionaries\"));\nvar Explore_1 = __importDefault(require(\"./Explore\"));\nvar Files_1 = __importDefault(require(\"./Files\"));\nvar Notifications_1 = __importDefault(require(\"./Notifications\"));\nvar PaymentHistory_1 = __importDefault(require(\"./PaymentHistory\"));\nvar PaymentMethods_1 = __importDefault(require(\"./PaymentMethods\"));\nvar Plan_1 = __importDefault(require(\"./Plan\"));\nvar Profile_1 = __importDefault(require(\"./Profile\"));\nvar Run_1 = __importDefault(require(\"./Run\"));\nvar ServiceAuthorization_1 = __importDefault(require(\"./ServiceAuthorization\"));\nvar Tags_1 = __importDefault(require(\"./Tags\"));\nvar Template_1 = __importDefault(require(\"./Template\"));\nvar Integration_1 = __importDefault(require(\"./Integration\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar TagoCores_1 = __importDefault(require(\"./TagoCores\"));\n/**\r\n * To set up an account object, you need a token that you need to get from our\r\n * admin website and the region. Make sure to use tokens with the correct\r\n * write/read privileges for the current function that you want to use.\r\n *\r\n * @class Account\r\n * @extends {TagoIOModule<GenericModuleParams>}\r\n */\nvar Account = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Account, _TagoIOModule_1$defau);\n  var _super = _createSuper(Account);\n  function Account() {\n    var _this;\n    _classCallCheck(this, Account);\n    _this = _super.apply(this, arguments);\n    /**\r\n     * Manage actions in account.\r\n     * Be sure to use an account token with “write” permissions when\r\n     * using functions like create, edit and delete.\r\n     */\n    _this.actions = new Actions_1.default(_this.params);\n    /**\r\n     * Manage analysis in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.analysis = new Analyses_1.default(_this.params);\n    /**\r\n     * Manage buckets in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.buckets = new Buckets_1.default(_this.params);\n    /**\r\n     * Manage files in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.files = new Files_1.default(_this.params);\n    /**\r\n     * Manage dashboards in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.dashboards = new Dashboards_1.default(_this.params);\n    /**\r\n     * Manage devices in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.devices = new Devices_1.default(_this.params);\n    /**\r\n     * Manage dictionaries in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.dictionaries = new Dictionaries_1.default(_this.params);\n    /**\r\n     * Manage Billing for the account.\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.billing = new Billing_1.default(_this.params);\n    /**\r\n     * Manage notifications in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.notifications = new Notifications_1.default(_this.params);\n    /**\r\n     * Manage tags in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.tags = new Tags_1.default(_this.params);\n    /**\r\n     * Manage payment methods in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.paymentMethods = new PaymentMethods_1.default(_this.params);\n    /**\r\n     * Manage account plans\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.plan = new Plan_1.default(_this.params);\n    /**\r\n     * Manage payment history in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.paymentHistory = new PaymentHistory_1.default(_this.params);\n    /**\r\n     * Manage explore in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.explore = new Explore_1.default(_this.params);\n    /**\r\n     * Manage connectors in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.integration = new Integration_1.default(_this.params);\n    /**\r\n     * Manage templates in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.template = new Template_1.default(_this.params);\n    /**\r\n     * Manage access in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.accessManagement = new Access_1.default(_this.params);\n    /**\r\n     * Manage run apps in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     *\r\n     */\n    _this.run = new Run_1.default(_this.params);\n    /**\r\n     * Manage services in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.ServiceAuthorization = new ServiceAuthorization_1.default(_this.params);\n    /**\r\n     * Manage profiles in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.profiles = new Profile_1.default(_this.params);\n    /**\r\n     * Manage tagocores in account\r\n     * Be sure to use an account token with “write” permissions when using\r\n     * functions like create, edit and delete.\r\n     */\n    _this.tagocores = new TagoCores_1.default(_this.params);\n    return _this;\n  }\n  /**\r\n   * Gets all account information\r\n   */\n  _createClass(Account, [{\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/account\",\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_login\"]);\n                if (result.options) result.options = (0, dateParser_1.default)(result.options, [\"last_whats_new\"]);\n                return _context.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function info() {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\r\n     * Edit account\r\n     * @param accountObj Account data to edit\r\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/account\",\n                  method: \"PUT\",\n                  body: accountObj\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function edit(_x) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\r\n     * Delete account\r\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/account\",\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\r\n     * Generates and retrieves a new token for the account\r\n     * @param tokenParams Token data\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"passwordChange\",\n    value:\n    /**\r\n     * Change account password\r\n     * @param password New Password\r\n     */\n    function () {\n      var _passwordChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(password) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/account/passwordreset\",\n                  method: \"POST\",\n                  body: {\n                    password: password\n                  }\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function passwordChange(_x2) {\n        return _passwordChange.apply(this, arguments);\n      }\n      return passwordChange;\n    }()\n    /**\r\n     * Create new TagoIO account\r\n     * @param createParams New account details\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"enableOTP\",\n    value:\n    /**\r\n     * Enable OTP for a given OTP Type.\r\n     * You will be requested to confirm the operation with a pin code.\r\n     * @param credentials Credentials\r\n     * @param typeOTP authenticator, sms or email\r\n     */\n    function () {\n      var _enableOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(credentials, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/account/otp/\".concat(typeOTP, \"/enable\"),\n                  method: \"POST\",\n                  body: credentials\n                });\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function enableOTP(_x3, _x4) {\n        return _enableOTP.apply(this, arguments);\n      }\n      return enableOTP;\n    }()\n    /**\r\n     * Enable OTP for a given OTP Type\r\n     * @param credentials Credentials\r\n     * @param typeOTP authenticator, sms or email\r\n     */\n  }, {\n    key: \"disableOTP\",\n    value: function () {\n      var _disableOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(credentials, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/account/otp/\".concat(typeOTP, \"/disable\"),\n                  method: \"POST\",\n                  body: credentials\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function disableOTP(_x5, _x6) {\n        return _disableOTP.apply(this, arguments);\n      }\n      return disableOTP;\n    }()\n    /**\r\n     * Confirm OTP enabling process for a given OTP Type\r\n     * @param credentials Credentials\r\n     * @param typeOTP authenticator, sms or email\r\n     */\n  }, {\n    key: \"confirmOTP\",\n    value: function () {\n      var _confirmOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(pinCode, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/account/otp/\".concat(typeOTP, \"/confirm\"),\n                  method: \"POST\",\n                  body: {\n                    pin_code: pinCode\n                  }\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function confirmOTP(_x7, _x8) {\n        return _confirmOTP.apply(this, arguments);\n      }\n      return confirmOTP;\n    }()\n  }], [{\n    key: \"tokenCreate\",\n    value: function () {\n      var _tokenCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tokenParams, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                params = {\n                  path: \"/account/profile/token\",\n                  method: \"POST\",\n                  body: tokenParams\n                };\n                _context8.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n      function tokenCreate(_x9, _x10) {\n        return _tokenCreate.apply(this, arguments);\n      }\n      return tokenCreate;\n    }()\n    /**\r\n     * Retrieve list of profiles for login and do Login\r\n     * @param credentials Credentials\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(credentials, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                params = {\n                  path: \"/account/login\",\n                  method: \"POST\",\n                  body: credentials\n                };\n                _context9.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n      function login(_x11, _x12) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\r\n     * Send password recover email\r\n     * @param email E-mail to recovery\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"passwordRecover\",\n    value: function () {\n      var _passwordRecover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(email, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                params = {\n                  path: \"/account/passwordreset/\".concat(email),\n                  method: \"GET\"\n                };\n                _context10.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n      function passwordRecover(_x13, _x14) {\n        return _passwordRecover.apply(this, arguments);\n      }\n      return passwordRecover;\n    }()\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(createParams, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                params = {\n                  path: \"/account\",\n                  method: \"POST\",\n                  body: createParams\n                };\n                _context11.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n      function create(_x15, _x16) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\r\n     *  Re-send confirmation account email\r\n     * @param email E-mail address\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"resendConfirmation\",\n    value: function () {\n      var _resendConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(email, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                params = {\n                  path: \"/account/resend_confirmation/\".concat(email),\n                  method: \"GET\"\n                };\n                _context12.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n      function resendConfirmation(_x17, _x18) {\n        return _resendConfirmation.apply(this, arguments);\n      }\n      return resendConfirmation;\n    }()\n    /**\r\n     * Confirm account creation\r\n     * @param token Confirmation token\r\n     * @param region TagoIO Region Server [default usa-1]\r\n     */\n  }, {\n    key: \"confirmAccount\",\n    value: function () {\n      var _confirmAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(token, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                params = {\n                  path: \"/account/confirm/\".concat(token),\n                  method: \"GET\"\n                };\n                _context13.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context13.sent;\n                return _context13.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n      function confirmAccount(_x19, _x20) {\n        return _confirmAccount.apply(this, arguments);\n      }\n      return confirmAccount;\n    }()\n    /**\r\n     * Request the PIN Code for a given OTP Type.\r\n     * @param credentials Credentials\r\n     * @param typeOTP authenticator, sms or email\r\n     */\n  }, {\n    key: \"requestLoginPINCode\",\n    value: function () {\n      var _requestLoginPINCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(credentials, typeOTP, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                params = {\n                  path: \"/account/login/otp\",\n                  method: \"POST\",\n                  body: _objectSpread(_objectSpread({}, credentials), {}, {\n                    otp_type: typeOTP\n                  })\n                };\n                _context14.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n      function requestLoginPINCode(_x21, _x22, _x23) {\n        return _requestLoginPINCode.apply(this, arguments);\n      }\n      return requestLoginPINCode;\n    }()\n  }]);\n  return Account;\n}(TagoIOModule_1.default);\nexports.default = Account;","map":{"version":3,"mappings":"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","names":["Account","Actions_1","params","Analyses_1","Buckets_1","Files_1","Dashboards_1","Devices_1","Dictionaries_1","Billing_1","Notifications_1","Tags_1","PaymentMethods_1","Plan_1","PaymentHistory_1","Explore_1","Integration_1","Template_1","Access_1","Run_1","ServiceAuthorization_1","Profile_1","TagoCores_1","doRequest","path","method","result","options","accountObj","body","password","credentials","typeOTP","pinCode","pin_code","tokenParams","region","TagoIOModule_1","doRequestAnonymous","email","createParams","token","otp_type","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Account.ts"],"sourcesContent":["import { GenericToken } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams, doRequestParams } from \"../../common/TagoIOModule\";\r\nimport Access from \"./Access\";\r\nimport { AccountCreateInfo, AccountInfo, LoginResponse, OTPType, TokenCreateInfo } from \"./account.types\";\r\nimport Actions from \"./Actions\";\r\nimport Analyses from \"./Analyses\";\r\nimport Billing from \"./Billing\";\r\nimport Buckets from \"./Buckets\";\r\nimport Dashboards from \"./Dashboards\";\r\nimport Devices from \"./Devices\";\r\nimport Dictionaries from \"./Dictionaries\";\r\nimport Explore from \"./Explore\";\r\nimport Files from \"./Files\";\r\nimport Notifications from \"./Notifications\";\r\nimport PaymentHistory from \"./PaymentHistory\";\r\nimport PaymentMethods from \"./PaymentMethods\";\r\nimport Plan from \"./Plan\";\r\nimport Profile from \"./Profile\";\r\nimport Run from \"./Run\";\r\nimport ServiceAuthorization from \"./ServiceAuthorization\";\r\nimport Tags from \"./Tags\";\r\nimport Template from \"./Template\";\r\nimport { Regions } from \"../../regions\";\r\nimport Integration from \"./Integration\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport TagoCores from \"./TagoCores\";\r\n\r\n/**\r\n * To set up an account object, you need a token that you need to get from our\r\n * admin website and the region. Make sure to use tokens with the correct\r\n * write/read privileges for the current function that you want to use.\r\n *\r\n * @class Account\r\n * @extends {TagoIOModule<GenericModuleParams>}\r\n */\r\nclass Account extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Gets all account information\r\n   */\r\n  public async info(): Promise<AccountInfo> {\r\n    let result = await this.doRequest<AccountInfo>({\r\n      path: \"/account\",\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_login\"]);\r\n\r\n    if (result.options) result.options = dateParser(result.options, [\"last_whats_new\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Edit account\r\n   * @param accountObj Account data to edit\r\n   */\r\n  public async edit(accountObj: Partial<AccountInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: \"/account\",\r\n      method: \"PUT\",\r\n      body: accountObj,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete account\r\n   */\r\n  public async delete(): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: \"/account\",\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new token for the account\r\n   * @param tokenParams Token data\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async tokenCreate(tokenParams: TokenCreateInfo, region?: Regions): Promise<{ token: GenericToken }> {\r\n    const params: doRequestParams = {\r\n      path: \"/account/profile/token\",\r\n      method: \"POST\",\r\n      body: tokenParams,\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<{ token: GenericToken }>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieve list of profiles for login and do Login\r\n   * @param credentials Credentials\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async login(\r\n    credentials: { email: string; password: string },\r\n    region?: Regions\r\n  ): Promise<LoginResponse> {\r\n    const params: doRequestParams = {\r\n      path: \"/account/login\",\r\n      method: \"POST\",\r\n      body: credentials,\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<LoginResponse>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Send password recover email\r\n   * @param email E-mail to recovery\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async passwordRecover(email: string, region?: Regions): Promise<string> {\r\n    const params: doRequestParams = {\r\n      path: `/account/passwordreset/${email}`,\r\n      method: \"GET\",\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Change account password\r\n   * @param password New Password\r\n   */\r\n  public async passwordChange(password: string): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/account/passwordreset`,\r\n      method: \"POST\",\r\n      body: {\r\n        password,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create new TagoIO account\r\n   * @param createParams New account details\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async create(createParams: AccountCreateInfo, region?: Regions): Promise<string> {\r\n    const params: doRequestParams = {\r\n      path: `/account`,\r\n      method: \"POST\",\r\n      body: createParams,\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   *  Re-send confirmation account email\r\n   * @param email E-mail address\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async resendConfirmation(email: string, region?: Regions): Promise<string> {\r\n    const params: doRequestParams = {\r\n      path: `/account/resend_confirmation/${email}`,\r\n      method: \"GET\",\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Confirm account creation\r\n   * @param token Confirmation token\r\n   * @param region TagoIO Region Server [default usa-1]\r\n   */\r\n  public static async confirmAccount(token: GenericToken, region?: Regions): Promise<string> {\r\n    const params: doRequestParams = {\r\n      path: `/account/confirm/${token}`,\r\n      method: \"GET\",\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Request the PIN Code for a given OTP Type.\r\n   * @param credentials Credentials\r\n   * @param typeOTP authenticator, sms or email\r\n   */\r\n  public static async requestLoginPINCode(\r\n    credentials: { email: string; password: string },\r\n    typeOTP: OTPType,\r\n    region?: Regions\r\n  ): Promise<string> {\r\n    const params: doRequestParams = {\r\n      path: `/account/login/otp`,\r\n      method: \"POST\",\r\n      body: { ...credentials, otp_type: typeOTP },\r\n    };\r\n\r\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Enable OTP for a given OTP Type.\r\n   * You will be requested to confirm the operation with a pin code.\r\n   * @param credentials Credentials\r\n   * @param typeOTP authenticator, sms or email\r\n   */\r\n  public async enableOTP(credentials: { email: string; password: string }, typeOTP: OTPType): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/account/otp/${typeOTP}/enable`,\r\n      method: \"POST\",\r\n      body: credentials,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Enable OTP for a given OTP Type\r\n   * @param credentials Credentials\r\n   * @param typeOTP authenticator, sms or email\r\n   */\r\n  public async disableOTP(credentials: { email: string; password: string }, typeOTP: OTPType): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/account/otp/${typeOTP}/disable`,\r\n      method: \"POST\",\r\n      body: credentials,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Confirm OTP enabling process for a given OTP Type\r\n   * @param credentials Credentials\r\n   * @param typeOTP authenticator, sms or email\r\n   */\r\n  public async confirmOTP(pinCode: string, typeOTP: OTPType): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/account/otp/${typeOTP}/confirm`,\r\n      method: \"POST\",\r\n      body: {\r\n        pin_code: pinCode,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Manage actions in account.\r\n   * Be sure to use an account token with “write” permissions when\r\n   * using functions like create, edit and delete.\r\n   */\r\n  public actions = new Actions(this.params);\r\n\r\n  /**\r\n   * Manage analysis in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public analysis = new Analyses(this.params);\r\n\r\n  /**\r\n   * Manage buckets in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public buckets = new Buckets(this.params);\r\n\r\n  /**\r\n   * Manage files in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public files = new Files(this.params);\r\n\r\n  /**\r\n   * Manage dashboards in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public dashboards = new Dashboards(this.params);\r\n\r\n  /**\r\n   * Manage devices in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public devices = new Devices(this.params);\r\n\r\n  /**\r\n   * Manage dictionaries in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public dictionaries = new Dictionaries(this.params);\r\n\r\n  /**\r\n   * Manage Billing for the account.\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public billing = new Billing(this.params);\r\n\r\n  /**\r\n   * Manage notifications in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public notifications = new Notifications(this.params);\r\n\r\n  /**\r\n   * Manage tags in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public tags = new Tags(this.params);\r\n\r\n  /**\r\n   * Manage payment methods in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public paymentMethods = new PaymentMethods(this.params);\r\n\r\n  /**\r\n   * Manage account plans\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public plan = new Plan(this.params);\r\n  /**\r\n   * Manage payment history in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public paymentHistory = new PaymentHistory(this.params);\r\n\r\n  /**\r\n   * Manage explore in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public explore = new Explore(this.params);\r\n\r\n  /**\r\n   * Manage connectors in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public integration = new Integration(this.params);\r\n\r\n  /**\r\n   * Manage templates in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public template = new Template(this.params);\r\n\r\n  /**\r\n   * Manage access in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public accessManagement = new Access(this.params);\r\n\r\n  /**\r\n   * Manage run apps in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   *\r\n   */\r\n  public run = new Run(this.params);\r\n\r\n  /**\r\n   * Manage services in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public ServiceAuthorization = new ServiceAuthorization(this.params);\r\n\r\n  /**\r\n   * Manage profiles in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public profiles = new Profile(this.params);\r\n\r\n  /**\r\n   * Manage tagocores in account\r\n   * Be sure to use an account token with “write” permissions when using\r\n   * functions like create, edit and delete.\r\n   */\r\n  public tagocores = new TagoCores(this.params);\r\n}\r\n\r\nexport default Account;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}