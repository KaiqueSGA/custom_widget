{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Networks extends TagoIOModule_1.default {\n  /**\r\n   * Retrieves a list with all Networks from account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\n  async list(queryObj) {\n    const result = await this.doRequest({\n      path: \"/integration/network/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Get Info of the Network\r\n   * @param networkID Network identification\r\n   * @param fields Fields to fetch.\r\n   */\n  async info(networkID) {\n    let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"id\", \"name\"];\n    const result = await this.doRequest({\n      path: `/integration/network/${networkID}`,\n      method: \"GET\",\n      params: {\n        fields\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new network from the account\r\n   * @param connectorObj Object data to create new Network\r\n   */\n  async create(connectorObj) {\n    const result = await this.doRequest({\n      path: `/integration/network/`,\n      method: \"POST\",\n      body: {\n        ...connectorObj\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Modify any property of the network\r\n   * @param networkID Network identification\r\n   * @param connectorObj Object data to create new Network\r\n   */\n  async edit(networkID, connectorObj) {\n    const result = await this.doRequest({\n      path: `/integration/network/${networkID}`,\n      method: \"PUT\",\n      body: {\n        ...connectorObj\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Retrieves a list of all tokens\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"name\", \"token\", \"permission\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"created_at,desc\",\r\n   * }\r\n   * ```\r\n   * @param networkID Network ID\r\n   * @param queryObj Search query params\r\n   */\n  async tokenList(networkID, queryObj) {\n    let result = await this.doRequest({\n      path: `/integration/network/token/${networkID}`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]));\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new token\r\n   * @param networkID Network ID\r\n   * @param tokenParams Details of new token\r\n   */\n  async tokenCreate(networkID, tokenParams) {\n    const result = await this.doRequest({\n      path: `/integration/network/token`,\n      method: \"POST\",\n      body: {\n        network: networkID,\n        ...tokenParams\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Deletes a token\r\n   * @param token Token ID\r\n   */\n  async tokenDelete(token) {\n    const result = await this.doRequest({\n      path: `/integration/network/token/${token}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n}\nexports.default = Networks;","map":{"version":3,"mappings":"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","names":["Networks","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","info","networkID","create","connectorObj","body","edit","tokenList","map","data","tokenCreate","tokenParams","network","tokenDelete","token","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Integration.Networks.ts"],"sourcesContent":["import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport { NetworkCreateInfo, NetworkInfo, NetworkQuery, NetworkTokenInfo } from \"./integration.networks.types\";\r\n\r\nclass Networks extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieves a list with all Networks from account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\r\n  public async list(queryObj?: NetworkQuery): Promise<NetworkInfo[]> {\r\n    const result = await this.doRequest<NetworkInfo[]>({\r\n      path: \"/integration/network/\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Info of the Network\r\n   * @param networkID Network identification\r\n   * @param fields Fields to fetch.\r\n   */\r\n  public async info(networkID: GenericID, fields = [\"id\", \"name\"]): Promise<NetworkInfo> {\r\n    const result = await this.doRequest<NetworkInfo>({\r\n      path: `/integration/network/${networkID}`,\r\n      method: \"GET\",\r\n      params: {\r\n        fields,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new network from the account\r\n   * @param connectorObj Object data to create new Network\r\n   */\r\n  public async create(connectorObj: NetworkCreateInfo): Promise<{ network: GenericID }> {\r\n    const result = await this.doRequest<{ network: GenericID }>({\r\n      path: `/integration/network/`,\r\n      method: \"POST\",\r\n      body: {\r\n        ...connectorObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of the network\r\n   * @param networkID Network identification\r\n   * @param connectorObj Object data to create new Network\r\n   */\r\n  public async edit(networkID: GenericID, connectorObj: Partial<NetworkCreateInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/integration/network/${networkID}`,\r\n      method: \"PUT\",\r\n      body: {\r\n        ...connectorObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of all tokens\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"name\", \"token\", \"permission\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"created_at,desc\",\r\n   * }\r\n   * ```\r\n   * @param networkID Network ID\r\n   * @param queryObj Search query params\r\n   */\r\n  public async tokenList(networkID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<NetworkTokenInfo>[]> {\r\n    let result = await this.doRequest<Partial<NetworkTokenInfo>[]>({\r\n      path: `/integration/network/token/${networkID}`,\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new token\r\n   * @param networkID Network ID\r\n   * @param tokenParams Details of new token\r\n   */\r\n  public async tokenCreate(networkID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\r\n    const result = await this.doRequest<TokenCreateResponse>({\r\n      path: `/integration/network/token`,\r\n      method: \"POST\",\r\n      body: { network: networkID, ...tokenParams },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes a token\r\n   * @param token Token ID\r\n   */\r\n  public async tokenDelete(token: GenericToken): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/integration/network/token/${token}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Networks;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}