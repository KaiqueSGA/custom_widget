{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaique\\\\Documents\\\\SGA\\\\widget\\\\project\\\\src\\\\widgets\\\\device_variables\\\\device_variables.js\",\n  _s = $RefreshSig$();\nimport './device_variables.css';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  tago_device\n} = require('../../classes/device/device.js');\nconst {\n  location_apis\n} = require('../../classes/location/location.js');\nfunction Device_variables() {\n  _s();\n  const [device_variables, set_device_variables] = useState([]);\n  const device_methods = new tago_device();\n  const location_funcs = new location_apis();\n\n  /* useEffect(() => {\r\n    window.TagoIO.onStart( async(widget) => {\r\n      window.widget = widget;\r\n        let device_id = widget.display.variables[0].origin.id;\r\n      let request = await device_methods.get_device_variables(device_id); \r\n      set_device_variables(request); \r\n  })\r\n  window.TagoIO.ready(); \r\n  },[]) */\n\n  useEffect(async () => {\n    let device_id = \"6419c2dea997d700090c60ae\";\n    let request = await device_methods.get_device_variables(device_id);\n    set_device_variables(request);\n  }, []);\n  function add_0_to_left(value) {\n    if (String(value).length === 1) {\n      return \"0\" + value;\n    } else {\n      return value;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div-mother\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div-filho\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-div-mother\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"See all variables that the selected device sent!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data_variables\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            border: \"1\",\n            className: \"variable_tables\",\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"link\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Date and Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Coordinates\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), device_variables.map(data => {\n              /* if(data.metadata.media === \"STX\"){ \r\n                 const catch_payload = (stu_message) => {\r\n                  //This function is catching the hexadecimal message sent by device\r\n                  let firstTag = stu_message.indexOf(\">\", stu_message.indexOf(\"<payload\"));\r\n                  let secondTag = stu_message.indexOf(\"</payload>\", firstTag);\r\n              \r\n                  return stu_message.substring(firstTag + 3, secondTag);\r\n                };\r\n              \r\n                \r\n                const decode_lat = (file_content, cardinal_position) => {\r\n                  let hexadecimal_lat = file_content.substring(0, 6);\r\n                  let integer_lat = String(parseInt(hexadecimal_lat, 16)); //estou convertendo para inteiro um valor hexa, por isso eu coloco o 16 como parÃ¢metro\r\n                   \r\n                  let final_lat = integer_lat / 10_000; \r\n                  let ready_coordinate = cardinal_position === \"south\"\r\n                                                                    ? \"-\" + String(final_lat.toFixed(8))\r\n                                                                    : String(final_lat.toFixed(8));\r\n              \r\n                  return ready_coordinate; \r\n                };\r\n              \r\n                   const decode_lng = (file_content, cardinal_position) => {\r\n                  let hexadecimal_lng = file_content.substring(6, 12);\r\n                  let integer_lng = parseInt(hexadecimal_lng, 16);\r\n              \r\n                  let final_lng = integer_lng / 10_000; \r\n                  let ready_coordinate = cardinal_position === \"weast\"\r\n                                                                   ? \"-\" + String(final_lng.toFixed(8))\r\n                                                                   : String(final_lng.toFixed(8));\r\n              \r\n                  return ready_coordinate; \r\n                };\r\n                    const decode_binary_values = (payload) => {\r\n                  let values_object = new Object();\r\n                  let binary = this.hex_2_bin(payload.substring(12, 14));\r\n                    let value_of_each_byte = {\r\n                    0: (byte) => { byte === \"0\"   ?values_object.cardinal_position_s_n = \"south\"    :values_object.cardinal_position_s_n = \"north\"; },\r\n                    1: (byte) => { byte === \"0\"   ?values_object.cardinal_position_w_e = \"weast\"    :values_object.cardinal_position_w_e = \"east\";},\r\n                    2: (byte) => { byte === \"0\"   ?values_object.origin = \"GPS\"                     :values_object.origin = \"GPS-DR\";},\r\n                    3: (byte) => { byte === \"0\"   ?values_object.mode = 2                           :values_object.mode = 3; },\r\n                  };\r\n                    for (let i = 0; i <= 3; i++) { value_of_each_byte[String(i)](binary[i]); }//i --> binary position / binary[i] --> binary value\r\n                    return values_object;\r\n                }\r\n                    let payload = catch_payload(data);\r\n                let bin_values_decoded = decode_binary_values(payload);\r\n                  let latitude = Number(decode_lat(payload, bin_values_decoded.cardinal_position_s_n));\r\n                let longitude = Number(decode_lng(payload, bin_values_decoded.cardinal_position_w_e));\r\n                  var link = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`; \r\n              } */\n\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"data_variable\",\n                  children: data.metadata.origin\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 38\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"b\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: data.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 38\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: data.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 38\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 33\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Device_variables, \"DXeNkyifG6NXA4eFQejCNtGaZGQ=\");\n_c = Device_variables;\nexport { Device_variables };\nvar _c;\n$RefreshReg$(_c, \"Device_variables\");","map":{"version":3,"names":["React","useEffect","useState","tago_device","require","location_apis","Device_variables","device_variables","set_device_variables","device_methods","location_funcs","device_id","request","get_device_variables","add_0_to_left","value","String","length","map","data","metadata","origin","id"],"sources":["C:/Users/kaique/Documents/SGA/widget/project/src/widgets/device_variables/device_variables.js"],"sourcesContent":["import './device_variables.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst { tago_device } = require('../../classes/device/device.js');\r\nconst { location_apis } = require('../../classes/location/location.js')\r\n\r\n\r\nfunction Device_variables(){\r\n  const [device_variables, set_device_variables] = useState([]);\r\n\r\n  const device_methods = new tago_device();\r\n  const location_funcs = new location_apis();\r\n\r\n\r\n  /* useEffect(() => {\r\n    window.TagoIO.onStart( async(widget) => {\r\n      window.widget = widget;\r\n\r\n      let device_id = widget.display.variables[0].origin.id;\r\n      let request = await device_methods.get_device_variables(device_id); \r\n      set_device_variables(request); \r\n  })\r\n  window.TagoIO.ready(); \r\n  },[]) */\r\n\r\n\r\n  useEffect(async() => {\r\n\r\n      let device_id = \"6419c2dea997d700090c60ae\";\r\n      let request = await device_methods.get_device_variables(device_id); \r\n      set_device_variables(request); \r\n   \r\n  },[])\r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n   function add_0_to_left(value){\r\n\r\n      if( String(value).length === 1 ){\r\n        return \"0\" + value;\r\n      }else{\r\n        return value;\r\n      }\r\n\r\n   }\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n\r\n        <div className='div-mother'>\r\n        <div className='div-filho'>\r\n\r\n      <div className='text-div-mother'>\r\n         <h1>See all variables that the selected device sent!</h1>\r\n         <br/>\r\n        </div>\r\n       \r\n                <div className='data_variables'>\r\n\r\n                        <table border=\"1\" className='variable_tables'>\r\n                            <tr>\r\n                                <td>link</td>\r\n                                <td>Date and Time</td>\r\n                                <td>Coordinates</td>\r\n                                  \r\n                            </tr>\r\n                            {device_variables.map(data => { \r\n\r\n                                /* if(data.metadata.media === \"STX\"){ \r\n\r\n                                 const catch_payload = (stu_message) => {\r\n                                    //This function is catching the hexadecimal message sent by device\r\n                                    let firstTag = stu_message.indexOf(\">\", stu_message.indexOf(\"<payload\"));\r\n                                    let secondTag = stu_message.indexOf(\"</payload>\", firstTag);\r\n                                \r\n                                    return stu_message.substring(firstTag + 3, secondTag);\r\n                                  };\r\n                                \r\n                                  \r\n                                  const decode_lat = (file_content, cardinal_position) => {\r\n                                    let hexadecimal_lat = file_content.substring(0, 6);\r\n                                    let integer_lat = String(parseInt(hexadecimal_lat, 16)); //estou convertendo para inteiro um valor hexa, por isso eu coloco o 16 como parÃ¢metro\r\n                                     \r\n                                    let final_lat = integer_lat / 10_000; \r\n                                    let ready_coordinate = cardinal_position === \"south\"\r\n                                                                                      ? \"-\" + String(final_lat.toFixed(8))\r\n                                                                                      : String(final_lat.toFixed(8));\r\n                                \r\n                                    return ready_coordinate; \r\n                                  };\r\n                                \r\n \r\n                                  const decode_lng = (file_content, cardinal_position) => {\r\n                                    let hexadecimal_lng = file_content.substring(6, 12);\r\n                                    let integer_lng = parseInt(hexadecimal_lng, 16);\r\n                                \r\n                                    let final_lng = integer_lng / 10_000; \r\n                                    let ready_coordinate = cardinal_position === \"weast\"\r\n                                                                                     ? \"-\" + String(final_lng.toFixed(8))\r\n                                                                                     : String(final_lng.toFixed(8));\r\n                                \r\n                                    return ready_coordinate; \r\n                                  };\r\n\r\n\r\n                                  const decode_binary_values = (payload) => {\r\n                                    let values_object = new Object();\r\n                                    let binary = this.hex_2_bin(payload.substring(12, 14));\r\n\r\n                                    let value_of_each_byte = {\r\n                                      0: (byte) => { byte === \"0\"   ?values_object.cardinal_position_s_n = \"south\"    :values_object.cardinal_position_s_n = \"north\"; },\r\n                                      1: (byte) => { byte === \"0\"   ?values_object.cardinal_position_w_e = \"weast\"    :values_object.cardinal_position_w_e = \"east\";},\r\n                                      2: (byte) => { byte === \"0\"   ?values_object.origin = \"GPS\"                     :values_object.origin = \"GPS-DR\";},\r\n                                      3: (byte) => { byte === \"0\"   ?values_object.mode = 2                           :values_object.mode = 3; },\r\n                                    };\r\n\r\n                                    for (let i = 0; i <= 3; i++) { value_of_each_byte[String(i)](binary[i]); }//i --> binary position / binary[i] --> binary value\r\n\r\n                                    return values_object;\r\n                                  }\r\n\r\n\r\n                                  let payload = catch_payload(data);\r\n                                  let bin_values_decoded = decode_binary_values(payload);\r\n\r\n                                  let latitude = Number(decode_lat(payload, bin_values_decoded.cardinal_position_s_n));\r\n                                  let longitude = Number(decode_lng(payload, bin_values_decoded.cardinal_position_w_e));\r\n\r\n                                  var link = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`; \r\n                                } */\r\n                            \r\n                              return( \r\n                                <tr>\r\n                                    <td className='data_variable'>{data.metadata.origin}</td>\r\n\r\n                                     <td>{}</td>  \r\n\r\n                                    <td className='b'></td>\r\n\r\n                                     <td className={data.id}></td>{/* Date and time */}\r\n                                     <td className={data.id}></td>{/* Coordinates */}\r\n\r\n                                </tr>\r\n                              )\r\n\r\n                               \r\n  \r\n\r\n\r\n                            })}\r\n\r\n                        </table>\r\n                        \r\n                            \r\n                    \r\n                </div>\r\n\r\n\r\n\r\n\r\n                </div> \r\n\r\n\r\n           \r\n\r\n            </div>         \r\n         \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport { Device_variables };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}