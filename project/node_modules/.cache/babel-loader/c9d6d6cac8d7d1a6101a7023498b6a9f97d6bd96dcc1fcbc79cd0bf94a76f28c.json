{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst Dashboard_Widgets_1 = __importDefault(require(\"./Dashboard.Widgets\"));\nconst _Share_1 = __importDefault(require(\"./_Share\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Dashboards extends TagoIOModule_1.default {\n  constructor() {\n    super(...arguments);\n    this.share = new _Share_1.default({\n      ...this.params,\n      type: \"dashboard\"\n    });\n    this.widgets = new Dashboard_Widgets_1.default(this.params);\n  }\n  /**\r\n   * Retrieves a list with all dashboards from the account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"label,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/dashboard\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"label,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_access\"]));\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new dashboard from the account\r\n   * @param dashboardObj Object data to create new Dashboard\r\n   */\n  async create(dashboardObj) {\n    const result = await this.doRequest({\n      path: \"/dashboard\",\n      method: \"POST\",\n      body: {\n        ...dashboardObj\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Modify any property of the action\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Dashboard Object with data to be replaced\r\n   */\n  async edit(dashboardID, dashboardObj) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}`,\n      method: \"PUT\",\n      body: {\n        ...dashboardObj\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Deletes an dashboard from the account\r\n   * @param dashboardID Dashboard identification\r\n   */\n  async delete(dashboardID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Gets information about the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\n  async info(dashboardID) {\n    let result = await this.doRequest({\n      path: `/dashboard/${dashboardID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_access\"]);\n    return result;\n  }\n  /**\r\n   * Duplicate the dashboard to your own account\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Object with data of the duplicate dashboard\r\n   */\n  async duplicate(dashboardID, dashboardObj) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/duplicate`,\n      method: \"POST\",\n      body: dashboardObj || {}\n    });\n    return result;\n  }\n  /**\r\n   * Get share list of the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\n  async shareList(dashboardID) {\n    return this.share.list(dashboardID);\n  }\n  /**\r\n   * Share the dashboard with another person\r\n   * @param dashboardID Dashboard identification\r\n   * @param inviteObj Object with target and message\r\n   */\n  async shareSendInvite(dashboardID, inviteObj) {\n    return this.share.invite(dashboardID, inviteObj);\n  }\n  /**\r\n   * Change permissions of the bucket\r\n   * @param shareID Share identification\r\n   * @param targetObj Object with target email and new permission\r\n   */\n  async shareEdit(shareID, targetObj) {\n    return this.share.edit(shareID, targetObj);\n  }\n  /**\r\n   * Remove share of the bucket\r\n   * @param shareID Share identification\r\n   */\n  async shareDelete(shareID) {\n    return this.share.remove(shareID);\n  }\n  /**\r\n   * Generate a new public token for the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   * @param expireTime Time when token will expire\r\n   */\n  async getPublicKey(dashboardID) {\n    let expireTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"never\";\n    let result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/share/public`,\n      method: \"GET\",\n      params: {\n        expire_time: expireTime\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_time\"]);\n    return result;\n  }\n  /**\r\n   * Get list of devices related with dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\n  async listDevicesRelated(dashboardID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/devices`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\r\n   * Get list of analysis related with a dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\n  async listAnalysisRelated(dashboardID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/analysis`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\r\n   * Runs an analysis located in a widget's header button\r\n   * @param analysisID The id of the analysis to run\r\n   * @param dashboardID The id of the dashboard that contains the widget\r\n   * @param widgetID The id of the widget that contains the header button\r\n   * @param scope Data to send to the analysis\r\n   */\n  async runWidgetHeaderButtonAnalysis(analysisID, dashboardID, widgetID, scope) {\n    const result = await this.doRequest({\n      path: `/analysis/${analysisID}/run/${dashboardID}/${widgetID}`,\n      method: \"POST\",\n      body: {\n        scope\n      }\n    });\n    return result;\n  }\n}\nexports.default = Dashboards;","map":{"version":3,"mappings":"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","names":["Dashboards","TagoIOModule_1","constructor","_Share_1","params","type","Dashboard_Widgets_1","list","queryObj","result","doRequest","path","method","page","fields","filter","amount","orderBy","map","data","create","dashboardObj","body","edit","dashboardID","delete","info","duplicate","shareList","share","shareSendInvite","inviteObj","invite","shareEdit","shareID","targetObj","shareDelete","remove","getPublicKey","expireTime","expire_time","listDevicesRelated","listAnalysisRelated","runWidgetHeaderButtonAnalysis","analysisID","widgetID","scope","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dashboards.ts"],"sourcesContent":["import { ExpireTimeOption, GenericID } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport { InviteInfo, InviteResponse } from \"./_share.types\";\r\nimport Widgets from \"./Dashboard.Widgets\";\r\nimport {\r\n  DashboardCreateInfo,\r\n  DashboardInfo,\r\n  DashboardQuery,\r\n  DevicesRelated,\r\n  AnalysisRelated,\r\n  PublicKeyResponse,\r\n} from \"./dashboards.types\";\r\nimport _Share from \"./_Share\";\r\nimport dateParser from \"../Utils/dateParser\";\r\n\r\nclass Dashboards extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieves a list with all dashboards from the account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"label,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\r\n  public async list(queryObj?: DashboardQuery): Promise<DashboardInfo[]> {\r\n    let result = await this.doRequest<DashboardInfo[]>({\r\n      path: \"/dashboard\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"label,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_access\"]));\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * Generates and retrieves a new dashboard from the account\r\n   * @param dashboardObj Object data to create new Dashboard\r\n   */\r\n  public async create(dashboardObj: DashboardCreateInfo): Promise<{ dashboard: GenericID }> {\r\n    const result = await this.doRequest<{ dashboard: GenericID }>({\r\n      path: \"/dashboard\",\r\n      method: \"POST\",\r\n      body: {\r\n        ...dashboardObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of the action\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Dashboard Object with data to be replaced\r\n   */\r\n  public async edit(dashboardID: GenericID, dashboardObj: Partial<DashboardInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"PUT\",\r\n      body: {\r\n        ...dashboardObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes an dashboard from the account\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async delete(dashboardID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Gets information about the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async info(dashboardID: GenericID): Promise<DashboardInfo> {\r\n    let result = await this.doRequest<DashboardInfo>({\r\n      path: `/dashboard/${dashboardID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_access\"]);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Duplicate the dashboard to your own account\r\n   * @param dashboardID Dashboard identification\r\n   * @param dashboardObj Object with data of the duplicate dashboard\r\n   */\r\n  public async duplicate(\r\n    dashboardID: GenericID,\r\n    dashboardObj?: { setup?: object; new_label?: string }\r\n  ): Promise<{ dashboard_id: string; message: string }> {\r\n    const result = await this.doRequest<{ dashboard_id: string; message: string }>({\r\n      path: `/dashboard/${dashboardID}/duplicate`,\r\n      method: \"POST\",\r\n      body: dashboardObj || {},\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get share list of the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async shareList(dashboardID: GenericID): Promise<InviteInfo[]> {\r\n    return this.share.list(dashboardID);\r\n  }\r\n\r\n  /**\r\n   * Share the dashboard with another person\r\n   * @param dashboardID Dashboard identification\r\n   * @param inviteObj Object with target and message\r\n   */\r\n  public async shareSendInvite(dashboardID: GenericID, inviteObj: InviteInfo): Promise<InviteResponse> {\r\n    return this.share.invite(dashboardID, inviteObj);\r\n  }\r\n\r\n  /**\r\n   * Change permissions of the bucket\r\n   * @param shareID Share identification\r\n   * @param targetObj Object with target email and new permission\r\n   */\r\n  public async shareEdit(shareID: GenericID, targetObj: Partial<InviteInfo>): Promise<string> {\r\n    return this.share.edit(shareID, targetObj);\r\n  }\r\n\r\n  /**\r\n   * Remove share of the bucket\r\n   * @param shareID Share identification\r\n   */\r\n  public async shareDelete(shareID: GenericID): Promise<string> {\r\n    return this.share.remove(shareID);\r\n  }\r\n\r\n  /**\r\n   * Generate a new public token for the dashboard\r\n   * @param dashboardID Dashboard identification\r\n   * @param expireTime Time when token will expire\r\n   */\r\n  public async getPublicKey(\r\n    dashboardID: GenericID,\r\n    expireTime: ExpireTimeOption = \"never\"\r\n  ): Promise<PublicKeyResponse> {\r\n    let result = await this.doRequest<PublicKeyResponse>({\r\n      path: `/dashboard/${dashboardID}/share/public`,\r\n      method: \"GET\",\r\n      params: {\r\n        expire_time: expireTime,\r\n      },\r\n    });\r\n\r\n    result = dateParser(result, [\"expire_time\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get list of devices related with dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async listDevicesRelated(dashboardID: GenericID): Promise<DevicesRelated[]> {\r\n    const result = await this.doRequest<DevicesRelated[]>({\r\n      path: `/dashboard/${dashboardID}/devices`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get list of analysis related with a dashboard\r\n   * @param dashboardID Dashboard identification\r\n   */\r\n  public async listAnalysisRelated(dashboardID: GenericID): Promise<AnalysisRelated[]> {\r\n    const result = await this.doRequest<AnalysisRelated[]>({\r\n      path: `/dashboard/${dashboardID}/analysis`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Runs an analysis located in a widget's header button\r\n   * @param analysisID The id of the analysis to run\r\n   * @param dashboardID The id of the dashboard that contains the widget\r\n   * @param widgetID The id of the widget that contains the header button\r\n   * @param scope Data to send to the analysis\r\n   */\r\n  public async runWidgetHeaderButtonAnalysis(\r\n    analysisID: GenericID,\r\n    dashboardID: GenericID,\r\n    widgetID: GenericID,\r\n    scope?: object\r\n  ): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/analysis/${analysisID}/run/${dashboardID}/${widgetID}`,\r\n      method: \"POST\",\r\n      body: {\r\n        scope,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private share = new _Share({ ...this.params, type: \"dashboard\" });\r\n\r\n  public widgets = new Widgets(this.params);\r\n}\r\n\r\nexport default Dashboards;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}