{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar TagoCores = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(TagoCores, _TagoIOModule_1$defau);\n  var _super = _createSuper(TagoCores);\n  function TagoCores() {\n    _classCallCheck(this, TagoCores);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TagoCores, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all TagoCores from the account\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     * }\n     * ```json\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/instance\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"system_start_time\", \"tcore_start_time\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Gets information about the TagoCore\n     * @param tagoCoreID TagoCore ID\n     * @param summary Fetch summary from the instance if it is connected\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tagoCoreID, summary) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/instance/\".concat(tagoCoreID),\n                  method: \"GET\",\n                  params: {\n                    summary: summary\n                  }\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function info(_x2, _x3) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Modify any property of the TagoCore.\n     * @param tagoCoreID TagoCore ID\n     * @param tagoCoreObj TagoCore Object with data to replace\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tagoCoreID, tagoCoreObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/instance/\".concat(tagoCoreID),\n                  method: \"PUT\",\n                  body: tagoCoreObj\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function edit(_x4, _x5) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Generate a new token for the TagoCore\n     * @param tagoCoreID TagoCore ID\n     */\n  }, {\n    key: \"tokenGenerate\",\n    value: function () {\n      var _tokenGenerate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tagoCoreID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/instance/\".concat(tagoCoreID, \"/token\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function tokenGenerate(_x6) {\n        return _tokenGenerate.apply(this, arguments);\n      }\n      return tokenGenerate;\n    }()\n    /**\n     * Deletes a TagoCore\n     * @param tagoCoreID TagoCore ID\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tagocoreID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/instance/\".concat(tagocoreID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function _delete(_x7) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Retrieves a list with all TagoCore Clusters from the account\n     * @default\n     * ```json\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     * }\n     * ```json\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"clusterList\",\n    value: function () {\n      var _clusterList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\"\n                  }\n                });\n              case 2:\n                result = _context6.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]);\n                });\n                return _context6.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function clusterList(_x8) {\n        return _clusterList.apply(this, arguments);\n      }\n      return clusterList;\n    }()\n    /**\n     * Generate a new token for the TagoCore\n     * @param clusterID TagoCore Cluster ID\n     */\n  }, {\n    key: \"clusterTokenCreate\",\n    value: function () {\n      var _clusterTokenCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(clusterID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster/\".concat(clusterID, \"/token\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function clusterTokenCreate(_x9) {\n        return _clusterTokenCreate.apply(this, arguments);\n      }\n      return clusterTokenCreate;\n    }()\n    /**\n     * Gets information about the TagoCore Cluster\n     * @param clusterID TagoCore Cluster ID\n     */\n  }, {\n    key: \"clusterInfo\",\n    value: function () {\n      var _clusterInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(clusterID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster/\".concat(clusterID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function clusterInfo(_x10) {\n        return _clusterInfo.apply(this, arguments);\n      }\n      return clusterInfo;\n    }()\n    /**\n     * Modify any property of the TagoCore Cluster.\n     * @param clusterID TagoCore Cluster ID\n     * @param updateObj TagoCore Cluster Object with data to replace\n     */\n  }, {\n    key: \"clusterEdit\",\n    value: function () {\n      var _clusterEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(clusterID, updateObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster/\".concat(clusterID),\n                  method: \"PUT\",\n                  body: updateObj\n                });\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function clusterEdit(_x11, _x12) {\n        return _clusterEdit.apply(this, arguments);\n      }\n      return clusterEdit;\n    }()\n    /**\n     * Generates and retrieves a new Cluster for the account\n     * @param clusterObj Object with data to create new bucket\n     */\n  }, {\n    key: \"clusterCreate\",\n    value: function () {\n      var _clusterCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(clusterObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster\",\n                  method: \"POST\",\n                  body: clusterObj\n                });\n              case 2:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function clusterCreate(_x13) {\n        return _clusterCreate.apply(this, arguments);\n      }\n      return clusterCreate;\n    }()\n    /**\n     * Deletes a TagoCore Cluster\n     * @param clusterID TagoCore Cluster ID\n     */\n  }, {\n    key: \"clusterDelete\",\n    value: function () {\n      var _clusterDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(clusterID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.doRequest({\n                  path: \"/tcore/cluster/\".concat(clusterID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function clusterDelete(_x14) {\n        return _clusterDelete.apply(this, arguments);\n      }\n      return clusterDelete;\n    }()\n    /**\n     * Get Info of the Device from a Standalone TagoCore instance.\n     * @param tagoCoreID Standalone TagoCore ID\n     * @param deviceID Device ID\n     */\n  }, {\n    key: \"standaloneDeviceInfo\",\n    value: function () {\n      var _standaloneDeviceInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(tagoCoreID, deviceID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID),\n                  method: \"GET\",\n                  params: {\n                    tcore: tagoCoreID\n                  }\n                });\n              case 2:\n                result = _context12.sent;\n                result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                return _context12.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function standaloneDeviceInfo(_x15, _x16) {\n        return _standaloneDeviceInfo.apply(this, arguments);\n      }\n      return standaloneDeviceInfo;\n    }()\n    /**\n     * Get Info of the Device from a TagoCore Cluster.\n     * @param clusterID TagoCore Cluster ID\n     * @param deviceID Device ID\n     */\n  }, {\n    key: \"clusterDeviceInfo\",\n    value: function () {\n      var _clusterDeviceInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(clusterID, deviceID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.doRequest({\n                  path: \"/device/\".concat(deviceID),\n                  method: \"GET\",\n                  params: {\n                    tcore_cluster: clusterID\n                  }\n                });\n              case 2:\n                result = _context13.sent;\n                result = (0, dateParser_1.default)(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                return _context13.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function clusterDeviceInfo(_x17, _x18) {\n        return _clusterDeviceInfo.apply(this, arguments);\n      }\n      return clusterDeviceInfo;\n    }()\n    /**\n     * Retrieves a list with all devices from a Standalone TagoCore instance.\n     * @default\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     *   resolveBucketName: false,\n     * }\n     * @param tagoCoreID Standalone TagoCore ID\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"standaloneDeviceList\",\n    value: function () {\n      var _standaloneDeviceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(tagoCoreID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.doRequest({\n                  path: \"/device\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\",\n                    resolveBucketName: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.resolveBucketName) || false,\n                    tcore: tagoCoreID || \"\"\n                  }\n                });\n              case 2:\n                result = _context14.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                });\n                return _context14.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function standaloneDeviceList(_x19, _x20) {\n        return _standaloneDeviceList.apply(this, arguments);\n      }\n      return standaloneDeviceList;\n    }()\n    /**\n     * Retrieves a list with all devices from a TagoCore Cluster.\n     * @default\n     * queryObj: {\n     *   page: 1,\n     *   fields: [\"id\", \"name\"],\n     *   filter: {},\n     *   amount: 20,\n     *   orderBy: \"name,asc\",\n     *   resolveBucketName: false,\n     * }\n     * @param clusterID TagoCore Cluster ID\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"clusterDeviceList\",\n    value: function () {\n      var _clusterDeviceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(clusterID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.doRequest({\n                  path: \"/device\",\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"id\", \"name\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"name,asc\",\n                    resolveBucketName: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.resolveBucketName) || false,\n                    tcore_cluster: clusterID || \"\"\n                  }\n                });\n              case 2:\n                result = _context15.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n                });\n                return _context15.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function clusterDeviceList(_x21, _x22) {\n        return _clusterDeviceList.apply(this, arguments);\n      }\n      return clusterDeviceList;\n    }()\n  }]);\n  return TagoCores;\n}(TagoIOModule_1.default);\nexports.default = TagoCores;","map":{"version":3,"mappings":"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","names":["TagoCores","queryObj","doRequest","path","method","params","page","fields","filter","amount","orderBy","result","map","data","tagoCoreID","summary","tagoCoreObj","body","tagocoreID","clusterID","updateObj","clusterObj","deviceID","tcore","tcore_cluster","resolveBucketName","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\TagoCores.ts"],"sourcesContent":["import {\n  TagoCoreClusterCreateInfo,\n  TagoCoreClusterInfo,\n  TagoCoreClusterListInfo,\n  TagoCoreClusterQuery,\n  TagoCoreInfo,\n  TagoCoreListInfo,\n  TagoCoreQuery,\n} from \"./tagocore.types\";\nimport { GenericID } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { DeviceInfo, DeviceListItem, DeviceQuery } from \"./devices.types\";\n\nclass TagoCores extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all TagoCores from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: TagoCoreQuery): Promise<TagoCoreListInfo[]> {\n    let result = await this.doRequest<TagoCoreListInfo[]>({\n      path: \"/tcore/instance\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"created_at\", \"updated_at\", \"system_start_time\", \"tcore_start_time\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Gets information about the TagoCore\n   * @param tagoCoreID TagoCore ID\n   * @param summary Fetch summary from the instance if it is connected\n   */\n  public async info(tagoCoreID: GenericID, summary?: boolean): Promise<TagoCoreInfo> {\n    const result = await this.doRequest<TagoCoreInfo>({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"GET\",\n      params: { summary },\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the TagoCore.\n   * @param tagoCoreID TagoCore ID\n   * @param tagoCoreObj TagoCore Object with data to replace\n   */\n  public async edit(tagoCoreID: GenericID, tagoCoreObj: Partial<TagoCoreInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagoCoreID}`,\n      method: \"PUT\",\n      body: tagoCoreObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  public async tokenGenerate(tagoCoreID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagoCoreID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a TagoCore\n   * @param tagoCoreID TagoCore ID\n   */\n  public async delete(tagocoreID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/instance/${tagocoreID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all TagoCore Clusters from the account\n   * @default\n   * ```json\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   * }\n   * ```json\n   * @param queryObj Search query params\n   */\n  public async clusterList(queryObj?: TagoCoreClusterQuery): Promise<TagoCoreClusterListInfo[]> {\n    let result = await this.doRequest<TagoCoreClusterListInfo[]>({\n      path: \"/tcore/cluster\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the TagoCore\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterTokenCreate(clusterID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Gets information about the TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterInfo(clusterID: GenericID): Promise<TagoCoreClusterInfo> {\n    const result = await this.doRequest<TagoCoreClusterInfo>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Modify any property of the TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param updateObj TagoCore Cluster Object with data to replace\n   */\n  public async clusterEdit(clusterID: GenericID, updateObj: Partial<TagoCoreClusterInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"PUT\",\n      body: updateObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new Cluster for the account\n   * @param clusterObj Object with data to create new bucket\n   */\n  public async clusterCreate(clusterObj: TagoCoreClusterCreateInfo): Promise<{ id: string; token: string }> {\n    const result = await this.doRequest<{ id: string; token: string }>({\n      path: \"/tcore/cluster\",\n      method: \"POST\",\n      body: clusterObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Deletes a TagoCore Cluster\n   * @param clusterID TagoCore Cluster ID\n   */\n  public async clusterDelete(clusterID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/tcore/cluster/${clusterID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device from a Standalone TagoCore instance.\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param deviceID Device ID\n   */\n  public async standaloneDeviceInfo(tagoCoreID: GenericID, deviceID: GenericID): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: { tcore: tagoCoreID },\n    });\n\n    result = dateParser(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Device from a TagoCore Cluster.\n   * @param clusterID TagoCore Cluster ID\n   * @param deviceID Device ID\n   */\n  public async clusterDeviceInfo(clusterID: GenericID, deviceID: GenericID): Promise<DeviceInfo> {\n    let result = await this.doRequest<DeviceInfo>({\n      path: `/device/${deviceID}`,\n      method: \"GET\",\n      params: { tcore_cluster: clusterID },\n    });\n\n    result = dateParser(result, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices from a Standalone TagoCore instance.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param tagoCoreID Standalone TagoCore ID\n   * @param queryObj Search query params\n   */\n  public async standaloneDeviceList(tagoCoreID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\n    let result = await this.doRequest<DeviceListItem[]>({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore: tagoCoreID || \"\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list with all devices from a TagoCore Cluster.\n   * @default\n   * queryObj: {\n   *   page: 1,\n   *   fields: [\"id\", \"name\"],\n   *   filter: {},\n   *   amount: 20,\n   *   orderBy: \"name,asc\",\n   *   resolveBucketName: false,\n   * }\n   * @param clusterID TagoCore Cluster ID\n   * @param queryObj Search query params\n   */\n  public async clusterDeviceList(clusterID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]> {\n    let result = await this.doRequest<DeviceListItem[]>({\n      path: \"/device\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\n        resolveBucketName: queryObj?.resolveBucketName || false,\n        tcore_cluster: clusterID || \"\",\n      },\n    });\n\n    result = result.map((data) =>\n      dateParser(data, [\"last_input\", \"last_output\", \"updated_at\", \"created_at\", \"inspected_at\"])\n    );\n\n    return result;\n  }\n}\n\nexport default TagoCores;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}