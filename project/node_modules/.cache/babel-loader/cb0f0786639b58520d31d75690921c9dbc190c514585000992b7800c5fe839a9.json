{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RouterConstructor = void 0;\nvar service_1 = __importDefault(require(\"./service\"));\nvar RouterConstructor = /*#__PURE__*/_createClass(function RouterConstructor() {\n  _classCallCheck(this, RouterConstructor);\n});\nexports.RouterConstructor = RouterConstructor;\nvar AnalysisRouter = /*#__PURE__*/function () {\n  /**\r\n   * Create an Analysis Router.\r\n   * Use router.register to register new routes for your analysis.\r\n   * Use router.exec() to execute the router and run your functions.\r\n   * Example:\r\n   *      router.register(myFunction).whenInputFormID('create-device-input');\r\n   *      router.exec();\r\n   */\n  function AnalysisRouter(params) {\n    _classCallCheck(this, AnalysisRouter);\n    this.params = params;\n    this.services = [];\n  }\n  _createClass(AnalysisRouter, [{\n    key: \"register\",\n    value: function register(func) {\n      var service = new service_1.default(func);\n      this.services.push(service);\n      return service;\n    }\n    /**\r\n     * Start the router. It will pick the service if all conditions are match\r\n     * and send all parameter provided to the final function.\r\n     * @returns json with status and services that run\r\n     */\n  }, {\n    key: \"exec\",\n    value: function () {\n      var _exec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var my_list, _iterator, _step, service;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                my_list = [];\n                _iterator = _createForOfIteratorHelper(this.services);\n                _context.prev = 2;\n                _iterator.s();\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 12;\n                  break;\n                }\n                service = _step.value;\n                if (service.verifyConditionsTrue(this.params.scope, this.params.environment)) {\n                  _context.next = 8;\n                  break;\n                }\n                return _context.abrupt(\"continue\", 10);\n              case 8:\n                service.runService(this.params);\n                my_list.push(service.getServiceName());\n              case 10:\n                _context.next = 4;\n                break;\n              case 12:\n                _context.next = 17;\n                break;\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](2);\n                _iterator.e(_context.t0);\n              case 17:\n                _context.prev = 17;\n                _iterator.f();\n                return _context.finish(17);\n              case 20:\n                return _context.abrupt(\"return\", {\n                  status: !!my_list.length,\n                  services: my_list\n                });\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 14, 17, 20]]);\n      }));\n      function exec() {\n        return _exec.apply(this, arguments);\n      }\n      return exec;\n    }()\n  }]);\n  return AnalysisRouter;\n}();\nexports.default = AnalysisRouter;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAMA;AAAsC,IAGhCA,iBAAiB;EAAA;AAAA;AAgDdC;AAAiB,IAxCpBC,cAAc;EAGlB;;;;;;;;EAQA,wBAAoBC,MAAyB;IAAA;IAAzB,WAAM,GAANA,MAAM;IAV1B,aAAQ,GAAoB,EAAE;EAUkB;EAAC;IAAA;IAAA,OAE1C,kBAASC,IAA4C;MAC1D,IAAMC,OAAO,GAAG,IAAIC,iBAAa,CAACF,IAAI,CAAC;MACvC,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACH,OAAO,CAAC;MAE3B,OAAOA,OAAO;IAChB;IAEA;;;;;EAAA;IAAA;IAAA;MAAA,uEAKO;QAAA;QAAA;UAAA;YAAA;cAAA;gBACCI,OAAO,GAAa,EAAE;gBAAA,uCACN,IAAI,CAACF,QAAQ;gBAAA;gBAAA;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAxBF,OAAO;gBAAA,IACXA,OAAO,CAACK,oBAAoB,CAAC,IAAI,CAACP,MAAM,CAACQ,KAAK,EAAE,IAAI,CAACR,MAAM,CAACS,WAAW,CAAC;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAI7EP,OAAO,CAACQ,UAAU,CAAC,IAAI,CAACV,MAAM,CAAC;gBAC/BM,OAAO,CAACD,IAAI,CAACH,OAAO,CAACS,cAAc,EAAE,CAAC;cAAC;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA,iCAGlC;kBAAEC,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM;kBAAET,QAAQ,EAAEE;gBAAO,CAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACvD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAIHR,kBAAeC,cAAc","names":["RouterConstructor","exports","AnalysisRouter","params","func","service","service_1","services","push","my_list","verifyConditionsTrue","scope","environment","runService","getServiceName","status","length"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\router\\router.ts"],"sourcesContent":["import { Data } from \"../../../common/common.types\";\r\nimport Account from \"../../Account/Account\";\r\nimport { MQTTResourceAction } from \"../../Account/actions.types\";\r\nimport { DeviceCreateInfo } from \"../../Account/devices.types\";\r\nimport { TagoContext } from \"../../Analysis/analysis.types\";\r\nimport Device from \"../../Device/Device\";\r\nimport RouterService from \"./service\";\r\n\r\ntype Scope = (Data | DeviceCreateInfo | { input_form_button_id: string } | MQTTResourceAction)[];\r\nclass RouterConstructor {\r\n  scope: Scope;\r\n  environment: { [key: string]: string };\r\n  account?: Account;\r\n  config_dev?: Device;\r\n  context?: TagoContext;\r\n}\r\n\r\nclass AnalysisRouter {\r\n  services: RouterService[] = [];\r\n\r\n  /**\r\n   * Create an Analysis Router.\r\n   * Use router.register to register new routes for your analysis.\r\n   * Use router.exec() to execute the router and run your functions.\r\n   * Example:\r\n   *      router.register(myFunction).whenInputFormID('create-device-input');\r\n   *      router.exec();\r\n   */\r\n  constructor(private params: RouterConstructor) {}\r\n\r\n  public register(func: (parameters: RouterConstructor) => any) {\r\n    const service = new RouterService(func);\r\n    this.services.push(service);\r\n\r\n    return service;\r\n  }\r\n\r\n  /**\r\n   * Start the router. It will pick the service if all conditions are match\r\n   * and send all parameter provided to the final function.\r\n   * @returns json with status and services that run\r\n   */\r\n  public async exec() {\r\n    const my_list: string[] = [];\r\n    for (const service of this.services) {\r\n      if (!service.verifyConditionsTrue(this.params.scope, this.params.environment)) {\r\n        continue;\r\n      }\r\n\r\n      service.runService(this.params);\r\n      my_list.push(service.getServiceName());\r\n    }\r\n\r\n    return { status: !!my_list.length, services: my_list };\r\n  }\r\n}\r\n\r\nexport { RouterConstructor };\r\nexport default AnalysisRouter;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}