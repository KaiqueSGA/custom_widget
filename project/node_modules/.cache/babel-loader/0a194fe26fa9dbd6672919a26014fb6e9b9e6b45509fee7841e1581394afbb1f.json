{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      allow_zoom: false,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      max_points: oldDisplay?.max_points || 500,\n      object_fit: \"contain\",\n      occupy_whole_widget: false,\n      radius: oldDisplay?.radius || 1,\n      scale: {\n        enable: !!oldDisplay?.scale_fixed,\n        maximum: oldDisplay?.scale_maximum || 100,\n        minimum: oldDisplay?.scale_minimum || 0,\n        type: \"fixed\"\n      },\n      show_coordinates: oldDisplay?.show_coordinates !== undefined ? oldDisplay?.show_coordinates : true,\n      show_last_update: false,\n      show_scale: oldDisplay?.show_scale !== undefined ? oldDisplay?.show_scale : true,\n      show_zoom_buttons: false,\n      source: {\n        static_image: oldDisplay?.img_path || \"\",\n        type: \"static\"\n      },\n      theme: {\n        color: {\n          background: null,\n          button_background: null,\n          button_border: null,\n          button_icon: null,\n          header: null,\n          text: null,\n          text_background: null,\n          text_border: null\n        },\n        timezone: {\n          id: oldWidget?.data?.[0]?.timezone || \"UTC\"\n        }\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"heat_map\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item.variables) {\n        newStructure.display.variables.push({\n          origin: item.origin,\n          overwrite_coordinates: false,\n          variable\n        });\n      }\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.layer_type || widget?.display?.img_path || widget?.display?.scale_minimum || widget?.display?.scale_maximum || widget?.display?.scale_fixed || widget?.display?.watermark !== undefined);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","allow_zoom","header_buttons","help","max_points","object_fit","occupy_whole_widget","radius","scale","enable","scale_fixed","maximum","scale_maximum","minimum","scale_minimum","type","show_coordinates","undefined","show_last_update","show_scale","show_zoom_buttons","source","static_image","img_path","theme","color","background","button_background","button_border","button_icon","header","text","text_background","text_border","timezone","id","data","variables","label","realtime","Array","isArray","item","is_hide","variable","push","origin","overwrite_coordinates","exports","isOldStructure","widget","isOld","layer_type","watermark"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\heatmap.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old HEAT MAP to new HEAT MAP\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      allow_zoom: false,\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      max_points: oldDisplay?.max_points || 500,\n      object_fit: \"contain\",\n      occupy_whole_widget: false,\n      radius: oldDisplay?.radius || 1,\n      scale: {\n        enable: !!oldDisplay?.scale_fixed,\n        maximum: oldDisplay?.scale_maximum || 100,\n        minimum: oldDisplay?.scale_minimum || 0,\n        type: \"fixed\",\n      },\n      show_coordinates: oldDisplay?.show_coordinates !== undefined ? oldDisplay?.show_coordinates : true,\n      show_last_update: false,\n      show_scale: oldDisplay?.show_scale !== undefined ? oldDisplay?.show_scale : true,\n      show_zoom_buttons: false,\n      source: {\n        static_image: oldDisplay?.img_path || \"\",\n        type: \"static\",\n      },\n      theme: {\n        color: {\n          background: null,\n          button_background: null,\n          button_border: null,\n          button_icon: null,\n          header: null,\n          text: null,\n          text_background: null,\n          text_border: null,\n        },\n        timezone: {\n          id: oldWidget?.data?.[0]?.timezone || \"UTC\",\n        },\n      },\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"heat_map\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item.variables) {\n        newStructure.display.variables.push({\n          origin: item.origin,\n          overwrite_coordinates: false,\n          variable,\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.layer_type ||\n    widget?.display?.img_path ||\n    widget?.display?.scale_minimum ||\n    widget?.display?.scale_maximum ||\n    widget?.display?.scale_fixed ||\n    widget?.display?.watermark !== undefined\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}