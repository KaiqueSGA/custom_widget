{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Go through variables used in Multiple Dropdown variables and remove a specified value.\n * Then updates the variables.\n * @param device TagoIO Device instanced class.\n * @param variables variables inside the device to be verified.\n * @param value value to be removed.\n */\nfunction updateMultipleDropdown(_x, _x2, _x3) {\n  return _updateMultipleDropdown.apply(this, arguments);\n}\nfunction _updateMultipleDropdown() {\n  _updateMultipleDropdown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(device, variables, values) {\n    var fixed_values, data_list;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fixed_values = Array.isArray(values) ? values : [values];\n            _context.next = 3;\n            return device.getData({\n              variables: variables,\n              qty: 999\n            });\n          case 3:\n            data_list = _context.sent;\n            data_list.forEach(function (item) {\n              var _item$metadata;\n              var sentValues = (_item$metadata = item.metadata) === null || _item$metadata === void 0 ? void 0 : _item$metadata.sentValues;\n              var new_data_value = item.value.split(\";\");\n              if (sentValues.find(function (x) {\n                return fixed_values.includes(x.value);\n              })) {\n                sentValues = sentValues.filter(function (x) {\n                  if (fixed_values.includes(x.value)) {\n                    new_data_value = new_data_value.filter(function (y) {\n                      return !fixed_values.includes(y) && !fixed_values.includes(x.label);\n                    });\n                  }\n                  return !fixed_values.includes(x.value);\n                });\n                var new_item = _objectSpread(_objectSpread({}, item), {}, {\n                  value: new_data_value.join(\";\"),\n                  metadata: _objectSpread(_objectSpread({}, item.metadata), {}, {\n                    sentValues: sentValues\n                  })\n                });\n                device.deleteData({\n                  ids: item.id\n                }).catch(function (e) {\n                  return console.error(e);\n                });\n                device.sendData(new_item).catch(function (e) {\n                  return console.error(e);\n                });\n              }\n            });\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _updateMultipleDropdown.apply(this, arguments);\n}\nexports.default = updateMultipleDropdown;","map":{"version":3,"mappings":";;;;;;;;AAEA;;;;;;;AAAA,SAOeA,sBAAsB;EAAA;AAAA;AAAA;EAAA,qFAArC,iBAAsCC,MAAc,EAAEC,SAA4B,EAAEC,MAAyB;IAAA;IAAA;MAAA;QAAA;UAAA;YACrGC,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;YAAA;YAAA,OAEtCF,MAAM,CAACM,OAAO,CAAC;cAAEL,SAAS,EAATA,SAAS;cAAEM,GAAG,EAAE;YAAG,CAAE,CAAC;UAAA;YAAzDC,SAAS;YAEfA,SAAS,CAACC,OAAO,CAAC,UAACC,IAAI,EAAI;cAAA;cACzB,IAAIC,UAAU,qBAAGD,IAAI,CAACE,QAAQ,mDAAb,eAAeD,UAAgD;cAChF,IAAIE,cAAc,GAAIH,IAAI,CAACI,KAAgB,CAACC,KAAK,CAAC,GAAG,CAAC;cAEtD,IAAIJ,UAAU,CAACK,IAAI,CAAC,UAACC,CAAC;gBAAA,OAAKd,YAAY,CAACe,QAAQ,CAACD,CAAC,CAACH,KAAK,CAAC;cAAA,EAAC,EAAE;gBAC1DH,UAAU,GAAGA,UAAU,CAACQ,MAAM,CAAC,UAACF,CAAC,EAAI;kBACnC,IAAId,YAAY,CAACe,QAAQ,CAACD,CAAC,CAACH,KAAK,CAAC,EAAE;oBAClCD,cAAc,GAAGA,cAAc,CAACM,MAAM,CAAC,UAACC,CAAC;sBAAA,OAAK,CAACjB,YAAY,CAACe,QAAQ,CAACE,CAAC,CAAC,IAAI,CAACjB,YAAY,CAACe,QAAQ,CAACD,CAAC,CAACI,KAAK,CAAC;oBAAA,EAAC;;kBAE7G,OAAO,CAAClB,YAAY,CAACe,QAAQ,CAACD,CAAC,CAACH,KAAK,CAAC;gBACxC,CAAC,CAAC;gBAEF,IAAMQ,QAAQ,mCACTZ,IAAI;kBACPI,KAAK,EAAED,cAAc,CAACU,IAAI,CAAC,GAAG,CAAC;kBAC/BX,QAAQ,kCAAOF,IAAI,CAACE,QAAQ;oBAAED,UAAU,EAAVA;kBAAU;gBAAE,EACpC;gBAERX,MAAM,CAACwB,UAAU,CAAC;kBAAEC,GAAG,EAAEf,IAAI,CAACgB;gBAAE,CAAE,CAAC,CAACC,KAAK,CAAC,UAACC,CAAC;kBAAA,OAAKC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;gBAAA,EAAC;gBAClE5B,MAAM,CAAC+B,QAAQ,CAACT,QAAQ,CAAC,CAACK,KAAK,CAAC,UAACC,CAAC;kBAAA,OAAKC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;gBAAA,EAAC;;YAE5D,CAAC,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACJ;EAAA;AAAA;AAEDI,kBAAejC,sBAAsB","names":["updateMultipleDropdown","device","variables","values","fixed_values","Array","isArray","getData","qty","data_list","forEach","item","sentValues","metadata","new_data_value","value","split","find","x","includes","filter","y","label","new_item","join","deleteData","ids","id","catch","e","console","error","sendData","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Utils\\updateMultipleDropdown.ts"],"sourcesContent":["import Device from \"../Device/Device\";\n\n/**\n * Go through variables used in Multiple Dropdown variables and remove a specified value.\n * Then updates the variables.\n * @param device TagoIO Device instanced class.\n * @param variables variables inside the device to be verified.\n * @param value value to be removed.\n */\nasync function updateMultipleDropdown(device: Device, variables: string | string[], values: string | string[]) {\n  const fixed_values = Array.isArray(values) ? values : [values];\n\n  const data_list = await device.getData({ variables, qty: 999 });\n\n  data_list.forEach((item) => {\n    let sentValues = item.metadata?.sentValues as { value: string; label: string }[];\n    let new_data_value = (item.value as string).split(\";\");\n\n    if (sentValues.find((x) => fixed_values.includes(x.value))) {\n      sentValues = sentValues.filter((x) => {\n        if (fixed_values.includes(x.value)) {\n          new_data_value = new_data_value.filter((y) => !fixed_values.includes(y) && !fixed_values.includes(x.label));\n        }\n        return !fixed_values.includes(x.value);\n      });\n\n      const new_item = {\n        ...item,\n        value: new_data_value.join(\";\"),\n        metadata: { ...item.metadata, sentValues },\n      } as any;\n\n      device.deleteData({ ids: item.id }).catch((e) => console.error(e));\n      device.sendData(new_item).catch((e) => console.error(e));\n    }\n  });\n}\n\nexport default updateMultipleDropdown;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}