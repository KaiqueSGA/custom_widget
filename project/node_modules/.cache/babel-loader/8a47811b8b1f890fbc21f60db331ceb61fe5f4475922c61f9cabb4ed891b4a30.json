{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      theme: {\n        color: {}\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"static_table\"\n  };\n  const cells = oldDisplay?.cell || {};\n  const cellKeys = Object.keys(cells);\n  for (const key of cellKeys) {\n    const position = {\n      x: Number(key.split(\"_\")?.[1]) || 0,\n      y: Number(key.split(\"_\")?.[0]) || 0\n    };\n    const size = \"auto\";\n    const dataType = cells[key]?.type === \"constant\" ? \"text\" : \"variable\";\n    if (dataType === \"text\") {\n      newStructure.display.variables.push({\n        allow_resize: true,\n        data_type: dataType,\n        id: (0, common_1.generateWidgetItemId)(),\n        position,\n        text_content: cells[key]?.constant,\n        show_bold: true,\n        size\n      });\n    } else {\n      const variableObject = cells[key]?.variables || {};\n      const origin = variableObject?.device?.id || \"\";\n      const variable = variableObject?.variable || \"\";\n      const data = {\n        origin,\n        variable,\n        query: \"last_value\"\n      };\n      const variableKey = `${origin}${variable}`;\n      const alias = oldDisplay.vars_labels?.[variableKey];\n      const numberFormat = oldDisplay.vars_format?.[variableKey];\n      const formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[variableKey]);\n      const alignment = oldDisplay?.column_alignments?.[variableKey];\n      const contentType = oldDisplay?.conditions?.[variableKey] ? \"icon\" : \"value\";\n      const iconConditions = oldDisplay?.conditions?.[variableKey];\n      newStructure.display.variables.push({\n        ...(alias ? {\n          alias\n        } : {}),\n        ...(alignment ? {\n          alignment\n        } : {}),\n        ...(contentType ? {\n          content_type: contentType\n        } : {}),\n        ...(formula ? {\n          formula\n        } : {}),\n        ...(iconConditions ? {\n          icon_conditions: iconConditions\n        } : {}),\n        ...(numberFormat ? {\n          number_format: numberFormat\n        } : {}),\n        allow_resize: true,\n        data,\n        data_type: dataType,\n        id: (0, common_1.generateWidgetItemId)(),\n        position,\n        size\n      });\n      /**\n       * Formulas by variable are not working because the data structure is not\n       * encapsuling the new variables.\n       */\n      if (formula?.enable && formula?.formula_type === \"variable\" && formula?.variable) {\n        const formulaVariable = formula?.variable;\n        oldWidget.data.push({\n          bucket: formulaVariable?.bucket,\n          origin: formulaVariable?.origin,\n          variables: [formulaVariable?.variable],\n          query: \"last_value\"\n        });\n      }\n    }\n  }\n  newStructure.data = oldWidget.data; // transfers the .data property\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.cell || widget?.display?.vars_that_have_conditions);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","header_buttons","help","theme","color","variables","id","label","realtime","type","cells","cell","cellKeys","Object","keys","key","position","x","Number","split","y","size","dataType","push","allow_resize","data_type","text_content","constant","show_bold","variableObject","origin","device","variable","data","query","variableKey","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","alignment","column_alignments","contentType","conditions","iconConditions","content_type","icon_conditions","number_format","enable","formula_type","formulaVariable","bucket","exports","isOldStructure","widget","isOld","vars_that_have_conditions"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\statictable.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old STATIC TABLE to new STATIC TABLE\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { convertFormula, generateWidgetItemId } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      theme: {\n        color: {},\n      },\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"static_table\",\n  };\n\n  const cells = oldDisplay?.cell || {};\n  const cellKeys = Object.keys(cells);\n\n  for (const key of cellKeys) {\n    const position = {\n      x: Number(key.split(\"_\")?.[1]) || 0,\n      y: Number(key.split(\"_\")?.[0]) || 0,\n    };\n\n    const size = \"auto\";\n    const dataType = cells[key]?.type === \"constant\" ? \"text\" : \"variable\";\n\n    if (dataType === \"text\") {\n      newStructure.display.variables.push({\n        allow_resize: true,\n        data_type: dataType,\n        id: generateWidgetItemId(),\n        position,\n        text_content: cells[key]?.constant,\n        show_bold: true,\n        size,\n      });\n    } else {\n      const variableObject = cells[key]?.variables || {};\n\n      const origin = variableObject?.device?.id || \"\";\n      const variable = variableObject?.variable || \"\";\n\n      const data = { origin, variable, query: \"last_value\" };\n      const variableKey = `${origin}${variable}`;\n\n      const alias = oldDisplay.vars_labels?.[variableKey];\n      const numberFormat = oldDisplay.vars_format?.[variableKey];\n      const formula = convertFormula(oldDisplay.vars_formula?.[variableKey]);\n\n      const alignment = oldDisplay?.column_alignments?.[variableKey];\n      const contentType = oldDisplay?.conditions?.[variableKey] ? \"icon\" : \"value\";\n      const iconConditions = oldDisplay?.conditions?.[variableKey];\n\n      newStructure.display.variables.push({\n        ...(alias ? { alias } : {}),\n        ...(alignment ? { alignment } : {}),\n        ...(contentType ? { content_type: contentType } : {}),\n        ...(formula ? { formula } : {}),\n        ...(iconConditions ? { icon_conditions: iconConditions } : {}),\n        ...(numberFormat ? { number_format: numberFormat } : {}),\n        allow_resize: true,\n        data,\n        data_type: dataType,\n        id: generateWidgetItemId(),\n        position,\n        size,\n      });\n\n      /**\n       * Formulas by variable are not working because the data structure is not\n       * encapsuling the new variables.\n       */\n      if (formula?.enable && formula?.formula_type === \"variable\" && formula?.variable) {\n        const formulaVariable = formula?.variable;\n        oldWidget.data.push({\n          bucket: formulaVariable?.bucket,\n          origin: formulaVariable?.origin,\n          variables: [formulaVariable?.variable],\n          query: \"last_value\",\n        });\n      }\n    }\n  }\n\n  newStructure.data = oldWidget.data; // transfers the .data property\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(widget?.display?.cell || widget?.display?.vars_that_have_conditions);\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}