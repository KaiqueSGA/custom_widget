{"ast":null,"code":"\"use strict\";\n\n// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Converts the OLD FORMULA to BLUEPRINT FORMULA\n// ? ====================================================================================\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction convertFormula(oldFormula) {\n  if (!oldFormula || Object.keys(oldFormula).length === 0) {\n    return null;\n  }\n  var newFormula = {\n    enable: oldFormula === null || oldFormula === void 0 ? void 0 : oldFormula.enable,\n    formula_type: \"fixed\",\n    unit_type: oldFormula === null || oldFormula === void 0 ? void 0 : oldFormula.unit_type,\n    value: oldFormula === null || oldFormula === void 0 ? void 0 : oldFormula.formula\n  };\n  if (oldFormula.unit_type) {\n    // fixed, variable, origin\n    newFormula.unit_type = oldFormula.unit_type;\n  }\n  if (oldFormula.unit) {\n    // fixed unit (F, C, ...)\n    newFormula.fixed_unit = oldFormula.unit;\n  }\n  if ((oldFormula === null || oldFormula === void 0 ? void 0 : oldFormula.formula_type) === \"dynamic\") {\n    // uses variable for formula instead of value\n    newFormula.formula_type = \"variable\";\n  }\n  if (oldFormula !== null && oldFormula !== void 0 && oldFormula.formula_variable) {\n    var _oldVariable$origin;\n    var oldVariable = oldFormula.formula_variable;\n    newFormula.variable = {\n      origin: ((_oldVariable$origin = oldVariable.origin) === null || _oldVariable$origin === void 0 ? void 0 : _oldVariable$origin.id) || (oldVariable === null || oldVariable === void 0 ? void 0 : oldVariable.origin),\n      variable: oldVariable === null || oldVariable === void 0 ? void 0 : oldVariable.variable\n    };\n    if (typeof newFormula.variable.origin !== \"string\") {\n      // origin has to be a string. If it's not, then something went wrong\n      // during the formula conversion.\n      newFormula.variable = null;\n    }\n  }\n  return newFormula;\n}\nexports.default = convertFormula;","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;;;;AAEA,SAASA,cAAc,CAACC,UAAe;EACrC,IAAI,CAACA,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACvD,OAAO,IAAI;;EAGb,IAAMC,UAAU,GAAQ;IACtBC,MAAM,EAAEL,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,MAAM;IAC1BC,YAAY,EAAE,OAAO;IACrBC,SAAS,EAAEP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,SAAS;IAChCC,KAAK,EAAER,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAES;GACpB;EAED,IAAIT,UAAU,CAACO,SAAS,EAAE;IACxB;IACAH,UAAU,CAACG,SAAS,GAAGP,UAAU,CAACO,SAAS;;EAG7C,IAAIP,UAAU,CAACU,IAAI,EAAE;IACnB;IACAN,UAAU,CAACO,UAAU,GAAGX,UAAU,CAACU,IAAI;;EAGzC,IAAI,WAAU,aAAVV,UAAU,uBAAVA,UAAU,CAAEM,YAAY,MAAK,SAAS,EAAE;IAC1C;IACAF,UAAU,CAACE,YAAY,GAAG,UAAU;;EAGtC,IAAIN,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEY,gBAAgB,EAAE;IAAA;IAChC,IAAMC,WAAW,GAAGb,UAAU,CAACY,gBAAgB;IAC/CR,UAAU,CAACU,QAAQ,GAAG;MACpBC,MAAM,EAAE,mCAAW,CAACA,MAAM,wDAAlB,oBAAoBC,EAAE,MAAIH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,MAAM;MACrDD,QAAQ,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC;KACxB;IAED,IAAI,OAAOV,UAAU,CAACU,QAAQ,CAACC,MAAM,KAAK,QAAQ,EAAE;MAClD;MACA;MACAX,UAAU,CAACU,QAAQ,GAAG,IAAI;;;EAI9B,OAAOV,UAAU;AACnB;AAEAa,kBAAelB,cAAc","names":["convertFormula","oldFormula","Object","keys","length","newFormula","enable","formula_type","unit_type","value","formula","unit","fixed_unit","formula_variable","oldVariable","variable","origin","id","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\common\\convertFormula.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Converts the OLD FORMULA to BLUEPRINT FORMULA\r\n// ? ====================================================================================\r\n\r\nfunction convertFormula(oldFormula: any): any {\r\n  if (!oldFormula || Object.keys(oldFormula).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const newFormula: any = {\r\n    enable: oldFormula?.enable,\r\n    formula_type: \"fixed\",\r\n    unit_type: oldFormula?.unit_type,\r\n    value: oldFormula?.formula,\r\n  };\r\n\r\n  if (oldFormula.unit_type) {\r\n    // fixed, variable, origin\r\n    newFormula.unit_type = oldFormula.unit_type;\r\n  }\r\n\r\n  if (oldFormula.unit) {\r\n    // fixed unit (F, C, ...)\r\n    newFormula.fixed_unit = oldFormula.unit;\r\n  }\r\n\r\n  if (oldFormula?.formula_type === \"dynamic\") {\r\n    // uses variable for formula instead of value\r\n    newFormula.formula_type = \"variable\";\r\n  }\r\n\r\n  if (oldFormula?.formula_variable) {\r\n    const oldVariable = oldFormula.formula_variable;\r\n    newFormula.variable = {\r\n      origin: oldVariable.origin?.id || oldVariable?.origin,\r\n      variable: oldVariable?.variable,\r\n    };\r\n\r\n    if (typeof newFormula.variable.origin !== \"string\") {\r\n      // origin has to be a string. If it's not, then something went wrong\r\n      // during the formula conversion.\r\n      newFormula.variable = null;\r\n    }\r\n  }\r\n\r\n  return newFormula;\r\n}\r\n\r\nexport default convertFormula;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}