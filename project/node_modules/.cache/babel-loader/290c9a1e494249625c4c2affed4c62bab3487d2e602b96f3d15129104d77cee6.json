{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Run extends TagoIOModule_1.default {\n  async info() {\n    const result = await this.doRequest({\n      path: \"/run\",\n      method: \"GET\"\n    });\n    return result;\n  }\n  async edit(data) {\n    const result = await this.doRequest({\n      path: \"/run\",\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  async listUsers(query) {\n    let result = await this.doRequest({\n      path: \"/run/users\",\n      method: \"GET\",\n      params: {\n        page: query?.page || 1,\n        fields: query?.fields || [\"id\", \"name\"],\n        filter: query?.filter || {},\n        amount: query?.amount || 20,\n        orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\", \"last_login\"]));\n    return result;\n  }\n  async userInfo(userID) {\n    let result = await this.doRequest({\n      path: `/run/users/${userID}`,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_login\"]);\n    return result;\n  }\n  async userCreate(data) {\n    const result = await this.doRequest({\n      path: `/run/users`,\n      method: \"POST\",\n      body: data\n    });\n    return result;\n  }\n  async userEdit(userID, data) {\n    const result = await this.doRequest({\n      path: `/run/users/${userID}`,\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  async userDelete(userID) {\n    const result = await this.doRequest({\n      path: `/run/users/${userID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  async loginAsUser(userID, options) {\n    let result = await this.doRequest({\n      path: `/run/users/${userID}/login`,\n      params: options,\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n    return result;\n  }\n  async emailTest(data) {\n    const result = await this.doRequest({\n      path: `/run/email_test`,\n      method: \"POST\",\n      body: data\n    });\n    return result;\n  }\n  async notificationList(userID) {\n    const result = await this.doRequest({\n      path: `/run/notification/${userID}`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  async notificationCreate(userID, data) {\n    const result = await this.doRequest({\n      path: `/run/notification/`,\n      method: \"POST\",\n      body: {\n        run_user: userID,\n        ...data\n      }\n    });\n    return result;\n  }\n  async notificationEdit(notificationID, data) {\n    const result = await this.doRequest({\n      path: `/run/notification/${notificationID}`,\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  async notificationDelete(notificationID) {\n    const result = await this.doRequest({\n      path: `/run/notification/${notificationID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Get the SAML Single Sign-On information for the account's RUN.\r\n   */\n  async ssoSAMLInfo() {\n    const result = await this.doRequest({\n      path: \"/run/sso/saml\",\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\r\n   * Edit the SAML Single Sign-On metadata and mappings for the account's RUN.\r\n   *\r\n   * @param data Updated data for a RUN's SAML Single Sign-On configuration.\r\n   */\n  async ssoSAMLEdit(data) {\n    const result = await this.doRequest({\n      path: \"/run/sso/saml\",\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  /**\r\n   * Create a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @param customDomainData query params\r\n   * @returns Success message.\r\n   */\n  async createCustomDomain(profile_id, customDomainData) {\n    const result = await this.doRequest({\n      path: `/run/customdomain/${profile_id}`,\n      body: customDomainData,\n      method: \"POST\"\n    });\n    return result;\n  }\n  /**\r\n   * Get details of TagoRun custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Data for the profile's custom DNS configuration.\r\n   */\n  async getCustomDomain(profile_id) {\n    const result = await this.doRequest({\n      path: `/run/customdomain/${profile_id}`,\n      method: \"GET\"\n    });\n    const parsedResult = (0, dateParser_1.default)(result, [\"created_at\"]);\n    return parsedResult;\n  }\n  /**\r\n   * delete a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Success message.\r\n   */\n  async deleteCustomDomain(profile_id) {\n    const result = await this.doRequest({\n      path: `/run/customdomain/${profile_id}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\r\n   * Regenerate a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Success message.\r\n   */\n  async regenerateCustomDomain(profile_id) {\n    const result = await this.doRequest({\n      path: `/run/customdomain/regenerate/${profile_id}`,\n      method: \"PUT\"\n    });\n    return result;\n  }\n}\nexports.default = Run;","map":{"version":3,"mappings":"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","names":["Run","TagoIOModule_1","info","result","doRequest","path","method","edit","data","body","listUsers","query","params","page","fields","filter","amount","orderBy","map","userInfo","userID","userCreate","userEdit","userDelete","loginAsUser","options","emailTest","notificationList","notificationCreate","run_user","notificationEdit","notificationID","notificationDelete","ssoSAMLInfo","ssoSAMLEdit","createCustomDomain","profile_id","customDomainData","getCustomDomain","parsedResult","deleteCustomDomain","regenerateCustomDomain","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Run.ts"],"sourcesContent":["import { GenericID, RecursivePartial } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport { NotificationCreate, NotificationInfo } from \"./notifications.types\";\r\nimport {\r\n  LoginResponse,\r\n  RunInfo,\r\n  UserCreateInfo,\r\n  UserInfo,\r\n  UserQuery,\r\n  LoginAsUserOptions,\r\n  RunSAMLInfo,\r\n  RunSAMLEditInfo,\r\n  CustomDomainCreate,\r\n  CustomDomainInfo,\r\n  CustomDomainResponse,\r\n} from \"./run.types\";\r\n\r\nclass Run extends TagoIOModule<GenericModuleParams> {\r\n  public async info(): Promise<RunInfo> {\r\n    const result = await this.doRequest<RunInfo>({\r\n      path: \"/run\",\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async edit(data: RecursivePartial<RunInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: \"/run\",\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async listUsers(query: UserQuery): Promise<Partial<UserInfo>[]> {\r\n    let result = await this.doRequest<Partial<UserInfo>[]>({\r\n      path: \"/run/users\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: query?.page || 1,\r\n        fields: query?.fields || [\"id\", \"name\"],\r\n        filter: query?.filter || {},\r\n        amount: query?.amount || 20,\r\n        orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : \"name,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\", \"last_login\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  public async userInfo(userID: GenericID): Promise<UserInfo> {\r\n    let result = await this.doRequest<UserInfo>({\r\n      path: `/run/users/${userID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_login\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  public async userCreate(data: UserCreateInfo): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/users`,\r\n      method: \"POST\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async userEdit(userID: GenericID, data: Partial<UserInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/users/${userID}`,\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async userDelete(userID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/users/${userID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async loginAsUser(userID: GenericID, options?: LoginAsUserOptions): Promise<LoginResponse> {\r\n    let result = await this.doRequest<LoginResponse>({\r\n      path: `/run/users/${userID}/login`,\r\n      params: options,\r\n      method: \"GET\",\r\n    });\r\n\r\n    result = dateParser(result, [\"expire_date\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  public async emailTest(data: { subject: string; body: string }): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/email_test`,\r\n      method: \"POST\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async notificationList(userID: GenericID): Promise<NotificationInfo[]> {\r\n    const result = await this.doRequest<NotificationInfo[]>({\r\n      path: `/run/notification/${userID}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async notificationCreate(userID: GenericID, data: NotificationCreate): Promise<{ id: GenericID }> {\r\n    const result = await this.doRequest<{ id: GenericID }>({\r\n      path: `/run/notification/`,\r\n      method: \"POST\",\r\n      body: {\r\n        run_user: userID,\r\n        ...data,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async notificationEdit(notificationID: GenericID, data: Partial<NotificationCreate>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/notification/${notificationID}`,\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  public async notificationDelete(notificationID: GenericID): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/notification/${notificationID}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the SAML Single Sign-On information for the account's RUN.\r\n   */\r\n  public async ssoSAMLInfo(): Promise<RunSAMLInfo> {\r\n    const result = await this.doRequest<RunSAMLInfo>({\r\n      path: \"/run/sso/saml\",\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Edit the SAML Single Sign-On metadata and mappings for the account's RUN.\r\n   *\r\n   * @param data Updated data for a RUN's SAML Single Sign-On configuration.\r\n   */\r\n  public async ssoSAMLEdit(data: RunSAMLEditInfo): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: \"/run/sso/saml\",\r\n      method: \"PUT\",\r\n      body: data,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @param customDomainData query params\r\n   * @returns Success message.\r\n   */\r\n  public async createCustomDomain(profile_id: string, customDomainData: CustomDomainCreate): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/customdomain/${profile_id}`,\r\n      body: customDomainData,\r\n      method: \"POST\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get details of TagoRun custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Data for the profile's custom DNS configuration.\r\n   */\r\n  public async getCustomDomain(profile_id: string): Promise<CustomDomainInfo> {\r\n    const result = await this.doRequest<CustomDomainResponse>({\r\n      path: `/run/customdomain/${profile_id}`,\r\n      method: \"GET\",\r\n    });\r\n\r\n    const parsedResult = dateParser(result, [\"created_at\"]) as unknown as CustomDomainInfo;\r\n\r\n    return parsedResult;\r\n  }\r\n\r\n  /**\r\n   * delete a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Success message.\r\n   */\r\n  public async deleteCustomDomain(profile_id: string): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/customdomain/${profile_id}`,\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Regenerate a TagoRUN custom domain for the profile.\r\n   *\r\n   * @param profile_id ID of the profile\r\n   * @returns Success message.\r\n   */\r\n  public async regenerateCustomDomain(profile_id: string): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/run/customdomain/regenerate/${profile_id}`,\r\n      method: \"PUT\",\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Run;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}