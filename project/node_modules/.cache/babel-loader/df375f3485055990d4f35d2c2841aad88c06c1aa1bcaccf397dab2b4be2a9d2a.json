{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar angular_1 = require(\"./angular\");\nvar areachart_1 = require(\"./areachart\");\nvar card_1 = require(\"./card\");\nvar clock_1 = require(\"./clock\");\nvar compose_1 = require(\"./compose\");\nvar custom_1 = require(\"./custom\");\nvar cylinder_1 = require(\"./cylinder\");\nvar dial_1 = require(\"./dial\");\nvar display_1 = require(\"./display\");\nvar dynamic_table_1 = require(\"./dynamic_table\");\nvar grainbin_1 = require(\"./grainbin\");\nvar heatmap_1 = require(\"./heatmap\");\nvar horizontalbarchart_1 = require(\"./horizontalbarchart\");\nvar icon_1 = require(\"./icon\");\nvar image_1 = require(\"./image\");\nvar imagemarker_1 = require(\"./imagemarker\");\nvar inputcontrol_1 = require(\"./inputcontrol\");\nvar inputform_1 = require(\"./inputform\");\nvar keypad_1 = require(\"./keypad\");\nvar linechart_1 = require(\"./linechart\");\nvar map_1 = require(\"./map\");\nvar multipleaxischart_1 = require(\"./multipleaxischart\");\nvar note_1 = require(\"./note\");\nvar pie_1 = require(\"./pie\");\nvar pushbutton_1 = require(\"./pushbutton\");\nvar semidonut_1 = require(\"./semidonut\");\nvar solid_1 = require(\"./solid\");\nvar statictable_1 = require(\"./statictable\");\nvar stepbutton_1 = require(\"./stepbutton\");\nvar tile_1 = require(\"./tile\");\nvar verticalbarchart_1 = require(\"./verticalbarchart\");\nvar video_1 = require(\"./video\");\nvar vumeter_1 = require(\"./vumeter\");\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar Migration = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Migration, _TagoIOModule_1$defau);\n  var _super = _createSuper(Migration);\n  function Migration() {\n    _classCallCheck(this, Migration);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Migration, null, [{\n    key: \"convertImagerMarkerData\",\n    value: function convertImagerMarkerData(widget, widgetData) {\n      return (0, imagemarker_1.convertLayerData)(widget, widgetData);\n    }\n    /**\r\n     * Returns if the widget type is supported by migration\r\n     */\n  }, {\n    key: \"hasMigrate\",\n    value: function hasMigrate(widget) {\n      var _ref = widget || {},\n        type = _ref.type;\n      var _ref2 = (widget === null || widget === void 0 ? void 0 : widget.display) || {},\n        gauge_type = _ref2.gauge_type,\n        chart_type = _ref2.chart_type,\n        layer_type = _ref2.layer_type;\n      switch (type) {\n        case \"pie\":\n          return true;\n        case \"note\":\n          return true;\n        case \"cylinder\":\n          return true;\n        case \"display\":\n          return true;\n        case \"table\":\n          return true;\n        case \"iframe\":\n          return true;\n        case \"dial\":\n          return true;\n        case \"gauge\":\n          if (gauge_type === \"angular\") {\n            return true;\n          } else if (gauge_type === \"solid\") {\n            return true;\n          } else if (gauge_type === \"clock\") {\n            return true;\n          } else if (gauge_type === \"vu_meter\") {\n            return true;\n          } else if (gauge_type === \"dial\") {\n            return true;\n          }\n          return false;\n        case \"chart\":\n          if (chart_type === \"spline\") {\n            return true;\n          } else if (chart_type === \"area\") {\n            return true;\n          } else if (chart_type === \"bar_horizontal\") {\n            return true;\n          } else if (chart_type === \"bar_vertical\") {\n            return true;\n          } else if (chart_type === \"multiple_axis\") {\n            return true;\n          }\n          return false;\n        case \"card\":\n          return true;\n        case \"tile\":\n          return true;\n        case \"keypad\":\n          return true;\n        case \"incremental_button\":\n        case \"step_button\":\n          return true;\n        case \"push_button\":\n          return true;\n        case \"input\":\n          return true;\n        case \"icon\":\n          return true;\n        case \"map\":\n          return true;\n        case \"media\":\n        case \"image\":\n          return true;\n        case \"layer\":\n          if (layer_type === \"heat_map\") {\n            return true;\n          } else if (layer_type === \"image_marker\") {\n            return true;\n          } else if (layer_type === \"compose\") {\n            return true;\n          } else if (layer_type === \"virtualization_layer\") {\n            return true;\n          }\n          return false;\n        case \"grainbin\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    /**\r\n     * Check if a widget structure is old or not,\r\n     * based on his type\r\n     */\n  }, {\n    key: \"isOldStructure\",\n    value: function isOldStructure(widget) {\n      var _widget$display, _widget$display2;\n      var _ref3 = widget || {},\n        type = _ref3.type;\n      var _ref4 = (widget === null || widget === void 0 ? void 0 : widget.display) || {},\n        gauge_type = _ref4.gauge_type,\n        chart_type = _ref4.chart_type,\n        input_type = _ref4.input_type,\n        layer_type = _ref4.layer_type,\n        type_media = _ref4.type_media;\n      switch (type) {\n        case \"pie\":\n          return (widget === null || widget === void 0 ? void 0 : (_widget$display = widget.display) === null || _widget$display === void 0 ? void 0 : _widget$display.pie_type) === \"circle\" ? (0, pie_1.isOldStructure)(widget) : (0, semidonut_1.isOldStructure)(widget);\n        case \"note\":\n          return (0, note_1.isOldStructure)(widget);\n        case \"cylinder\":\n          return (0, cylinder_1.isOldStructure)(widget);\n        case \"display\":\n          return (0, display_1.isOldStructure)(widget);\n        case \"table\":\n          return (widget === null || widget === void 0 ? void 0 : (_widget$display2 = widget.display) === null || _widget$display2 === void 0 ? void 0 : _widget$display2.table_type) === \"dynamic\" ? (0, dynamic_table_1.isOldStructure)(widget) : (0, statictable_1.isOldStructure)(widget);\n        case \"iframe\":\n          return (0, custom_1.isOldStructure)(widget);\n        case \"dial\":\n          return (0, dial_1.isOldStructure)(widget);\n        case \"gauge\":\n          if (gauge_type === \"angular\") {\n            return (0, angular_1.isOldStructure)(widget);\n          } else if (gauge_type === \"solid\") {\n            return (0, solid_1.isOldStructure)(widget);\n          } else if (gauge_type === \"clock\") {\n            return (0, clock_1.isOldStructure)(widget);\n          } else if (gauge_type === \"vu_meter\") {\n            return (0, vumeter_1.isOldStructure)(widget);\n          } else if (gauge_type === \"dial\") {\n            return (0, dial_1.isOldStructure)(widget);\n          }\n          return widget;\n        case \"chart\":\n          if (chart_type === \"spline\") {\n            return (0, linechart_1.isOldStructure)(widget);\n          } else if (chart_type === \"area\") {\n            return (0, areachart_1.isOldStructure)(widget);\n          } else if (chart_type === \"bar_horizontal\") {\n            return (0, horizontalbarchart_1.isOldStructure)(widget);\n          } else if (chart_type === \"bar_vertical\") {\n            return (0, verticalbarchart_1.isOldStructure)(widget);\n          } else if (chart_type === \"multiple_axis\") {\n            return (0, multipleaxischart_1.isOldStructure)(widget);\n          }\n          return widget;\n        case \"card\":\n          return (0, card_1.isOldStructure)(widget);\n        case \"tile\":\n          return (0, tile_1.isOldStructure)(widget);\n        case \"keypad\":\n          return (0, keypad_1.isOldStructure)(widget);\n        case \"incremental_button\":\n        case \"step_button\":\n          return (0, stepbutton_1.isOldStructure)(widget);\n        case \"push_button\":\n          return (0, pushbutton_1.isOldStructure)(widget);\n        case \"input\":\n          return input_type === \"form\" ? (0, inputform_1.isOldStructure)(widget) : (0, inputcontrol_1.isOldStructure)(widget);\n        case \"icon\":\n          return (0, icon_1.isOldStructure)(widget);\n        case \"map\":\n          return (0, map_1.isOldStructure)(widget);\n        case \"media\":\n        case \"image\":\n          if (type_media === \"static_video\") {\n            return (0, video_1.isOldStructure)(widget);\n          }\n          return (0, image_1.isOldStructure)(widget);\n        case \"layer\":\n          if (layer_type === \"heat_map\") {\n            return (0, heatmap_1.isOldStructure)(widget);\n          } else if (layer_type === \"image_marker\") {\n            return (0, imagemarker_1.isOldStructure)(widget);\n          } else if (layer_type === \"compose\") {\n            return (0, compose_1.isOldStructure)(widget);\n          } else if (layer_type === \"virtualization_layer\") {\n            return (0, compose_1.isOldStructure)(widget);\n          }\n          return widget;\n        case \"grainbin\":\n          return (0, grainbin_1.isOldStructure)(widget);\n        default:\n          return false;\n      }\n    }\n    /**\r\n     * Convert widget old structure to new one\r\n     */\n  }, {\n    key: \"convertWidget\",\n    value: function convertWidget(widget) {\n      var _widget$display3, _widget$display4;\n      var _ref5 = widget || {},\n        type = _ref5.type;\n      var _ref6 = (widget === null || widget === void 0 ? void 0 : widget.display) || {},\n        gauge_type = _ref6.gauge_type,\n        layer_type = _ref6.layer_type,\n        chart_type = _ref6.chart_type,\n        input_type = _ref6.input_type,\n        type_media = _ref6.type_media;\n      switch (type) {\n        case \"pie\":\n          return (widget === null || widget === void 0 ? void 0 : (_widget$display3 = widget.display) === null || _widget$display3 === void 0 ? void 0 : _widget$display3.pie_type) === \"circle\" ? (0, pie_1.convert)(widget) : (0, semidonut_1.convert)(widget);\n        case \"note\":\n          return (0, note_1.convert)(widget);\n        case \"cylinder\":\n          return (0, cylinder_1.convert)(widget);\n        case \"display\":\n          return (0, display_1.convert)(widget);\n        case \"table\":\n          return (widget === null || widget === void 0 ? void 0 : (_widget$display4 = widget.display) === null || _widget$display4 === void 0 ? void 0 : _widget$display4.table_type) === \"dynamic\" ? (0, dynamic_table_1.convert)(widget) : (0, statictable_1.convert)(widget);\n        case \"iframe\":\n          return (0, custom_1.convert)(widget);\n        case \"dial\":\n          return (0, dial_1.convert)(widget);\n        case \"gauge\":\n          if (gauge_type === \"angular\") {\n            return (0, angular_1.convert)(widget);\n          } else if (gauge_type === \"solid\") {\n            return (0, solid_1.convert)(widget);\n          } else if (gauge_type === \"clock\") {\n            return (0, clock_1.convert)(widget);\n          } else if (gauge_type === \"vu_meter\") {\n            return (0, vumeter_1.convert)(widget);\n          } else if (gauge_type === \"dial\") {\n            return (0, dial_1.convert)(widget);\n          }\n          return widget;\n        case \"chart\":\n          if (chart_type === \"spline\") {\n            return (0, linechart_1.convert)(widget);\n          } else if (chart_type === \"area\") {\n            return (0, areachart_1.convert)(widget);\n          } else if (chart_type === \"bar_horizontal\") {\n            return (0, horizontalbarchart_1.convert)(widget);\n          } else if (chart_type === \"bar_vertical\") {\n            return (0, verticalbarchart_1.convert)(widget);\n          } else if (chart_type === \"multiple_axis\") {\n            return (0, multipleaxischart_1.convert)(widget);\n          }\n          return widget;\n        case \"card\":\n          return (0, card_1.convert)(widget);\n        case \"tile\":\n          return (0, tile_1.convert)(widget);\n        case \"keypad\":\n          return (0, keypad_1.convert)(widget);\n        case \"incremental_button\":\n        case \"step_button\":\n          return (0, stepbutton_1.convert)(widget);\n        case \"push_button\":\n          return (0, pushbutton_1.convert)(widget);\n        case \"input\":\n          return input_type === \"form\" ? (0, inputform_1.convert)(widget) : (0, inputcontrol_1.convert)(widget);\n        case \"icon\":\n          return (0, icon_1.convert)(widget);\n        case \"map\":\n          return (0, map_1.convert)(widget);\n        case \"media\":\n        case \"image\":\n          if (type_media === \"static_video\") {\n            return (0, video_1.convert)(widget);\n          }\n          return (0, image_1.convert)(widget);\n        case \"layer\":\n          if (layer_type === \"heat_map\") {\n            return (0, heatmap_1.convert)(widget);\n          } else if (layer_type === \"image_marker\") {\n            return (0, imagemarker_1.convert)(widget);\n          } else if (layer_type === \"compose\") {\n            return (0, compose_1.convert)(widget);\n          } else if (layer_type === \"virtualization_layer\") {\n            return (0, compose_1.convert)(widget);\n          }\n          return widget;\n        case \"grainbin\":\n          return (0, grainbin_1.convert)(widget);\n        default:\n          return widget;\n      }\n    }\n  }]);\n  return Migration;\n}(TagoIOModule_1.default);\nexports.default = Migration;","map":{"version":3,"mappings":"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","names":["Migration","widget","widgetData","type","display","gauge_type","chart_type","layer_type","input_type","type_media","pie_type","table_type","TagoIOModule_1","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\Migration.ts"],"sourcesContent":["import { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport { convert as convertAngular, isOldStructure as isOldStructureAngular } from \"./angular\";\r\nimport { convert as convertAreaChart, isOldStructure as isOldStructureAreaChart } from \"./areachart\";\r\nimport { convert as convertCard, isOldStructure as isOldStructureCard } from \"./card\";\r\nimport { convert as convertClock, isOldStructure as isOldStructureClock } from \"./clock\";\r\nimport { convert as convertCompose, isOldStructure as isOldStructureCompose } from \"./compose\";\r\nimport { convert as convertCustom, isOldStructure as isOldStructureCustom } from \"./custom\";\r\nimport { convert as convertCylinder, isOldStructure as isOldStructureCylinder } from \"./cylinder\";\r\nimport { convert as convertDial, isOldStructure as isOldStructureDial } from \"./dial\";\r\nimport { convert as convertDisplay, isOldStructure as isOldStructureDisplay } from \"./display\";\r\nimport { convert as convertDynamicTable, isOldStructure as isOldStructureDynamicTable } from \"./dynamic_table\";\r\nimport { convert as convertGrainBin, isOldStructure as isOldStructureGrainBin } from \"./grainbin\";\r\nimport { convert as convertHeatMap, isOldStructure as isOldStructureHeatMap } from \"./heatmap\";\r\nimport {\r\n  convert as convertHorizontalBarChart,\r\n  isOldStructure as isOldStructureHorizontalBarChart,\r\n} from \"./horizontalbarchart\";\r\nimport { convert as convertIcon, isOldStructure as isOldStructureIcon } from \"./icon\";\r\nimport { convert as convertImage, isOldStructure as isOldStructureImage } from \"./image\";\r\nimport {\r\n  convert as convertImageMarker,\r\n  isOldStructure as isOldStructureImageMarker,\r\n  convertLayerData,\r\n} from \"./imagemarker\";\r\nimport { convert as convertInputControl, isOldStructure as isOldStructureInputControl } from \"./inputcontrol\";\r\nimport { convert as convertInputForm, isOldStructure as isOldStructureInputForm } from \"./inputform\";\r\nimport { convert as convertKeypad, isOldStructure as isOldStructureKeypad } from \"./keypad\";\r\nimport { convert as convertLineChart, isOldStructure as isOldStructureLineChart } from \"./linechart\";\r\nimport { convert as convertMap, isOldStructure as isOldStructureMap } from \"./map\";\r\nimport {\r\n  convert as convertMultipleAxisChart,\r\n  isOldStructure as isOldStructureMultipleAxisChart,\r\n} from \"./multipleaxischart\";\r\nimport { convert as convertNote, isOldStructure as isOldStructureNote } from \"./note\";\r\nimport { convert as convertPie, isOldStructure as isOldStructurePie } from \"./pie\";\r\nimport { convert as convertPushButton, isOldStructure as isOldStructurePushButton } from \"./pushbutton\";\r\nimport { convert as convertSemiDonut, isOldStructure as isOldStructureSemiDonut } from \"./semidonut\";\r\nimport { convert as convertSolid, isOldStructure as isOldStructureSolid } from \"./solid\";\r\nimport { convert as convertStaticTable, isOldStructure as isOldStructureStaticTable } from \"./statictable\";\r\nimport { convert as convertStepButton, isOldStructure as isOldStructureStepButton } from \"./stepbutton\";\r\nimport { convert as convertTile, isOldStructure as isOldStructureTile } from \"./tile\";\r\nimport {\r\n  convert as convertVerticalBarChart,\r\n  isOldStructure as isOldStructureVerticalBarChart,\r\n} from \"./verticalbarchart\";\r\nimport { convert as convertVideo, isOldStructure as isOldStructureVideo } from \"./video\";\r\nimport { convert as convertVuMeter, isOldStructure as isOldStructureVuMeter } from \"./vumeter\";\r\nimport TagoIOModule from \"../../common/TagoIOModule\";\r\n\r\nclass Migration extends TagoIOModule<any> {\r\n  public static convertImagerMarkerData(widget: any, widgetData: any) {\r\n    return convertLayerData(widget, widgetData);\r\n  }\r\n  /**\r\n   * Returns if the widget type is supported by migration\r\n   */\r\n  public static hasMigrate(widget: any): boolean {\r\n    const { type } = widget || {};\r\n    const { gauge_type, chart_type, layer_type } = widget?.display || {};\r\n\r\n    switch (type) {\r\n      case \"pie\":\r\n        return true;\r\n      case \"note\":\r\n        return true;\r\n      case \"cylinder\":\r\n        return true;\r\n      case \"display\":\r\n        return true;\r\n      case \"table\":\r\n        return true;\r\n      case \"iframe\":\r\n        return true;\r\n      case \"dial\":\r\n        return true;\r\n      case \"gauge\":\r\n        if (gauge_type === \"angular\") {\r\n          return true;\r\n        } else if (gauge_type === \"solid\") {\r\n          return true;\r\n        } else if (gauge_type === \"clock\") {\r\n          return true;\r\n        } else if (gauge_type === \"vu_meter\") {\r\n          return true;\r\n        } else if (gauge_type === \"dial\") {\r\n          return true;\r\n        }\r\n        return false;\r\n      case \"chart\":\r\n        if (chart_type === \"spline\") {\r\n          return true;\r\n        } else if (chart_type === \"area\") {\r\n          return true;\r\n        } else if (chart_type === \"bar_horizontal\") {\r\n          return true;\r\n        } else if (chart_type === \"bar_vertical\") {\r\n          return true;\r\n        } else if (chart_type === \"multiple_axis\") {\r\n          return true;\r\n        }\r\n        return false;\r\n      case \"card\":\r\n        return true;\r\n      case \"tile\":\r\n        return true;\r\n      case \"keypad\":\r\n        return true;\r\n      case \"incremental_button\":\r\n      case \"step_button\":\r\n        return true;\r\n      case \"push_button\":\r\n        return true;\r\n      case \"input\":\r\n        return true;\r\n      case \"icon\":\r\n        return true;\r\n      case \"map\":\r\n        return true;\r\n      case \"media\":\r\n      case \"image\":\r\n        return true;\r\n      case \"layer\":\r\n        if (layer_type === \"heat_map\") {\r\n          return true;\r\n        } else if (layer_type === \"image_marker\") {\r\n          return true;\r\n        } else if (layer_type === \"compose\") {\r\n          return true;\r\n        } else if (layer_type === \"virtualization_layer\") {\r\n          return true;\r\n        }\r\n        return false;\r\n      case \"grainbin\":\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a widget structure is old or not,\r\n   * based on his type\r\n   */\r\n  public static isOldStructure(widget: any): boolean {\r\n    const { type } = widget || {};\r\n    const { gauge_type, chart_type, input_type, layer_type, type_media } = widget?.display || {};\r\n\r\n    switch (type) {\r\n      case \"pie\":\r\n        return widget?.display?.pie_type === \"circle\" ? isOldStructurePie(widget) : isOldStructureSemiDonut(widget);\r\n      case \"note\":\r\n        return isOldStructureNote(widget);\r\n      case \"cylinder\":\r\n        return isOldStructureCylinder(widget);\r\n      case \"display\":\r\n        return isOldStructureDisplay(widget);\r\n      case \"table\":\r\n        return widget?.display?.table_type === \"dynamic\"\r\n          ? isOldStructureDynamicTable(widget)\r\n          : isOldStructureStaticTable(widget);\r\n      case \"iframe\":\r\n        return isOldStructureCustom(widget);\r\n      case \"dial\":\r\n        return isOldStructureDial(widget);\r\n      case \"gauge\":\r\n        if (gauge_type === \"angular\") {\r\n          return isOldStructureAngular(widget);\r\n        } else if (gauge_type === \"solid\") {\r\n          return isOldStructureSolid(widget);\r\n        } else if (gauge_type === \"clock\") {\r\n          return isOldStructureClock(widget);\r\n        } else if (gauge_type === \"vu_meter\") {\r\n          return isOldStructureVuMeter(widget);\r\n        } else if (gauge_type === \"dial\") {\r\n          return isOldStructureDial(widget);\r\n        }\r\n        return widget;\r\n      case \"chart\":\r\n        if (chart_type === \"spline\") {\r\n          return isOldStructureLineChart(widget);\r\n        } else if (chart_type === \"area\") {\r\n          return isOldStructureAreaChart(widget);\r\n        } else if (chart_type === \"bar_horizontal\") {\r\n          return isOldStructureHorizontalBarChart(widget);\r\n        } else if (chart_type === \"bar_vertical\") {\r\n          return isOldStructureVerticalBarChart(widget);\r\n        } else if (chart_type === \"multiple_axis\") {\r\n          return isOldStructureMultipleAxisChart(widget);\r\n        }\r\n        return widget;\r\n      case \"card\":\r\n        return isOldStructureCard(widget);\r\n      case \"tile\":\r\n        return isOldStructureTile(widget);\r\n      case \"keypad\":\r\n        return isOldStructureKeypad(widget);\r\n      case \"incremental_button\":\r\n      case \"step_button\":\r\n        return isOldStructureStepButton(widget);\r\n      case \"push_button\":\r\n        return isOldStructurePushButton(widget);\r\n      case \"input\":\r\n        return input_type === \"form\" ? isOldStructureInputForm(widget) : isOldStructureInputControl(widget);\r\n      case \"icon\":\r\n        return isOldStructureIcon(widget);\r\n      case \"map\":\r\n        return isOldStructureMap(widget);\r\n      case \"media\":\r\n      case \"image\":\r\n        if (type_media === \"static_video\") {\r\n          return isOldStructureVideo(widget);\r\n        }\r\n        return isOldStructureImage(widget);\r\n      case \"layer\":\r\n        if (layer_type === \"heat_map\") {\r\n          return isOldStructureHeatMap(widget);\r\n        } else if (layer_type === \"image_marker\") {\r\n          return isOldStructureImageMarker(widget);\r\n        } else if (layer_type === \"compose\") {\r\n          return isOldStructureCompose(widget);\r\n        } else if (layer_type === \"virtualization_layer\") {\r\n          return isOldStructureCompose(widget);\r\n        }\r\n        return widget;\r\n      case \"grainbin\":\r\n        return isOldStructureGrainBin(widget);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert widget old structure to new one\r\n   */\r\n  public static convertWidget(widget: any): WidgetInfo {\r\n    const { type } = widget || {};\r\n    const { gauge_type, layer_type, chart_type, input_type, type_media } = widget?.display || {};\r\n\r\n    switch (type) {\r\n      case \"pie\":\r\n        return widget?.display?.pie_type === \"circle\" ? convertPie(widget) : convertSemiDonut(widget);\r\n      case \"note\":\r\n        return convertNote(widget);\r\n      case \"cylinder\":\r\n        return convertCylinder(widget);\r\n      case \"display\":\r\n        return convertDisplay(widget);\r\n      case \"table\":\r\n        return widget?.display?.table_type === \"dynamic\" ? convertDynamicTable(widget) : convertStaticTable(widget);\r\n      case \"iframe\":\r\n        return convertCustom(widget);\r\n      case \"dial\":\r\n        return convertDial(widget);\r\n      case \"gauge\":\r\n        if (gauge_type === \"angular\") {\r\n          return convertAngular(widget);\r\n        } else if (gauge_type === \"solid\") {\r\n          return convertSolid(widget);\r\n        } else if (gauge_type === \"clock\") {\r\n          return convertClock(widget);\r\n        } else if (gauge_type === \"vu_meter\") {\r\n          return convertVuMeter(widget);\r\n        } else if (gauge_type === \"dial\") {\r\n          return convertDial(widget);\r\n        }\r\n        return widget;\r\n      case \"chart\":\r\n        if (chart_type === \"spline\") {\r\n          return convertLineChart(widget);\r\n        } else if (chart_type === \"area\") {\r\n          return convertAreaChart(widget);\r\n        } else if (chart_type === \"bar_horizontal\") {\r\n          return convertHorizontalBarChart(widget);\r\n        } else if (chart_type === \"bar_vertical\") {\r\n          return convertVerticalBarChart(widget);\r\n        } else if (chart_type === \"multiple_axis\") {\r\n          return convertMultipleAxisChart(widget);\r\n        }\r\n        return widget;\r\n      case \"card\":\r\n        return convertCard(widget);\r\n      case \"tile\":\r\n        return convertTile(widget);\r\n      case \"keypad\":\r\n        return convertKeypad(widget);\r\n      case \"incremental_button\":\r\n      case \"step_button\":\r\n        return convertStepButton(widget);\r\n      case \"push_button\":\r\n        return convertPushButton(widget);\r\n      case \"input\":\r\n        return input_type === \"form\" ? convertInputForm(widget) : convertInputControl(widget);\r\n      case \"icon\":\r\n        return convertIcon(widget);\r\n      case \"map\":\r\n        return convertMap(widget);\r\n      case \"media\":\r\n      case \"image\":\r\n        if (type_media === \"static_video\") {\r\n          return convertVideo(widget);\r\n        }\r\n        return convertImage(widget);\r\n      case \"layer\":\r\n        if (layer_type === \"heat_map\") {\r\n          return convertHeatMap(widget);\r\n        } else if (layer_type === \"image_marker\") {\r\n          return convertImageMarker(widget);\r\n        } else if (layer_type === \"compose\") {\r\n          return convertCompose(widget);\r\n        } else if (layer_type === \"virtualization_layer\") {\r\n          return convertCompose(widget);\r\n        }\r\n        return widget;\r\n      case \"grainbin\":\r\n        return convertGrainBin(widget);\r\n      default:\r\n        return widget;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Migration;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}