{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Notifications = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Notifications, _TagoIOModule_1$defau);\n  var _super = _createSuper(Notifications);\n  function Notifications() {\n    _classCallCheck(this, Notifications);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Notifications, [{\n    key: \"list\",\n    value:\n    /**\n     * Retrieves a list with all actions from the account\n     * @param queryObj Search query params\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/notification/\",\n                  method: \"GET\",\n                  params: queryObj\n                });\n              case 2:\n                result = _context.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\"]);\n                });\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list(_x) {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Mark notifications as read\n     * @param notificationIDS An array of ids or a single id\n     */\n  }, {\n    key: \"markAsRead\",\n    value: function () {\n      var _markAsRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(notificationIDS) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!Array.isArray(notificationIDS)) {\n                  notificationIDS = [notificationIDS];\n                }\n                _context2.next = 3;\n                return this.doRequest({\n                  path: \"/notification/read\",\n                  method: \"PUT\",\n                  body: {\n                    notification_ids: notificationIDS,\n                    read: true\n                  }\n                });\n              case 3:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function markAsRead(_x2) {\n        return _markAsRead.apply(this, arguments);\n      }\n      return markAsRead;\n    }()\n    /**\n     * Mark notifications as unread\n     * @param notificationIDS An array of ids or a single id\n     */\n  }, {\n    key: \"markAsUnread\",\n    value: function () {\n      var _markAsUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(notificationIDS) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!Array.isArray(notificationIDS)) {\n                  notificationIDS = [notificationIDS];\n                }\n                _context3.next = 3;\n                return this.doRequest({\n                  path: \"/notification/read\",\n                  method: \"PUT\",\n                  body: {\n                    notification_ids: notificationIDS,\n                    read: false\n                  }\n                });\n              case 3:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function markAsUnread(_x3) {\n        return _markAsUnread.apply(this, arguments);\n      }\n      return markAsUnread;\n    }()\n    /**\n     * Mark all notifications as read\n     */\n  }, {\n    key: \"markAllAsRead\",\n    value: function () {\n      var _markAllAsRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/notification/markallread\",\n                  method: \"PUT\"\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function markAllAsRead() {\n        return _markAllAsRead.apply(this, arguments);\n      }\n      return markAllAsRead;\n    }()\n    /**\n     * Acknowledge notification button pressed\n     * @param notificationID ID of the notification\n     * @param buttonID ID of the button\n     */\n  }, {\n    key: \"notificationButton\",\n    value: function () {\n      var _notificationButton = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(notificationID, buttonID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/notification/\".concat(notificationID, \"/\").concat(buttonID),\n                  method: \"PUT\"\n                });\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function notificationButton(_x4, _x5) {\n        return _notificationButton.apply(this, arguments);\n      }\n      return notificationButton;\n    }()\n    /**\n     * Create a notification\n     * @param notificationData Notification Object\n     * @example\n     * ```json\n     * notificationData: [\n     *   {\n     *     title: \"My notification title\",\n     *     message: \"My notification message\"\n     *   }\n     * ]\n     * ```\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(notificationData) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/notification\",\n                  method: \"POST\",\n                  body: _objectSpread({}, notificationData)\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function create(_x6) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Remove a notification\n     * @param notificationID Notification identification\n     */\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(notificationID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/notification/\".concat(notificationID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function remove(_x7) {\n        return _remove.apply(this, arguments);\n      }\n      return remove;\n    }()\n    /**\n     * Register device Token on Push Notification Service\n     * @param deviceToken Device token\n     * @param platform Platform of device\n     */\n  }, {\n    key: \"registerDevice\",\n    value: function () {\n      var _registerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(deviceToken, platform) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/notification/push/register\",\n                  method: \"POST\",\n                  body: {\n                    device_token: deviceToken,\n                    platform: platform\n                  }\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function registerDevice(_x8, _x9) {\n        return _registerDevice.apply(this, arguments);\n      }\n      return registerDevice;\n    }()\n    /**\n     * Unregister device Token on Push Notification Service\n     * @param deviceToken Device token\n     */\n  }, {\n    key: \"unRegisterDevice\",\n    value: function () {\n      var _unRegisterDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(deviceToken) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/notification/push/unregister\",\n                  method: \"POST\",\n                  body: {\n                    device_token: deviceToken\n                  }\n                });\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function unRegisterDevice(_x10) {\n        return _unRegisterDevice.apply(this, arguments);\n      }\n      return unRegisterDevice;\n    }()\n  }]);\n  return Notifications;\n}(TagoIOModule_1.default);\nexports.default = Notifications;","map":{"version":3,"mappings":"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","names":["Notifications","queryObj","doRequest","path","method","params","result","map","data","notificationIDS","Array","isArray","body","notification_ids","read","notificationID","buttonID","notificationData","deviceToken","platform","device_token","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Notifications.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { NotificationCreate, NotificationInfo, NotificationQuery } from \"./notifications.types\";\n\nclass Notifications extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Retrieves a list with all actions from the account\n   * @param queryObj Search query params\n   */\n  public async list(queryObj?: NotificationQuery): Promise<NotificationInfo[]> {\n    let result = await this.doRequest<NotificationInfo[]>({\n      path: \"/notification/\",\n      method: \"GET\",\n      params: queryObj,\n    });\n\n    result = result.map((data) => dateParser(data, [\"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Mark notifications as read\n   * @param notificationIDS An array of ids or a single id\n   */\n  public async markAsRead(notificationIDS: GenericID[] | GenericID): Promise<string> {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: true,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark notifications as unread\n   * @param notificationIDS An array of ids or a single id\n   */\n  public async markAsUnread(notificationIDS: GenericID[] | GenericID): Promise<string> {\n    if (!Array.isArray(notificationIDS)) {\n      notificationIDS = [notificationIDS];\n    }\n\n    const result = await this.doRequest<string>({\n      path: \"/notification/read\",\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDS,\n        read: false,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark all notifications as read\n   */\n  public async markAllAsRead(): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: \"/notification/markallread\",\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Acknowledge notification button pressed\n   * @param notificationID ID of the notification\n   * @param buttonID ID of the button\n   */\n  public async notificationButton(notificationID: GenericID, buttonID: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a notification\n   * @param notificationData Notification Object\n   * @example\n   * ```json\n   * notificationData: [\n   *   {\n   *     title: \"My notification title\",\n   *     message: \"My notification message\"\n   *   }\n   * ]\n   * ```\n   */\n  public async create(notificationData: NotificationCreate): Promise<{ id: GenericID }> {\n    const result = await this.doRequest<{ id: GenericID }>({\n      path: `/notification`,\n      method: \"POST\",\n      body: { ...notificationData },\n    });\n\n    return result;\n  }\n\n  /**\n   * Remove a notification\n   * @param notificationID Notification identification\n   */\n  public async remove(notificationID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/${notificationID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Register device Token on Push Notification Service\n   * @param deviceToken Device token\n   * @param platform Platform of device\n   */\n  public async registerDevice(deviceToken: GenericToken, platform: \"ios\" | \"android\"): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/push/register`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken,\n        platform,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Unregister device Token on Push Notification Service\n   * @param deviceToken Device token\n   */\n  public async unRegisterDevice(deviceToken: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/notification/push/unregister`,\n      method: \"POST\",\n      body: {\n        device_token: deviceToken,\n      },\n    });\n\n    return result;\n  }\n}\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}