{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar SDB_1 = __importDefault(require(\"./SDB\"));\nvar RunUser = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(RunUser, _TagoIOModule_1$defau);\n  var _super = _createSuper(RunUser);\n  function RunUser() {\n    var _this;\n    _classCallCheck(this, RunUser);\n    _this = _super.apply(this, arguments);\n    _this.SDB = new SDB_1.default(_this.params);\n    return _this;\n  }\n  /**\n   * Get Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  _createClass(RunUser, [{\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tagoIORunURL) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/info\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context.sent;\n                result = (0, dateParser_1.default)(result, [\"created_at\"]);\n                return _context.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function info(_x) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Create new TagoIO Run User (Anonymous)\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param newUserObj New user data\n     * @param region TagoIO Region Server [default usa-1]\n     */\n  }, {\n    key: \"edit\",\n    value:\n    /**\n     * Edit Run user info\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param userChangesObj Data to change in user\n     */\n    function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tagoIORunURL, userChangesObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/info\"),\n                  method: \"PUT\",\n                  body: userChangesObj\n                });\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function edit(_x2, _x3) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Delete Run user info\n     * @param tagoIORunURL TagoIO Run url without http\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tagoIORunURL) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/delete\"),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _delete(_x4) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * Login at TagoIO Run as user (Anonymous)\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param credentialsObj Run user credentials\n     * @param region TagoIO Region Server [default usa-1]\n     */\n  }, {\n    key: \"passwordChange\",\n    value:\n    /**\n     * Change password using token of the password recover.\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param password New password\n     */\n    function () {\n      var _passwordChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tagoIORunURL, password) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/passwordreset\"),\n                  method: \"POST\",\n                  body: {\n                    password: password\n                  }\n                });\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function passwordChange(_x5, _x6) {\n        return _passwordChange.apply(this, arguments);\n      }\n      return passwordChange;\n    }()\n    /**\n     * List notifications.\n     * @param tagoIORunURL TagoIO Run url without http\n     */\n  }, {\n    key: \"notificationList\",\n    value: function () {\n      var _notificationList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tagoIORunURL, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification\"),\n                  method: \"GET\",\n                  params: queryObj\n                });\n              case 2:\n                result = _context5.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"created_at\"]);\n                });\n                return _context5.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function notificationList(_x7, _x8) {\n        return _notificationList.apply(this, arguments);\n      }\n      return notificationList;\n    }()\n    /**\n     * Mark notification as read\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param notificationIDs array of notification ids or a single id\n     */\n  }, {\n    key: \"notificationMarkRead\",\n    value: function () {\n      var _notificationMarkRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(tagoIORunURL, notificationIDs) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!Array.isArray(notificationIDs)) {\n                  notificationIDs = [notificationIDs];\n                }\n                _context6.next = 3;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification\"),\n                  method: \"PUT\",\n                  body: {\n                    notification_ids: notificationIDs,\n                    read: true\n                  }\n                });\n              case 3:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function notificationMarkRead(_x9, _x10) {\n        return _notificationMarkRead.apply(this, arguments);\n      }\n      return notificationMarkRead;\n    }()\n    /**\n     * Mark notification as unread\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param notificationIDs array of notification ids or a single id\n     */\n  }, {\n    key: \"notificationMarkUnread\",\n    value: function () {\n      var _notificationMarkUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(tagoIORunURL, notificationIDs) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!Array.isArray(notificationIDs)) {\n                  notificationIDs = [notificationIDs];\n                }\n                _context7.next = 3;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification\"),\n                  method: \"PUT\",\n                  body: {\n                    notification_ids: notificationIDs,\n                    read: false\n                  }\n                });\n              case 3:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function notificationMarkUnread(_x11, _x12) {\n        return _notificationMarkUnread.apply(this, arguments);\n      }\n      return notificationMarkUnread;\n    }()\n    /**\n     * Mark all notifications as read\n     * @param tagoIORunURL TagoIO Run url without http\n     */\n  }, {\n    key: \"notificationMarkAllRead\",\n    value: function () {\n      var _notificationMarkAllRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tagoIORunURL) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification/markallread\"),\n                  method: \"PUT\"\n                });\n              case 2:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function notificationMarkAllRead(_x13) {\n        return _notificationMarkAllRead.apply(this, arguments);\n      }\n      return notificationMarkAllRead;\n    }()\n    /**\n     * Trigger notification button\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param notificationID TagoIO Run notification id\n     * @param buttonID Notification button id\n     */\n  }, {\n    key: \"notificationButton\",\n    value: function () {\n      var _notificationButton = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(tagoIORunURL, notificationID, buttonID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification/\").concat(notificationID, \"/\").concat(buttonID),\n                  method: \"PUT\"\n                });\n              case 2:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function notificationButton(_x14, _x15, _x16) {\n        return _notificationButton.apply(this, arguments);\n      }\n      return notificationButton;\n    }()\n    /**\n     * Delete notification\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param notificationID TagoIO Run notification id\n     */\n  }, {\n    key: \"notificationDelete\",\n    value: function () {\n      var _notificationDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(tagoIORunURL, notificationID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/notification/\").concat(notificationID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function notificationDelete(_x17, _x18) {\n        return _notificationDelete.apply(this, arguments);\n      }\n      return notificationDelete;\n    }()\n    /**\n     * Request the PIN Code for a given OTP Type.\n     * @param credentials Credentials\n     * @param typeOTP authenticator, sms or email\n     */\n  }, {\n    key: \"enableOTP\",\n    value:\n    /**\n     * Enable OTP for a given OTP Type.\n     * You will be requested to confirm the operation with a pin code.\n     * @param credentials Credentials\n     * @param typeOTP authenticator, sms or email\n     */\n    function () {\n      var _enableOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(tagoIORunURL, credentials, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/otp/\").concat(typeOTP, \"/enable\"),\n                  method: \"POST\",\n                  body: credentials\n                });\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function enableOTP(_x19, _x20, _x21) {\n        return _enableOTP.apply(this, arguments);\n      }\n      return enableOTP;\n    }()\n    /**\n     * Enable OTP for a given OTP Type\n     * @param credentials Credentials\n     * @param typeOTP authenticator, sms or email\n     */\n  }, {\n    key: \"disableOTP\",\n    value: function () {\n      var _disableOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(tagoIORunURL, credentials, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/otp/\").concat(typeOTP, \"/disable\"),\n                  method: \"POST\",\n                  body: credentials\n                });\n              case 2:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function disableOTP(_x22, _x23, _x24) {\n        return _disableOTP.apply(this, arguments);\n      }\n      return disableOTP;\n    }()\n    /**\n     * Confirm OTP enabling process for a given OTP Type\n     * @param credentials Credentials\n     * @param typeOTP authenticator, sms or email\n     */\n  }, {\n    key: \"confirmOTP\",\n    value: function () {\n      var _confirmOTP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(tagoIORunURL, pinCode, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.doRequest({\n                  path: \"/run/\".concat(tagoIORunURL, \"/otp/\").concat(typeOTP, \"/confirm\"),\n                  method: \"POST\",\n                  body: {\n                    pin_code: pinCode\n                  }\n                });\n              case 2:\n                result = _context13.sent;\n                return _context13.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function confirmOTP(_x25, _x26, _x27) {\n        return _confirmOTP.apply(this, arguments);\n      }\n      return confirmOTP;\n    }()\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(tagoIORunURL, newUserObj, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                params = {\n                  path: \"/run/\".concat(tagoIORunURL, \"/signup\"),\n                  method: \"POST\",\n                  body: newUserObj\n                };\n                _context14.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context14.sent;\n                return _context14.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n      function create(_x28, _x29, _x30) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(tagoIORunURL, credentialsObj, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                params = {\n                  path: \"/run/\".concat(tagoIORunURL, \"/login\"),\n                  method: \"POST\",\n                  body: credentialsObj\n                };\n                _context15.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context15.sent;\n                result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n                return _context15.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n      function login(_x31, _x32, _x33) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Confirm User on TagoIO Run (Anonymous)\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param token TagoIO Run user token\n     * @param region TagoIO Region Server [default usa-1]\n     */\n  }, {\n    key: \"confirmUser\",\n    value: function () {\n      var _confirmUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(tagoIORunURL, token, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                params = {\n                  path: \"/run/\".concat(tagoIORunURL, \"/confirm/\").concat(token),\n                  method: \"GET\"\n                };\n                _context16.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context16.sent;\n                return _context16.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n      function confirmUser(_x34, _x35, _x36) {\n        return _confirmUser.apply(this, arguments);\n      }\n      return confirmUser;\n    }()\n    /**\n     * Sends a password recover e-mail\n     * @param tagoIORunURL TagoIO Run url without http\n     * @param email Run user email to recover the password\n     * @param region TagoIO Region Server [default usa-1]\n     */\n  }, {\n    key: \"passwordRecover\",\n    value: function () {\n      var _passwordRecover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(tagoIORunURL, email, region) {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                params = {\n                  path: \"/run/\".concat(tagoIORunURL, \"/passwordreset/\").concat(email),\n                  method: \"GET\"\n                };\n                _context17.next = 3;\n                return TagoIOModule_1.default.doRequestAnonymous(params, region);\n              case 3:\n                result = _context17.sent;\n                return _context17.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n      function passwordRecover(_x37, _x38, _x39) {\n        return _passwordRecover.apply(this, arguments);\n      }\n      return passwordRecover;\n    }()\n  }, {\n    key: \"requestLoginPINCode\",\n    value: function () {\n      var _requestLoginPINCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(tagoIORunURL, credentials, typeOTP) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.doRequestAnonymous({\n                  path: \"/run/\".concat(tagoIORunURL, \"/login/otp\"),\n                  method: \"POST\",\n                  body: _objectSpread(_objectSpread({}, credentials), {}, {\n                    otp_type: typeOTP\n                  })\n                });\n              case 2:\n                result = _context18.sent;\n                return _context18.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function requestLoginPINCode(_x40, _x41, _x42) {\n        return _requestLoginPINCode.apply(this, arguments);\n      }\n      return requestLoginPINCode;\n    }()\n  }]);\n  return RunUser;\n}(TagoIOModule_1.default);\nexports.default = RunUser;","map":{"version":3,"mappings":"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","names":["RunUser","SDB_1","params","tagoIORunURL","doRequest","path","method","result","userChangesObj","body","password","queryObj","map","data","notificationIDs","Array","isArray","notification_ids","read","notificationID","buttonID","credentials","typeOTP","pinCode","pin_code","newUserObj","region","TagoIOModule_1","doRequestAnonymous","credentialsObj","token","email","otp_type","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\RunUser\\RunUser.ts"],"sourcesContent":["import { GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { doRequestParams, GenericModuleParams } from \"../../common/TagoIOModule\";\nimport { Regions } from \"../../regions\";\nimport { NotificationInfo, NotificationQuery } from \"../Account/notifications.types\";\nimport { OTPType } from \"../Account/account.types\";\nimport dateParser from \"../Utils/dateParser\";\nimport {\n  RunNotificationInfo,\n  RunUserCreateInfo,\n  RunUserCreate,\n  RunUserInfo,\n  RunUserLogin,\n  RunUserLoginResponse,\n  RunUserCredentials,\n} from \"./runUser.types\";\nimport SDB from \"./SDB\";\n\nclass RunUser extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Get Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async info(tagoIORunURL: string): Promise<RunUserInfo> {\n    let result = await this.doRequest<RunUserInfo>({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Create new TagoIO Run User (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param newUserObj New user data\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async create(\n    tagoIORunURL: string,\n    newUserObj: RunUserCreateInfo,\n    region?: Regions\n  ): Promise<RunUserCreate> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/signup`,\n      method: \"POST\",\n      body: newUserObj,\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<RunUserCreate>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Edit Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param userChangesObj Data to change in user\n   */\n  public async edit(tagoIORunURL: string, userChangesObj: Partial<RunUserInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/info`,\n      method: \"PUT\",\n      body: userChangesObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete Run user info\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async delete(tagoIORunURL: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/delete`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Login at TagoIO Run as user (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param credentialsObj Run user credentials\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async login(\n    tagoIORunURL: string,\n    credentialsObj: RunUserLogin,\n    region?: Regions\n  ): Promise<RunUserLoginResponse> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/login`,\n      method: \"POST\",\n      body: credentialsObj,\n    };\n\n    let result = await TagoIOModule.doRequestAnonymous<RunUserLoginResponse>(params, region);\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Confirm User on TagoIO Run (Anonymous)\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param token TagoIO Run user token\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async confirmUser(tagoIORunURL: string, token: GenericToken, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/confirm/${token}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Sends a password recover e-mail\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param email Run user email to recover the password\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async passwordRecover(tagoIORunURL: string, email: string, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/run/${tagoIORunURL}/passwordreset/${email}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Change password using token of the password recover.\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param password New password\n   */\n  public async passwordChange(tagoIORunURL: string, password: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/passwordreset`,\n      method: \"POST\",\n      body: {\n        password,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * List notifications.\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async notificationList(tagoIORunURL: string, queryObj?: NotificationQuery): Promise<NotificationInfo[]> {\n    let result = await this.doRequest<NotificationInfo[]>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"GET\",\n      params: queryObj,\n    });\n    result = result.map((data) => dateParser(data, [\"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Mark notification as read\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  public async notificationMarkRead(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string> {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: true,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark notification as unread\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationIDs array of notification ids or a single id\n   */\n  public async notificationMarkUnread(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string> {\n    if (!Array.isArray(notificationIDs)) {\n      notificationIDs = [notificationIDs];\n    }\n\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification`,\n      method: \"PUT\",\n      body: {\n        notification_ids: notificationIDs,\n        read: false,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Mark all notifications as read\n   * @param tagoIORunURL TagoIO Run url without http\n   */\n  public async notificationMarkAllRead(tagoIORunURL: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification/markallread`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n  /**\n   * Trigger notification button\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   * @param buttonID Notification button id\n   */\n  public async notificationButton(tagoIORunURL: string, notificationID: GenericID, buttonID: GenericID): Promise<any> {\n    const result = await this.doRequest<any>({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}/${buttonID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete notification\n   * @param tagoIORunURL TagoIO Run url without http\n   * @param notificationID TagoIO Run notification id\n   */\n  public async notificationDelete(tagoIORunURL: string, notificationID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/notification/${notificationID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Request the PIN Code for a given OTP Type.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public static async requestLoginPINCode(\n    tagoIORunURL: string,\n    credentials: RunUserCredentials,\n    typeOTP: OTPType\n  ): Promise<string> {\n    const result = await this.doRequestAnonymous<string>({\n      path: `/run/${tagoIORunURL}/login/otp`,\n      method: \"POST\",\n      body: { ...credentials, otp_type: typeOTP },\n    });\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type.\n   * You will be requested to confirm the operation with a pin code.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async enableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/enable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async disableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/disable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Confirm OTP enabling process for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async confirmOTP(tagoIORunURL: string, pinCode: string, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/run/${tagoIORunURL}/otp/${typeOTP}/confirm`,\n      method: \"POST\",\n      body: {\n        pin_code: pinCode,\n      },\n    });\n\n    return result;\n  }\n\n  public SDB = new SDB(this.params);\n}\n\nexport default RunUser;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}