{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nclass Widgets extends TagoIOModule_1.default {\n  /**\n   * Create a Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetObj\n   */\n  async create(dashboardID, widgetObj) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/widget/`,\n      method: \"POST\",\n      body: widgetObj\n    });\n    return result;\n  }\n  /**\n   * Edit the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   */\n  async edit(dashboardID, widgetID, data) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"PUT\",\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Delete the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  async delete(dashboardID, widgetID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Get Info of the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  async info(dashboardID, widgetID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"GET\"\n    });\n    return result;\n  }\n  /**\n   * Get all data or resource list for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param overwrite It can overwrite 'start_date', 'end_date', 'timezone' fields\n   */\n  async getData(dashboardID, widgetID, params) {\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"GET\",\n      params\n    });\n    return result;\n  }\n  /**\n   * Send value of variable for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   * @param bypassBucket\n   */\n  async sendData(dashboardID, widgetID, data) {\n    let bypassBucket = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"POST\",\n      params: {\n        bypass_bucket: bypassBucket\n      },\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Update value of variable for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   * @param bypassBucket\n   */\n  async editData(dashboardID, widgetID, data) {\n    let bypassBucket = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}/data`,\n      method: \"PUT\",\n      params: {\n        bypass_bucket: bypassBucket\n      },\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Update value of a resource for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param resourceData Updated data for the resource\n   * @param options Additional options\n   */\n  async editResource(dashboardID, widgetID, resourceData, options) {\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}/resource`,\n      method: \"PUT\",\n      params: {\n        widget_exec: options?.identifier\n      },\n      body: resourceData\n    });\n    return result;\n  }\n  /**\n   * Run analysis without inserting data to bucket\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   */\n  async runAnalysis(dashboardID, widgetID, data) {\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}/run`,\n      method: \"POST\",\n      body: data\n    });\n    return result;\n  }\n  /**\n   * Delete data by it's id, bucket and variable must be associeted with the widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param ids\n   */\n  async deleteData(dashboardID, widgetID, ids) {\n    const result = await this.doRequest({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"DELETE\",\n      params: {\n        ids\n      }\n    });\n    return result;\n  }\n  /**\n   * Generate a new token for the embed widgets\n   * It can regenerate the token if call it multi-times\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  async tokenGenerate(dashboardID, widgetID) {\n    const result = await this.doRequest({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}/token`,\n      method: \"GET\"\n    });\n    return result;\n  }\n}\nexports.default = Widgets;","map":{"version":3,"mappings":"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","names":["Widgets","TagoIOModule_1","create","dashboardID","widgetObj","result","doRequest","path","method","body","edit","widgetID","data","delete","info","getData","params","sendData","bypassBucket","bypass_bucket","editData","editResource","resourceData","options","widget_exec","identifier","runAnalysis","deleteData","ids","tokenGenerate","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Dashboard.Widgets.ts"],"sourcesContent":["import { Data, GenericID, GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport {\n  EditDataModel,\n  EditDeviceResource,\n  EditResourceOptions,\n  GetDataModel,\n  PostDataModel,\n  WidgetInfo,\n} from \"./dashboards.types\";\n\nclass Widgets extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Create a Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetObj\n   */\n  public async create(dashboardID: GenericID, widgetObj: WidgetInfo): Promise<{ widget: GenericID }> {\n    const result = await this.doRequest<any>({\n      path: `/dashboard/${dashboardID}/widget/`,\n      method: \"POST\",\n      body: widgetObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Edit the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   */\n  public async edit(dashboardID: GenericID, widgetID: GenericID, data: Partial<WidgetInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"PUT\",\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  public async delete(dashboardID: GenericID, widgetID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Info of the Dashboard Widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  public async info(dashboardID: GenericID, widgetID: GenericID): Promise<WidgetInfo> {\n    const result = await this.doRequest<WidgetInfo>({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all data or resource list for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param overwrite It can overwrite 'start_date', 'end_date', 'timezone' fields\n   */\n  public async getData(dashboardID: GenericID, widgetID: GenericID, params?: GetDataModel): Promise<object> {\n    const result = await this.doRequest<object>({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"GET\",\n      params,\n    });\n\n    return result;\n  }\n\n  /**\n   * Send value of variable for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   * @param bypassBucket\n   */\n  public async sendData(\n    dashboardID: GenericID,\n    widgetID: GenericID,\n    data: PostDataModel | PostDataModel[],\n    bypassBucket: boolean = false\n  ): Promise<object> {\n    const result = await this.doRequest<object>({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"POST\",\n      params: {\n        bypass_bucket: bypassBucket,\n      },\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Update value of variable for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   * @param bypassBucket\n   */\n  public async editData(\n    dashboardID: GenericID,\n    widgetID: GenericID,\n    data: EditDataModel | EditDataModel[],\n    bypassBucket: boolean = false\n  ): Promise<object> {\n    const result = await this.doRequest<object>({\n      path: `/data/${dashboardID}/${widgetID}/data`,\n      method: \"PUT\",\n      params: {\n        bypass_bucket: bypassBucket,\n      },\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Update value of a resource for the current widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param resourceData Updated data for the resource\n   * @param options Additional options\n   */\n  public async editResource(\n    dashboardID: GenericID,\n    widgetID: GenericID,\n    resourceData: EditDeviceResource | EditDeviceResource[],\n    options?: EditResourceOptions\n  ): Promise<object> {\n    const result = await this.doRequest<object>({\n      path: `/data/${dashboardID}/${widgetID}/resource`,\n      method: \"PUT\",\n      params: {\n        widget_exec: options?.identifier,\n      },\n      body: resourceData,\n    });\n\n    return result;\n  }\n\n  /**\n   * Run analysis without inserting data to bucket\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param data\n   */\n  public async runAnalysis(dashboardID: GenericID, widgetID: GenericID, data: [object | Data]): Promise<object> {\n    const result = await this.doRequest<object>({\n      path: `/data/${dashboardID}/${widgetID}/run`,\n      method: \"POST\",\n      body: data,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete data by it's id, bucket and variable must be associeted with the widget\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   * @param ids\n   */\n  public async deleteData(dashboardID: GenericID, widgetID: GenericID, ids: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/data/${dashboardID}/${widgetID}`,\n      method: \"DELETE\",\n      params: {\n        ids,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Generate a new token for the embed widgets\n   * It can regenerate the token if call it multi-times\n   * @param dashboardID Dashboard identification\n   * @param widgetID Widget identification\n   */\n  public async tokenGenerate(dashboardID: GenericID, widgetID: GenericID): Promise<{ widget_token: GenericToken }> {\n    const result = await this.doRequest<{ widget_token: GenericToken }>({\n      path: `/dashboard/${dashboardID}/widget/${widgetID}/token`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n}\n\nexport default Widgets;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}