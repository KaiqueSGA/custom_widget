{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nclass Email extends TagoIOModule_1.default {\n  async send(email) {\n    if (email.html && email.message) {\n      console.warn(new Error(\"HTML field will overwrite message field\"));\n    }\n    const result = await this.doRequest({\n      path: \"/analysis/services/email/send\",\n      method: \"POST\",\n      body: email\n    });\n    return result;\n  }\n}\nexports.default = Email;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAuGA,MAAMA,KAAM,SAAQC,sBAAiC;EAe5C,MAAMC,IAAI,CAACC,KAAU;IAC1B,IAAIA,KAAK,CAACC,IAAI,IAAID,KAAK,CAACE,OAAO,EAAE;MAC/BC,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,CAAC,yCAAyC,CAAC,CAAC;;IAGpE,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,+BAA+B;MACrCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEV;KACP,CAAC;IAEF,OAAOM,MAAM;EACf;;AAGFK,kBAAed,KAAK","names":["Email","TagoIOModule_1","send","email","html","message","console","warn","Error","result","doRequest","path","method","body","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Services\\Email.ts"],"sourcesContent":["import TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\n\r\ninterface AttachmentOptions {\r\n  /**\r\n   * Archive itself\r\n   */\r\n  archive: string;\r\n  /**\r\n   * Name for the archive\r\n   */\r\n  filename: string;\r\n}\r\n\r\ninterface TemplateOptions {\r\n  /**\r\n   * Template name\r\n   *\r\n   * You can create an e-mail template on TagoRUN options at\r\n   * https://admin.tago.io/run\r\n   */\r\n  name: string;\r\n  /**\r\n   * Parameters to parse on Template\r\n   *\r\n   * You can use that parameter as local variable\r\n   * using $PARAMETER_KEY$\r\n   *\r\n   * example: params = { name: 'John' }\r\n   * will be $name$ on template document\r\n   */\r\n  params?: {\r\n    [key: string]: string | number;\r\n  };\r\n}\r\n\r\ninterface EmailBase {\r\n  /**\r\n   * E-mail address to be sent\r\n   *\r\n   * example: \"myclien@tago.io\"\r\n   */\r\n  to: string;\r\n  /**\r\n   * Name of origin\r\n   *\r\n   * example: \"My Run\"\r\n   */\r\n  from?: string;\r\n  /**\r\n   * Subject of the e-mail\r\n   *\r\n   * only allow with message or html\r\n   */\r\n  subject: string;\r\n  /**\r\n   * Attachment for the e-mail\r\n   */\r\n  attachment?: AttachmentOptions;\r\n}\r\n\r\ninterface EmailRawText {\r\n  /**\r\n   * Message in raw text for email body\r\n   */\r\n  message: string;\r\n}\r\n\r\ninterface EmailHTML {\r\n  /**\r\n   * HTML email body\r\n   */\r\n  html: string;\r\n}\r\n\r\ninterface EmailWithTemplate {\r\n  /**\r\n   * E-mail address to be sent\r\n   *\r\n   * example: \"myclien@tago.io\"\r\n   */\r\n  to: string;\r\n  /**\r\n   * Name of origin\r\n   *\r\n   * example: \"My Run\"\r\n   */\r\n  from?: string;\r\n  /**\r\n   * Attachment for the e-mail\r\n   */\r\n  attachment?: AttachmentOptions;\r\n  /**\r\n   * Use TagoRUN E-Mail Template\r\n   *\r\n   * Tip: If you use template together with attachment the\r\n   * back-end will generate a parameter called 'URL';\r\n   */\r\n  template?: TemplateOptions;\r\n}\r\n\r\ntype EmailWithHTML = EmailBase & EmailHTML;\r\ntype EmailWithRawText = EmailBase & EmailRawText;\r\n\r\nclass Email extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Send email\r\n   * @param email E-mail Object\r\n   *\r\n   * @example\r\n   * ```json\r\n   * { to: \"client(at)company.com\", subject: \"Reports\", message: \"Hello client, it's your report\" }\r\n   * { to: \"client(at)company.com\", subject: \"Reports\", html: \"<p>Hello client, it's your report</p>\" }\r\n   * { to: \"client(at)company.com\", template: { name: \"my_template\" } }\r\n   * ```\r\n   */\r\n  public async send(email: EmailWithRawText): Promise<string>;\r\n  public async send(email: EmailWithHTML): Promise<string>;\r\n  public async send(email: EmailWithTemplate): Promise<string>;\r\n  public async send(email: any): Promise<string> {\r\n    if (email.html && email.message) {\r\n      console.warn(new Error(\"HTML field will overwrite message field\"));\r\n    }\r\n\r\n    const result = await this.doRequest<string>({\r\n      path: \"/analysis/services/email/send\",\r\n      method: \"POST\",\r\n      body: email,\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Email;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}