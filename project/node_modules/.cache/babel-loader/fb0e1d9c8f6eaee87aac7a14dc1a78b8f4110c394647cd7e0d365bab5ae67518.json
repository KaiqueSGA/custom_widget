{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  let decimalsString = \"\";\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\n  }\n  const decimals = decimalsString.length || -1;\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      alias: \"\",\n      formula: {\n        fixed_unit: oldDisplay?.unit,\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\"\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      number_format: {\n        decimals,\n        show_thousand: false\n      },\n      range: (0, common_1.convertRange)(oldDisplay),\n      show_variables: !oldDisplay?.hide_variables,\n      theme: {\n        color: {\n          background: null,\n          fill: null,\n          outline: null,\n          text: null,\n          text_border: null\n        }\n      }\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"solid\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    for (const item of oldWidget.data) {\n      if (item?.is_hide) {\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item?.origin}${variable}`;\n        if (oldDisplay?.vars_format?.[key]) {\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\n        }\n        // This is the formula variable\n        if (oldDisplay.vars_formula?.[key]) {\n          newStructure.display.formula = (0, common_1.convertFormula)(oldDisplay.vars_formula?.[key]);\n        }\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\n        }\n      }\n    }\n    newStructure.data = oldWidget.data;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula || widget?.display?.gauge_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","decimalsString","numberformat","split","decimals","length","newStructure","dashboard","alias","formula","fixed_unit","unit","unit_type","header_buttons","help","number_format","show_thousand","range","show_variables","hide_variables","theme","color","background","fill","outline","text","text_border","id","label","realtime","type","Array","isArray","data","item","is_hide","variable","variables","key","origin","vars_format","vars_formula","vars_labels","exports","isOldStructure","widget","isOld","gauge_type"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\solid.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old SOLID to new SOLID\r\n// ? ====================================================================================\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport { convertFormula, convertRange } from \"./common\";\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  let decimalsString = \"\";\r\n  if (oldDisplay?.numberformat && typeof oldDisplay?.numberformat === \"string\") {\r\n    decimalsString = oldDisplay?.numberformat?.split(\".\")?.[1] || \"\";\r\n  }\r\n  const decimals = decimalsString.length || -1;\r\n\r\n  const newStructure: any = {\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      alias: \"\",\r\n      formula: {\r\n        fixed_unit: oldDisplay?.unit,\r\n        unit_type: oldDisplay?.unit ? \"fixed\" : \"origin\",\r\n      },\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      number_format: {\r\n        decimals,\r\n        show_thousand: false,\r\n      },\r\n      range: convertRange(oldDisplay),\r\n      show_variables: !oldDisplay?.hide_variables,\r\n      theme: {\r\n        color: {\r\n          background: null,\r\n          fill: null,\r\n          outline: null,\r\n          text: null,\r\n          text_border: null,\r\n        },\r\n      },\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: null,\r\n    type: \"solid\",\r\n  };\r\n  if (Array.isArray(oldWidget.data)) {\r\n    for (const item of oldWidget.data) {\r\n      if (item?.is_hide) {\r\n        continue;\r\n      }\r\n      for (const variable of item.variables) {\r\n        const key = `${item?.origin}${variable}`;\r\n        if (oldDisplay?.vars_format?.[key]) {\r\n          newStructure.display.number_format = oldDisplay?.vars_format?.[key];\r\n        }\r\n        // This is the formula variable\r\n        if (oldDisplay.vars_formula?.[key]) {\r\n          newStructure.display.formula = convertFormula(oldDisplay.vars_formula?.[key]);\r\n        }\r\n        if (oldDisplay?.vars_labels?.[key] && oldDisplay?.vars_labels?.[key] !== variable) {\r\n          newStructure.display.alias = oldDisplay?.vars_labels?.[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    newStructure.data = oldWidget.data;\r\n  }\r\n  return newStructure;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(\r\n    widget?.display?.vars_labels ||\r\n    widget?.display?.vars_format ||\r\n    widget?.display?.vars_formula ||\r\n    widget?.display?.gauge_type\r\n  );\r\n\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}