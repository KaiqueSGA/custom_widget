{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nvar dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nvar Profile = /*#__PURE__*/function (_TagoIOModule_1$defau) {\n  _inherits(Profile, _TagoIOModule_1$defau);\n  var _super = _createSuper(Profile);\n  function Profile() {\n    _classCallCheck(this, Profile);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Profile, [{\n    key: \"list\",\n    value:\n    /**\n     * Lists all the profiles in your account\n     */\n    function () {\n      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.doRequest({\n                  path: \"/profile\",\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function list() {\n        return _list.apply(this, arguments);\n      }\n      return list;\n    }()\n    /**\n     * Get Profile info\n     * @param profileID Profile identification\n     */\n  }, {\n    key: \"info\",\n    value: function () {\n      var _info = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(profileID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context2.sent;\n                if (result.info) result.info = (0, dateParser_1.default)(result.info, [\"created_at\", \"updated_at\"]);\n                return _context2.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function info(_x) {\n        return _info.apply(this, arguments);\n      }\n      return info;\n    }()\n    /**\n     * Gets profile summary\n     */\n  }, {\n    key: \"summary\",\n    value: function () {\n      var _summary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(profileID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/summary\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function summary(_x2) {\n        return _summary.apply(this, arguments);\n      }\n      return summary;\n    }()\n    /**\n     * Create a profile.\n     *\n     * If `allocate_free_resources` is passed as an option, all the free resources available\n     * in allocation will be allocated to the new profile.\n     *\n     * @param profileObj Profile object with data to be created\n     * @param options Options for the created profile.\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(profileObj, options) {\n        var _ref, allocate_free_resources, params, result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _ref = options || {}, allocate_free_resources = _ref.allocate_free_resources;\n                params = _objectSpread({}, allocate_free_resources && {\n                  allocate_free_resources: allocate_free_resources\n                });\n                _context4.next = 4;\n                return this.doRequest({\n                  path: \"/profile/\",\n                  method: \"POST\",\n                  body: profileObj,\n                  params: params\n                });\n              case 4:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result);\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function create(_x3, _x4) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n    /**\n     * Edits a profile\n     * @param profileObj Profile object with data to be changed\n     */\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(profileID, profileObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID),\n                  method: \"PUT\",\n                  body: profileObj\n                });\n              case 2:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function edit(_x5, _x6) {\n        return _edit.apply(this, arguments);\n      }\n      return edit;\n    }()\n    /**\n     * Delete profile\n     * @param profileID Profile identification\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(profileID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function _delete(_x7) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * List all the usage statistics of a profile.\n     *\n     * Usage statistics are cumulative: if a service was not used in a time period,\n     * the statistics for that time period will not be in the object.\n     *\n     * @param profileID Profile identification\n     * @param dateObj Object with date and their timezone\n     *\n     * @returns Array of cumulative usage statistics.\n     *\n     * @example\n     *\n     * ```json\n     * [\n     *   { \"time\": \"2022-01-01T00:00:00.000Z\", \"input\": 5 },\n     *   { \"time\": \"2022-01-02T00:00:00.000Z\", \"input\": 5, \"output\": 10 },\n     *   { \"time\": \"2022-01-03T00:00:00.000Z\", \"input\": 10, \"output\": 15 },\n     * ]\n     * ```\n     */\n  }, {\n    key: \"usageStatisticList\",\n    value: function () {\n      var _usageStatisticList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(profileID, dateObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/statistics\"),\n                  method: \"GET\",\n                  params: _objectSpread({}, dateObj)\n                });\n              case 2:\n                result = _context7.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"time\"]);\n                });\n                return _context7.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function usageStatisticList(_x8, _x9) {\n        return _usageStatisticList.apply(this, arguments);\n      }\n      return usageStatisticList;\n    }()\n    /**\n     * Create a query for auditlog\n     * @param profileID Profile identification\n     * @param filterObj auditlog filter object\n     */\n  }, {\n    key: \"auditLog\",\n    value: function () {\n      var _auditLog = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(profileID, filterObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/auditlog\"),\n                  method: \"GET\",\n                  params: filterObj || {}\n                });\n              case 2:\n                result = _context8.sent;\n                result.events = result === null || result === void 0 ? void 0 : result.events.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"date\"]);\n                });\n                return _context8.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function auditLog(_x10, _x11) {\n        return _auditLog.apply(this, arguments);\n      }\n      return auditLog;\n    }()\n    /**\n     * Fetches the information from an auditlog query\n     * @param profileID Profile identification\n     * @param queryId auditlog queryId from auditLogCreate\n     */\n  }, {\n    key: \"auditLogQuery\",\n    value: function () {\n      var _auditLogQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(profileID, queryId) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/auditlog/\").concat(queryId),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context9.sent;\n                result.events = result === null || result === void 0 ? void 0 : result.events.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"date\"]);\n                });\n                return _context9.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function auditLogQuery(_x12, _x13) {\n        return _auditLogQuery.apply(this, arguments);\n      }\n      return auditLogQuery;\n    }()\n    /**\n     * Gets the information of addons for the profile\n     * @param profileID Profile identification\n     */\n  }, {\n    key: \"addonList\",\n    value: function () {\n      var _addonList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(profileID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/addons\"),\n                  method: \"GET\"\n                });\n              case 2:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function addonList(_x14) {\n        return _addonList.apply(this, arguments);\n      }\n      return addonList;\n    }()\n    /**\n     * Sets the information of addons for the profile\n     * @param profileID Profile identification\n     * @param addonObj\n     */\n  }, {\n    key: \"addonEdit\",\n    value: function () {\n      var _addonEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(profileID, addonObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/addons\"),\n                  method: \"POST\",\n                  body: addonObj\n                });\n              case 2:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function addonEdit(_x15, _x16) {\n        return _addonEdit.apply(this, arguments);\n      }\n      return addonEdit;\n    }()\n    /**\n     * Sets the information of services for the profile. Services are the main resources\n     * in your profile, for example data input, data output, etc...\n     * @param profileID Profile identification\n     * @param serviceObj\n     */\n  }, {\n    key: \"serviceEdit\",\n    value: function () {\n      var _serviceEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(profileID, serviceObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/services\"),\n                  method: \"POST\",\n                  body: serviceObj\n                });\n              case 2:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function serviceEdit(_x17, _x18) {\n        return _serviceEdit.apply(this, arguments);\n      }\n      return serviceEdit;\n    }()\n    /**\n     * Transforms the current token to another profile. The current profile will\n     * no longer have the current token, as the current token will be acquired by the profile informed.\n     * After this call is done, other requests using this token will work solely for the new profile, and\n     * no longer for the current profile.\n     * @param targetProfileID Profile identification\n     */\n  }, {\n    key: \"transferTokenToAnotherProfile\",\n    value: function () {\n      var _transferTokenToAnotherProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(targetProfileID) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.doRequest({\n                  path: \"/profile/switch/\".concat(targetProfileID),\n                  method: \"PUT\"\n                });\n              case 2:\n                result = _context13.sent;\n                return _context13.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function transferTokenToAnotherProfile(_x19) {\n        return _transferTokenToAnotherProfile.apply(this, arguments);\n      }\n      return transferTokenToAnotherProfile;\n    }()\n    /**\n     * Retrieves a list of all tokens\n     * @param profileID Profile ID\n     * @param queryObj Search query params\n     */\n  }, {\n    key: \"tokenList\",\n    value: function () {\n      var _tokenList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(profileID, queryObj) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/token\"),\n                  method: \"GET\",\n                  params: {\n                    page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,\n                    fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || [\"name\", \"token\", \"permission\"],\n                    filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},\n                    amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,\n                    orderBy: queryObj !== null && queryObj !== void 0 && queryObj.orderBy ? \"\".concat(queryObj.orderBy[0], \",\").concat(queryObj.orderBy[1]) : \"created_at,desc\"\n                  }\n                });\n              case 2:\n                result = _context14.sent;\n                result = result.map(function (data) {\n                  return (0, dateParser_1.default)(data, [\"last_authorization\", \"expire_time\", \"created_at\"]);\n                });\n                return _context14.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function tokenList(_x20, _x21) {\n        return _tokenList.apply(this, arguments);\n      }\n      return tokenList;\n    }()\n    /**\n     * Generates and retrieves a new token\n     * @param profileID Profile ID\n     * @param tokenParams Token params for new token\n     */\n  }, {\n    key: \"tokenCreate\",\n    value: function () {\n      var _tokenCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(profileID, tokenParams) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileID, \"/token\"),\n                  method: \"POST\",\n                  body: tokenParams\n                });\n              case 2:\n                result = _context15.sent;\n                result = (0, dateParser_1.default)(result, [\"expire_date\"]);\n                return _context15.abrupt(\"return\", result);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function tokenCreate(_x22, _x23) {\n        return _tokenCreate.apply(this, arguments);\n      }\n      return tokenCreate;\n    }()\n    /**\n     * Deletes a token\n     * @param token Token\n     */\n  }, {\n    key: \"tokenDelete\",\n    value: function () {\n      var _tokenDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(token) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.doRequest({\n                  path: \"/profile/token/\".concat(token),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context16.sent;\n                return _context16.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function tokenDelete(_x24) {\n        return _tokenDelete.apply(this, arguments);\n      }\n      return tokenDelete;\n    }()\n    /**\n     * Remove an add-on from a profile at the end of the billing cycle.\n     *\n     * @throws If profile ID is invalid.\n     * @throws If profile doesn't have the add-on.\n     *\n     * @returns Success message.\n     */\n  }, {\n    key: \"removeAddOn\",\n    value: function () {\n      var _removeAddOn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(profileId, addon) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.doRequest({\n                  path: \"/profile/\".concat(profileId, \"/\").concat(addon),\n                  method: \"DELETE\"\n                });\n              case 2:\n                result = _context17.sent;\n                return _context17.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function removeAddOn(_x25, _x26) {\n        return _removeAddOn.apply(this, arguments);\n      }\n      return removeAddOn;\n    }()\n  }]);\n  return Profile;\n}(TagoIOModule_1.default);\nexports.default = Profile;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAQA;AACA;AAA6C,IAavCA,OAAQ;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACZ;;;IAAA;MAAA,uEAGO;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACgB,IAAI,CAACC,SAAS,CAAoB;kBACrDC,IAAI,EAAE,UAAU;kBAChBC,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,iCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,uEAIO,kBAAWC,SAAoB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACf,IAAI,CAACJ,SAAS,CAAc;kBAC/CC,IAAI,qBAAcG,SAAS,CAAE;kBAC7BF,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAKZ,IAAIA,MAAM,CAACE,IAAI,EAAEF,MAAM,CAACE,IAAI,GAAG,wBAAU,EAACF,MAAM,CAACE,IAAI,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;gBAAC,kCAE9EF,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;EAAA;IAAA;IAAA;MAAA,0EAGO,kBAAcC,SAAoB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAClB,IAAI,CAACJ,SAAS,CAAiB;kBAClDC,IAAI,qBAAcG,SAAS,aAAU;kBACrCF,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,kCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;;;;EAAA;IAAA;IAAA;MAAA,yEASO,kBACLG,UAA4B,EAC5BC,OAA+C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,OAEXA,OAAO,IAAI,EAAE,EAAzCC,uBAAuB,QAAvBA,uBAAuB;gBACzBC,MAAM,qBACND,uBAAuB,IAAI;kBAAEA,uBAAuB,EAAvBA;gBAAuB,CAAE;gBAAA;gBAAA,OAGvC,IAAI,CAACR,SAAS,CAAoB;kBACrDC,IAAI,aAAa;kBACjBC,MAAM,EAAE,MAAM;kBACdQ,IAAI,EAAEJ,UAAU;kBAChBG,MAAM,EAANA;iBACD,CAAC;cAAA;gBALIN,MAAM;gBAAA,kCAOLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,uEAIO,kBAAWC,SAAoB,EAAEE,UAAgC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACjD,IAAI,CAACN,SAAS,CAAS;kBAC1CC,IAAI,qBAAcG,SAAS,CAAE;kBAC7BF,MAAM,EAAE,KAAK;kBACbQ,IAAI,EAAEJ;iBACP,CAAC;cAAA;gBAJIH,MAAM;gBAAA,kCAMLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,0EAIO,kBAAaC,SAAoB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACjB,IAAI,CAACJ,SAAS,CAAS;kBAC1CC,IAAI,qBAAcG,SAAS,CAAE;kBAC7BF,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,kCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;;;;;;;;;;;;;;;;EAAA;IAAA;IAAA;MAAA,qFAqBO,kBAAyBC,SAAoB,EAAEO,OAAwB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACzD,IAAI,CAACX,SAAS,CAAmB;kBAClDC,IAAI,qBAAcG,SAAS,gBAAa;kBACxCF,MAAM,EAAE,KAAK;kBACbO,MAAM,oBACDE,OAAO;iBAEb,CAAC;cAAA;gBANER,MAAM;gBAQVA,MAAM,GAAGA,MAAM,CAACS,GAAG,CAAC,UAACC,IAAI;kBAAA,OAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;gBAAA,EAAC;gBAAC,kCAEnDV,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,2EAKO,kBAAeC,SAAoB,EAAEU,SAA0B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC/C,IAAI,CAACd,SAAS,CAAW;kBAC5CC,IAAI,qBAAcG,SAAS,cAAW;kBACtCF,MAAM,EAAE,KAAK;kBACbO,MAAM,EAAEK,SAAS,IAAI;iBACtB,CAAC;cAAA;gBAJIX,MAAM;gBAMZA,MAAM,CAACY,MAAM,GAAGZ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEY,MAAM,CAACH,GAAG,CAAC,UAACC,IAAI;kBAAA,OAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;gBAAA,EAAC;gBAAC,kCAClEV,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,gFAKO,kBAAoBC,SAAoB,EAAEY,OAAgB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC1C,IAAI,CAAChB,SAAS,CAAW;kBAC5CC,IAAI,qBAAcG,SAAS,uBAAaY,OAAO,CAAE;kBACjDd,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAKZA,MAAM,CAACY,MAAM,GAAGZ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEY,MAAM,CAACH,GAAG,CAAC,UAACC,IAAI;kBAAA,OAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;gBAAA,EAAC;gBAAC,kCAClEV,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,4EAIO,mBAAgBC,SAAoB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACpB,IAAI,CAACJ,SAAS,CAAY;kBAC7CC,IAAI,qBAAcG,SAAS,YAAS;kBACpCF,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,mCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,4EAKO,mBAAgBC,SAAoB,EAAEa,QAA4B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAClD,IAAI,CAACjB,SAAS,CAAS;kBAC1CC,IAAI,qBAAcG,SAAS,YAAS;kBACpCF,MAAM,EAAE,MAAM;kBACdQ,IAAI,EAAEO;iBACP,CAAC;cAAA;gBAJId,MAAM;gBAAA,mCAMLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;EAAA;IAAA;IAAA;MAAA,8EAMO,mBAAkBC,SAAoB,EAAEc,UAAkB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC1C,IAAI,CAAClB,SAAS,CAAS;kBAC1CC,IAAI,qBAAcG,SAAS,cAAW;kBACtCF,MAAM,EAAE,MAAM;kBACdQ,IAAI,EAAEQ;iBACP,CAAC;cAAA;gBAJIf,MAAM;gBAAA,mCAMLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;;EAAA;IAAA;IAAA;MAAA,gGAOO,mBAAoCgB,eAA0B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC9C,IAAI,CAACnB,SAAS,CAAS;kBAC1CC,IAAI,4BAAqBkB,eAAe,CAAE;kBAC1CjB,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,mCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,4EAKO,mBAAgBC,SAAoB,EAAEgB,QAAyB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACjD,IAAI,CAACpB,SAAS,CAA2B;kBAC1DC,IAAI,qBAAcG,SAAS,WAAQ;kBACnCF,MAAM,EAAE,KAAK;kBACbO,MAAM,EAAE;oBACNY,IAAI,EAAE,SAAQ,aAARD,QAAQ,uBAARA,QAAQ,CAAEC,IAAI,KAAI,CAAC;oBACzBC,MAAM,EAAE,SAAQ,aAARF,QAAQ,uBAARA,QAAQ,CAAEE,MAAM,KAAI,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC;oBAC3DC,MAAM,EAAE,SAAQ,aAARH,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,KAAI,EAAE;oBAC9BC,MAAM,EAAE,SAAQ,aAARJ,QAAQ,uBAARA,QAAQ,CAAEI,MAAM,KAAI,EAAE;oBAC9BC,OAAO,EAAEL,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEK,OAAO,aAAML,QAAQ,CAACK,OAAO,CAAC,CAAC,CAAC,cAAIL,QAAQ,CAACK,OAAO,CAAC,CAAC,CAAC,IAAK;;iBAElF,CAAC;cAAA;gBAVEtB,MAAM;gBAYVA,MAAM,GAAGA,MAAM,CAACS,GAAG,CAAC,UAACC,IAAI;kBAAA,OAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,oBAAoB,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;gBAAA,EAAC;gBAAC,mCAE9FV,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;EAAA;IAAA;IAAA;MAAA,8EAKO,mBAAkBC,SAAoB,EAAEsB,WAAsB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAChD,IAAI,CAAC1B,SAAS,CAAsB;kBACrDC,IAAI,qBAAcG,SAAS,WAAQ;kBACnCF,MAAM,EAAE,MAAM;kBACdQ,IAAI,EAAEgB;iBACP,CAAC;cAAA;gBAJEvB,MAAM;gBAMVA,MAAM,GAAG,wBAAU,EAACA,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC;gBAAC,mCAEtCA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;EAAA;IAAA;IAAA;MAAA,8EAIO,mBAAkBwB,KAAmB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACrB,IAAI,CAAC3B,SAAS,CAAS;kBAC1CC,IAAI,2BAAoB0B,KAAK,CAAE;kBAC/BzB,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,mCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;;;EAAA;IAAA;IAAA;MAAA,8EAQO,mBAAkByB,SAAoB,EAAEC,KAAmB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC3C,IAAI,CAAC7B,SAAS,CAAS;kBAC1CC,IAAI,qBAAc2B,SAAS,cAAIC,KAAK,CAAE;kBACtC3B,MAAM,EAAE;iBACT,CAAC;cAAA;gBAHIC,MAAM;gBAAA,mCAKLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAjSmB2B,sBAAiC;AAoSvDC,kBAAehC,OAAO","names":["Profile","doRequest","path","method","result","profileID","info","profileObj","options","allocate_free_resources","params","body","dateObj","map","data","filterObj","events","queryId","addonObj","serviceObj","targetProfileID","queryObj","page","fields","filter","amount","orderBy","tokenParams","token","profileId","addon","TagoIOModule_1","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Profile.ts"],"sourcesContent":["import {\n  GenericID,\n  GenericToken,\n  ListTokenQuery,\n  TokenCreateResponse,\n  TokenData,\n  TokenDataList,\n} from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\nimport dateParser from \"../Utils/dateParser\";\nimport { BillingAddOn } from \"./billing.types\";\nimport type {\n  AddonInfo,\n  AuditLog,\n  AuditLogFilter,\n  ProfileInfo,\n  ProfileListInfo,\n  ProfileSummary,\n  StatisticsDate,\n  UsageStatistic,\n} from \"./profile.types\";\n\nclass Profile extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Lists all the profiles in your account\n   */\n  public async list(): Promise<ProfileListInfo[]> {\n    const result = await this.doRequest<ProfileListInfo[]>({\n      path: \"/profile\",\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Get Profile info\n   * @param profileID Profile identification\n   */\n  public async info(profileID: GenericID): Promise<ProfileInfo> {\n    const result = await this.doRequest<ProfileInfo>({\n      path: `/profile/${profileID}`,\n      method: \"GET\",\n    });\n\n    if (result.info) result.info = dateParser(result.info, [\"created_at\", \"updated_at\"]);\n\n    return result;\n  }\n\n  /**\n   * Gets profile summary\n   */\n  public async summary(profileID: GenericID): Promise<ProfileSummary> {\n    const result = await this.doRequest<ProfileSummary>({\n      path: `/profile/${profileID}/summary`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a profile.\n   *\n   * If `allocate_free_resources` is passed as an option, all the free resources available\n   * in allocation will be allocated to the new profile.\n   *\n   * @param profileObj Profile object with data to be created\n   * @param options Options for the created profile.\n   */\n  public async create(\n    profileObj: { name: string },\n    options?: { allocate_free_resources?: boolean }\n  ): Promise<{ id: GenericID }> {\n    const { allocate_free_resources } = options || {};\n    const params = {\n      ...(allocate_free_resources && { allocate_free_resources }),\n    };\n\n    const result = await this.doRequest<{ id: GenericID }>({\n      path: `/profile/`,\n      method: \"POST\",\n      body: profileObj,\n      params,\n    });\n\n    return result;\n  }\n\n  /**\n   * Edits a profile\n   * @param profileObj Profile object with data to be changed\n   */\n  public async edit(profileID: GenericID, profileObj: Partial<ProfileInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}`,\n      method: \"PUT\",\n      body: profileObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete profile\n   * @param profileID Profile identification\n   */\n  public async delete(profileID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * List all the usage statistics of a profile.\n   *\n   * Usage statistics are cumulative: if a service was not used in a time period,\n   * the statistics for that time period will not be in the object.\n   *\n   * @param profileID Profile identification\n   * @param dateObj Object with date and their timezone\n   *\n   * @returns Array of cumulative usage statistics.\n   *\n   * @example\n   *\n   * ```json\n   * [\n   *   { \"time\": \"2022-01-01T00:00:00.000Z\", \"input\": 5 },\n   *   { \"time\": \"2022-01-02T00:00:00.000Z\", \"input\": 5, \"output\": 10 },\n   *   { \"time\": \"2022-01-03T00:00:00.000Z\", \"input\": 10, \"output\": 15 },\n   * ]\n   * ```\n   */\n  public async usageStatisticList(profileID: GenericID, dateObj?: StatisticsDate): Promise<UsageStatistic[]> {\n    let result = await this.doRequest<UsageStatistic[]>({\n      path: `/profile/${profileID}/statistics`,\n      method: \"GET\",\n      params: {\n        ...dateObj,\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"time\"]));\n\n    return result;\n  }\n\n  /**\n   * Create a query for auditlog\n   * @param profileID Profile identification\n   * @param filterObj auditlog filter object\n   */\n  public async auditLog(profileID: GenericID, filterObj?: AuditLogFilter): Promise<AuditLog> {\n    const result = await this.doRequest<AuditLog>({\n      path: `/profile/${profileID}/auditlog`,\n      method: \"GET\",\n      params: filterObj || {},\n    });\n\n    result.events = result?.events.map((data) => dateParser(data, [\"date\"]));\n    return result;\n  }\n\n  /**\n   * Fetches the information from an auditlog query\n   * @param profileID Profile identification\n   * @param queryId auditlog queryId from auditLogCreate\n   */\n  public async auditLogQuery(profileID: GenericID, queryId?: string): Promise<AuditLog> {\n    const result = await this.doRequest<AuditLog>({\n      path: `/profile/${profileID}/auditlog/${queryId}`,\n      method: \"GET\",\n    });\n\n    result.events = result?.events.map((data) => dateParser(data, [\"date\"]));\n    return result;\n  }\n\n  /**\n   * Gets the information of addons for the profile\n   * @param profileID Profile identification\n   */\n  public async addonList(profileID: GenericID): Promise<AddonInfo> {\n    const result = await this.doRequest<AddonInfo>({\n      path: `/profile/${profileID}/addons`,\n      method: \"GET\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Sets the information of addons for the profile\n   * @param profileID Profile identification\n   * @param addonObj\n   */\n  public async addonEdit(profileID: GenericID, addonObj: Partial<AddonInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}/addons`,\n      method: \"POST\",\n      body: addonObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Sets the information of services for the profile. Services are the main resources\n   * in your profile, for example data input, data output, etc...\n   * @param profileID Profile identification\n   * @param serviceObj\n   */\n  public async serviceEdit(profileID: GenericID, serviceObj: object): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileID}/services`,\n      method: \"POST\",\n      body: serviceObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Transforms the current token to another profile. The current profile will\n   * no longer have the current token, as the current token will be acquired by the profile informed.\n   * After this call is done, other requests using this token will work solely for the new profile, and\n   * no longer for the current profile.\n   * @param targetProfileID Profile identification\n   */\n  public async transferTokenToAnotherProfile(targetProfileID: GenericID): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/switch/${targetProfileID}`,\n      method: \"PUT\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Retrieves a list of all tokens\n   * @param profileID Profile ID\n   * @param queryObj Search query params\n   */\n  public async tokenList(profileID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<TokenDataList>[]> {\n    let result = await this.doRequest<Partial<TokenDataList>[]>({\n      path: `/profile/${profileID}/token`,\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"name\", \"token\", \"permission\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"created_at,desc\",\n      },\n    });\n\n    result = result.map((data) => dateParser(data, [\"last_authorization\", \"expire_time\", \"created_at\"]));\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token\n   * @param profileID Profile ID\n   * @param tokenParams Token params for new token\n   */\n  public async tokenCreate(profileID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse> {\n    let result = await this.doRequest<TokenCreateResponse>({\n      path: `/profile/${profileID}/token`,\n      method: \"POST\",\n      body: tokenParams,\n    });\n\n    result = dateParser(result, [\"expire_date\"]);\n\n    return result;\n  }\n\n  /**\n   * Deletes a token\n   * @param token Token\n   */\n  public async tokenDelete(token: GenericToken): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/token/${token}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Remove an add-on from a profile at the end of the billing cycle.\n   *\n   * @throws If profile ID is invalid.\n   * @throws If profile doesn't have the add-on.\n   *\n   * @returns Success message.\n   */\n  public async removeAddOn(profileId: GenericID, addon: BillingAddOn): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/profile/${profileId}/${addon}`,\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n}\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}