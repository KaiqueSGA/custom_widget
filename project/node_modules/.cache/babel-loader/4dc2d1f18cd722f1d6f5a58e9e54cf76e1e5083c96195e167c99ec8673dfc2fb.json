{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nconst convertFormula_1 = __importDefault(require(\"./common/convertFormula\"));\nfunction convert(oldWidget) {\n  const oldDisplay = oldWidget.display || {};\n  const newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      font_size: {\n        type: \"auto\"\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_units: true,\n      show_variables: !oldDisplay.hide_variables,\n      style: \"default\",\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"display\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = (0, convertFormula_1.default)(oldDisplay.vars_formula?.[key]);\n        newStructure.display.variables.push({\n          origin: item.origin,\n          variable,\n          ...(alias ? {\n            alias\n          } : {}),\n          ...(numberFormat ? {\n            number_format: numberFormat\n          } : {}),\n          ...(formula ? {\n            formula\n          } : {})\n        });\n      }\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  const isOld = !!(widget?.display?.vars_labels || widget?.display?.vars_format || widget?.display?.vars_formula || widget?.display?.numberformat || widget?.display?.column_alignments || widget?.display?.hide_variables !== undefined || widget?.display?.watermark !== undefined);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":";;;;;;;;;;;AAKA;AAEA,SAAgBA,OAAO,CAACC,SAAc;EACpC,MAAMC,UAAU,GAAGD,SAAS,CAACE,OAAO,IAAI,EAAE;EAE1C,MAAMC,YAAY,GAAQ;IACxBC,SAAS,EAAEJ,SAAS,CAACI,SAAS;IAC9BF,OAAO,EAAE;MACPG,SAAS,EAAE;QACTC,IAAI,EAAE;OACP;MACDC,cAAc,EAAEN,UAAU,CAACM,cAAc,IAAI,EAAE;MAC/CC,IAAI,EAAEP,UAAU,CAACO,IAAI,IAAI,EAAE;MAC3BC,UAAU,EAAE,IAAI;MAChBC,cAAc,EAAE,CAACT,UAAU,CAACU,cAAc;MAC1CC,KAAK,EAAE,SAAS;MAChBC,SAAS,EAAE;KACZ;IACDC,EAAE,EAAEd,SAAS,CAACc,EAAE;IAChBC,KAAK,EAAEf,SAAS,CAACe,KAAK;IACtBC,QAAQ,EAAE,IAAI;IACdV,IAAI,EAAE;GACP;EAED,IAAIW,KAAK,CAACC,OAAO,CAAClB,SAAS,CAACmB,IAAI,CAAC,EAAE;IACjChB,YAAY,CAACgB,IAAI,GAAGnB,SAAS,CAACmB,IAAI,CAAC,CAAC;IAEpChB,YAAY,CAACD,OAAO,CAACW,SAAS,GAAG,EAAE,CAAC,CAAC;IAErC,KAAK,MAAMO,IAAI,IAAIpB,SAAS,CAACmB,IAAI,EAAE;MACjC,IAAIC,IAAI,CAACC,OAAO,EAAE;QAChB;QACA;QACA;;MAGF,KAAK,MAAMC,QAAQ,IAAIF,IAAI,CAACP,SAAS,EAAE;QACrC,MAAMU,GAAG,GAAG,GAAGH,IAAI,CAACI,MAAM,GAAGF,QAAQ,EAAE;QAEvC,MAAMG,KAAK,GAAGxB,UAAU,CAACyB,WAAW,GAAGH,GAAG,CAAC;QAC3C,MAAMI,YAAY,GAAG1B,UAAU,CAAC2B,WAAW,GAAGL,GAAG,CAAC;QAClD,MAAMM,OAAO,GAAG,4BAAc,EAAC5B,UAAU,CAAC6B,YAAY,GAAGP,GAAG,CAAC,CAAC;QAE9DpB,YAAY,CAACD,OAAO,CAACW,SAAS,CAACkB,IAAI,CAAC;UAClCP,MAAM,EAAEJ,IAAI,CAACI,MAAM;UACnBF,QAAQ;UACR,IAAIG,KAAK,GAAG;YAAEA;UAAK,CAAE,GAAG,EAAE,CAAC;UAC3B,IAAIE,YAAY,GAAG;YAAEK,aAAa,EAAEL;UAAY,CAAE,GAAG,EAAE,CAAC;UACxD,IAAIE,OAAO,GAAG;YAAEA;UAAO,CAAE,GAAG,EAAE;SAC/B,CAAC;;;;EAKR,OAAO1B,YAAY;AACrB;AArDA8B;AAuDA,SAAgBC,cAAc,CAACC,MAAW;EACxC,MAAMC,KAAK,GAAG,CAAC,EACbD,MAAM,EAAEjC,OAAO,EAAEwB,WAAW,IAC5BS,MAAM,EAAEjC,OAAO,EAAE0B,WAAW,IAC5BO,MAAM,EAAEjC,OAAO,EAAE4B,YAAY,IAC7BK,MAAM,EAAEjC,OAAO,EAAEmC,YAAY,IAC7BF,MAAM,EAAEjC,OAAO,EAAEoC,iBAAiB,IAClCH,MAAM,EAAEjC,OAAO,EAAES,cAAc,KAAK4B,SAAS,IAC7CJ,MAAM,EAAEjC,OAAO,EAAEsC,SAAS,KAAKD,SAAS,CACzC;EAED,OAAOH,KAAK;AACd;AAZAH","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","font_size","type","header_buttons","help","show_units","show_variables","hide_variables","style","variables","id","label","realtime","Array","isArray","data","item","is_hide","variable","key","origin","alias","vars_labels","numberFormat","vars_format","formula","vars_formula","push","number_format","exports","isOldStructure","widget","isOld","numberformat","column_alignments","undefined","watermark"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\custom_widgets\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\display.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old DISPLAY to new DISPLAY\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport convertFormula from \"./common/convertFormula\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      font_size: {\n        type: \"auto\",\n      },\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_units: true,\n      show_variables: !oldDisplay.hide_variables,\n      style: \"default\",\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"display\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible in the columns, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item.variables) {\n        const key = `${item.origin}${variable}`;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\n\n        newStructure.display.variables.push({\n          origin: item.origin,\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n          ...(formula ? { formula } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.vars_formula ||\n    widget?.display?.numberformat ||\n    widget?.display?.column_alignments ||\n    widget?.display?.hide_variables !== undefined ||\n    widget?.display?.watermark !== undefined\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}