{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nvar socket_io_parser_1 = require(\"socket.io-parser\");\nvar on_js_1 = require(\"./on.js\");\nvar component_emitter_1 = require(\"@socket.io/component-emitter\");\nvar debug_1 = __importDefault(require(\"debug\")); // debug()\nvar debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nvar Socket = /*#__PURE__*/function (_component_emitter_1$) {\n  _inherits(Socket, _component_emitter_1$);\n  var _super = _createSuper(Socket);\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   */\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_js_1.on(io, \"open\", this.onopen.bind(this)), on_js_1.on(io, \"packet\", this.onpacket.bind(this)), on_js_1.on(io, \"error\", this.onerror.bind(this)), on_js_1.on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        var ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n      var timeout = this.flags.timeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            debug(\"removing packet with ack id %d from the buffer\", id);\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n      debug(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case socket_io_parser_1.PacketType.EVENT:\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case socket_io_parser_1.PacketType.ACK:\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this4.notifyOutgoingListeners(packet);\n        _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n  return Socket;\n}(component_emitter_1.Emitter);\nexports.Socket = Socket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","on_js_1","component_emitter_1","debug_1","debug","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","on","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","_anyOutgoingListeners","Emitter"],"sources":["C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/custom_widgets/project/node_modules/socket.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtD,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,IAAME,mBAAmB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AACnE,IAAMG,OAAO,GAAGZ,eAAe,CAACS,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACnD,IAAMI,KAAK,GAAGD,OAAO,CAACE,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA,IAAMC,eAAe,GAAGZ,MAAM,CAACa,MAAM,CAAC;EAClCC,OAAO,EAAE,CAAC;EACVC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChB;EACAC,WAAW,EAAE,CAAC;EACdC,cAAc,EAAE;AACpB,CAAC,CAAC;AAAC,IACGf,MAAM;EAAA;EAAA;EACR;AACJ;AACA;AACA;AACA;EACI,gBAAYgB,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAAA;IAAA;IACvB;IACA,MAAKC,SAAS,GAAG,KAAK;IACtB,MAAKC,aAAa,GAAG,EAAE;IACvB,MAAKC,UAAU,GAAG,EAAE;IACpB,MAAKC,GAAG,GAAG,CAAC;IACZ,MAAKC,IAAI,GAAG,CAAC,CAAC;IACd,MAAKC,KAAK,GAAG,CAAC,CAAC;IACf,MAAKR,EAAE,GAAGA,EAAE;IACZ,MAAKC,GAAG,GAAGA,GAAG;IACd,IAAIC,IAAI,IAAIA,IAAI,CAACO,IAAI,EAAE;MACnB,MAAKA,IAAI,GAAGP,IAAI,CAACO,IAAI;IACzB;IACA,IAAI,MAAKT,EAAE,CAACU,YAAY,EACpB,MAAKC,IAAI,EAAE;IAAC;EACpB;EACA;AACJ;AACA;EAFI;IAAA;IAAA,KAGA,eAAmB;MACf,OAAO,CAAC,IAAI,CAACR,SAAS;IAC1B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,qBAAY;MACR,IAAI,IAAI,CAACS,IAAI,EACT;MACJ,IAAMZ,EAAE,GAAG,IAAI,CAACA,EAAE;MAClB,IAAI,CAACY,IAAI,GAAG,CACRzB,OAAO,CAAC0B,EAAE,CAACb,EAAE,EAAE,MAAM,EAAE,IAAI,CAACc,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EAC9C5B,OAAO,CAAC0B,EAAE,CAACb,EAAE,EAAE,QAAQ,EAAE,IAAI,CAACgB,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,EAClD5B,OAAO,CAAC0B,EAAE,CAACb,EAAE,EAAE,OAAO,EAAE,IAAI,CAACiB,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,EAChD5B,OAAO,CAAC0B,EAAE,CAACb,EAAE,EAAE,OAAO,EAAE,IAAI,CAACkB,OAAO,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC,CACnD;IACL;IACA;AACJ;AACA;EAFI;IAAA;IAAA,KAGA,eAAa;MACT,OAAO,CAAC,CAAC,IAAI,CAACH,IAAI;IACtB;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,mBAAU;MACN,IAAI,IAAI,CAACT,SAAS,EACd,OAAO,IAAI;MACf,IAAI,CAACgB,SAAS,EAAE;MAChB,IAAI,CAAC,IAAI,CAACnB,EAAE,CAAC,eAAe,CAAC,EACzB,IAAI,CAACA,EAAE,CAACW,IAAI,EAAE,CAAC,CAAC;MACpB,IAAI,MAAM,KAAK,IAAI,CAACX,EAAE,CAACoB,WAAW,EAC9B,IAAI,CAACN,MAAM,EAAE;MACjB,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,gBAAO;MACH,OAAO,IAAI,CAACpB,OAAO,EAAE;IACzB;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAc;MAAA,kCAAN2B,IAAI;QAAJA,IAAI;MAAA;MACRA,IAAI,CAACC,OAAO,CAAC,SAAS,CAAC;MACvB,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;MAC3B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,cAAKI,EAAE,EAAW;MACd,IAAIjC,eAAe,CAACkC,cAAc,CAACD,EAAE,CAAC,EAAE;QACpC,MAAM,IAAIE,KAAK,CAAC,GAAG,GAAGF,EAAE,GAAG,4BAA4B,CAAC;MAC5D;MAAC,mCAHOJ,IAAI;QAAJA,IAAI;MAAA;MAIZA,IAAI,CAACC,OAAO,CAACG,EAAE,CAAC;MAChB,IAAMG,MAAM,GAAG;QACXC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAU,CAACC,KAAK;QACzCC,IAAI,EAAEX;MACV,CAAC;MACDO,MAAM,CAACK,OAAO,GAAG,CAAC,CAAC;MACnBL,MAAM,CAACK,OAAO,CAACC,QAAQ,GAAG,IAAI,CAAC1B,KAAK,CAAC0B,QAAQ,KAAK,KAAK;MACvD;MACA,IAAI,UAAU,KAAK,OAAOb,IAAI,CAACA,IAAI,CAACc,MAAM,GAAG,CAAC,CAAC,EAAE;QAC7C,IAAMC,EAAE,GAAG,IAAI,CAAC9B,GAAG,EAAE;QACrBhB,KAAK,CAAC,gCAAgC,EAAE8C,EAAE,CAAC;QAC3C,IAAMC,GAAG,GAAGhB,IAAI,CAACiB,GAAG,EAAE;QACtB,IAAI,CAACC,oBAAoB,CAACH,EAAE,EAAEC,GAAG,CAAC;QAClCT,MAAM,CAACQ,EAAE,GAAGA,EAAE;MAClB;MACA,IAAMI,mBAAmB,GAAG,IAAI,CAACxC,EAAE,CAACyC,MAAM,IACtC,IAAI,CAACzC,EAAE,CAACyC,MAAM,CAACC,SAAS,IACxB,IAAI,CAAC1C,EAAE,CAACyC,MAAM,CAACC,SAAS,CAACC,QAAQ;MACrC,IAAMC,aAAa,GAAG,IAAI,CAACpC,KAAK,CAACqC,QAAQ,KAAK,CAACL,mBAAmB,IAAI,CAAC,IAAI,CAACrC,SAAS,CAAC;MACtF,IAAIyC,aAAa,EAAE;QACftD,KAAK,CAAC,2DAA2D,CAAC;MACtE,CAAC,MACI,IAAI,IAAI,CAACa,SAAS,EAAE;QACrB,IAAI,CAAC2C,uBAAuB,CAAClB,MAAM,CAAC;QACpC,IAAI,CAACA,MAAM,CAACA,MAAM,CAAC;MACvB,CAAC,MACI;QACD,IAAI,CAACvB,UAAU,CAAC0C,IAAI,CAACnB,MAAM,CAAC;MAChC;MACA,IAAI,CAACpB,KAAK,GAAG,CAAC,CAAC;MACf,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,8BAAqB4B,EAAE,EAAEC,GAAG,EAAE;MAAA;MAC1B,IAAMW,OAAO,GAAG,IAAI,CAACxC,KAAK,CAACwC,OAAO;MAClC,IAAIA,OAAO,KAAKC,SAAS,EAAE;QACvB,IAAI,CAAC1C,IAAI,CAAC6B,EAAE,CAAC,GAAGC,GAAG;QACnB;MACJ;MACA;MACA,IAAMa,KAAK,GAAG,IAAI,CAAClD,EAAE,CAACmD,YAAY,CAAC,YAAM;QACrC,OAAO,MAAI,CAAC5C,IAAI,CAAC6B,EAAE,CAAC;QACpB,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,MAAI,CAAC/C,UAAU,CAAC8B,MAAM,EAAEiB,CAAC,EAAE,EAAE;UAC7C,IAAI,MAAI,CAAC/C,UAAU,CAAC+C,CAAC,CAAC,CAAChB,EAAE,KAAKA,EAAE,EAAE;YAC9B9C,KAAK,CAAC,gDAAgD,EAAE8C,EAAE,CAAC;YAC3D,MAAI,CAAC/B,UAAU,CAACgD,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;UAChC;QACJ;QACA9D,KAAK,CAAC,gDAAgD,EAAE8C,EAAE,EAAEY,OAAO,CAAC;QACpEX,GAAG,CAACiB,IAAI,CAAC,MAAI,EAAE,IAAI3B,KAAK,CAAC,yBAAyB,CAAC,CAAC;MACxD,CAAC,EAAEqB,OAAO,CAAC;MACX,IAAI,CAACzC,IAAI,CAAC6B,EAAE,CAAC,GAAG,YAAa;QACzB;QACA,MAAI,CAACpC,EAAE,CAACuD,cAAc,CAACL,KAAK,CAAC;QAAC,mCAFd7B,IAAI;UAAJA,IAAI;QAAA;QAGpBgB,GAAG,CAACb,KAAK,CAAC,MAAI,GAAG,IAAI,SAAKH,IAAI,EAAE;MACpC,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAOO,OAAM,EAAE;MACXA,OAAM,CAAC3B,GAAG,GAAG,IAAI,CAACA,GAAG;MACrB,IAAI,CAACD,EAAE,CAACwD,OAAO,CAAC5B,OAAM,CAAC;IAC3B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,kBAAS;MAAA;MACLtC,KAAK,CAAC,gCAAgC,CAAC;MACvC,IAAI,OAAO,IAAI,CAACmB,IAAI,IAAI,UAAU,EAAE;QAChC,IAAI,CAACA,IAAI,CAAC,UAACuB,IAAI,EAAK;UAChB,MAAI,CAACJ,MAAM,CAAC;YAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAU,CAAC2B,OAAO;YAAEzB,IAAI,EAAJA;UAAK,CAAC,CAAC;QACtE,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAACJ,MAAM,CAAC;UAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAU,CAAC2B,OAAO;UAAEzB,IAAI,EAAE,IAAI,CAACvB;QAAK,CAAC,CAAC;MACjF;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,iBAAQiD,GAAG,EAAE;MACT,IAAI,CAAC,IAAI,CAACvD,SAAS,EAAE;QACjB,IAAI,CAACwD,YAAY,CAAC,eAAe,EAAED,GAAG,CAAC;MAC3C;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,iBAAQE,MAAM,EAAEC,WAAW,EAAE;MACzBvE,KAAK,CAAC,YAAY,EAAEsE,MAAM,CAAC;MAC3B,IAAI,CAACzD,SAAS,GAAG,KAAK;MACtB,OAAO,IAAI,CAACiC,EAAE;MACd,IAAI,CAACuB,YAAY,CAAC,YAAY,EAAEC,MAAM,EAAEC,WAAW,CAAC;IACxD;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,kBAASjC,MAAM,EAAE;MACb,IAAMkC,aAAa,GAAGlC,MAAM,CAAC3B,GAAG,KAAK,IAAI,CAACA,GAAG;MAC7C,IAAI,CAAC6D,aAAa,EACd;MACJ,QAAQlC,MAAM,CAACC,IAAI;QACf,KAAK5C,kBAAkB,CAAC6C,UAAU,CAAC2B,OAAO;UACtC,IAAI7B,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACI,IAAI,CAAC+B,GAAG,EAAE;YAChC,IAAM3B,EAAE,GAAGR,MAAM,CAACI,IAAI,CAAC+B,GAAG;YAC1B,IAAI,CAACC,SAAS,CAAC5B,EAAE,CAAC;UACtB,CAAC,MACI;YACD,IAAI,CAACuB,YAAY,CAAC,eAAe,EAAE,IAAIhC,KAAK,CAAC,2LAA2L,CAAC,CAAC;UAC9O;UACA;QACJ,KAAK1C,kBAAkB,CAAC6C,UAAU,CAACC,KAAK;QACxC,KAAK9C,kBAAkB,CAAC6C,UAAU,CAACmC,YAAY;UAC3C,IAAI,CAACC,OAAO,CAACtC,MAAM,CAAC;UACpB;QACJ,KAAK3C,kBAAkB,CAAC6C,UAAU,CAACqC,GAAG;QACtC,KAAKlF,kBAAkB,CAAC6C,UAAU,CAACsC,UAAU;UACzC,IAAI,CAACC,KAAK,CAACzC,MAAM,CAAC;UAClB;QACJ,KAAK3C,kBAAkB,CAAC6C,UAAU,CAACwC,UAAU;UACzC,IAAI,CAACC,YAAY,EAAE;UACnB;QACJ,KAAKtF,kBAAkB,CAAC6C,UAAU,CAAC0C,aAAa;UAC5C,IAAI,CAACC,OAAO,EAAE;UACd,IAAMf,GAAG,GAAG,IAAI/B,KAAK,CAACC,MAAM,CAACI,IAAI,CAAC0C,OAAO,CAAC;UAC1C;UACAhB,GAAG,CAAC1B,IAAI,GAAGJ,MAAM,CAACI,IAAI,CAACA,IAAI;UAC3B,IAAI,CAAC2B,YAAY,CAAC,eAAe,EAAED,GAAG,CAAC;UACvC;MAAM;IAElB;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,iBAAQ9B,MAAM,EAAE;MACZ,IAAMP,IAAI,GAAGO,MAAM,CAACI,IAAI,IAAI,EAAE;MAC9B1C,KAAK,CAAC,mBAAmB,EAAE+B,IAAI,CAAC;MAChC,IAAI,IAAI,IAAIO,MAAM,CAACQ,EAAE,EAAE;QACnB9C,KAAK,CAAC,iCAAiC,CAAC;QACxC+B,IAAI,CAAC0B,IAAI,CAAC,IAAI,CAACV,GAAG,CAACT,MAAM,CAACQ,EAAE,CAAC,CAAC;MAClC;MACA,IAAI,IAAI,CAACjC,SAAS,EAAE;QAChB,IAAI,CAACwE,SAAS,CAACtD,IAAI,CAAC;MACxB,CAAC,MACI;QACD,IAAI,CAACjB,aAAa,CAAC2C,IAAI,CAACnE,MAAM,CAACa,MAAM,CAAC4B,IAAI,CAAC,CAAC;MAChD;IACJ;EAAC;IAAA;IAAA,OACD,mBAAUA,IAAI,EAAE;MACZ,IAAI,IAAI,CAACuD,aAAa,IAAI,IAAI,CAACA,aAAa,CAACzC,MAAM,EAAE;QACjD,IAAM0C,SAAS,GAAG,IAAI,CAACD,aAAa,CAACE,KAAK,EAAE;QAAC,2CACtBD,SAAS;UAAA;QAAA;UAAhC,oDAAkC;YAAA,IAAvBE,QAAQ;YACfA,QAAQ,CAACvD,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;UAC9B;QAAC;UAAA;QAAA;UAAA;QAAA;MACL;MACA,sDAAWG,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IAChC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,aAAIe,EAAE,EAAE;MACJ,IAAM4C,IAAI,GAAG,IAAI;MACjB,IAAIC,IAAI,GAAG,KAAK;MAChB,OAAO,YAAmB;QACtB;QACA,IAAIA,IAAI,EACJ;QACJA,IAAI,GAAG,IAAI;QAAC,mCAJI5D,IAAI;UAAJA,IAAI;QAAA;QAKpB/B,KAAK,CAAC,gBAAgB,EAAE+B,IAAI,CAAC;QAC7B2D,IAAI,CAACpD,MAAM,CAAC;UACRC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAU,CAACqC,GAAG;UACvC/B,EAAE,EAAEA,EAAE;UACNJ,IAAI,EAAEX;QACV,CAAC,CAAC;MACN,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,eAAMO,MAAM,EAAE;MACV,IAAMS,GAAG,GAAG,IAAI,CAAC9B,IAAI,CAACqB,MAAM,CAACQ,EAAE,CAAC;MAChC,IAAI,UAAU,KAAK,OAAOC,GAAG,EAAE;QAC3B/C,KAAK,CAAC,wBAAwB,EAAEsC,MAAM,CAACQ,EAAE,EAAER,MAAM,CAACI,IAAI,CAAC;QACvDK,GAAG,CAACb,KAAK,CAAC,IAAI,EAAEI,MAAM,CAACI,IAAI,CAAC;QAC5B,OAAO,IAAI,CAACzB,IAAI,CAACqB,MAAM,CAACQ,EAAE,CAAC;MAC/B,CAAC,MACI;QACD9C,KAAK,CAAC,YAAY,EAAEsC,MAAM,CAACQ,EAAE,CAAC;MAClC;IACJ;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,mBAAUA,EAAE,EAAE;MACV9C,KAAK,CAAC,6BAA6B,EAAE8C,EAAE,CAAC;MACxC,IAAI,CAACA,EAAE,GAAGA,EAAE;MACZ,IAAI,CAACjC,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC+E,YAAY,EAAE;MACnB,IAAI,CAACvB,YAAY,CAAC,SAAS,CAAC;IAChC;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,wBAAe;MAAA;MACX,IAAI,CAACvD,aAAa,CAAC+E,OAAO,CAAC,UAAC9D,IAAI;QAAA,OAAK,MAAI,CAACsD,SAAS,CAACtD,IAAI,CAAC;MAAA,EAAC;MAC1D,IAAI,CAACjB,aAAa,GAAG,EAAE;MACvB,IAAI,CAACC,UAAU,CAAC8E,OAAO,CAAC,UAACvD,MAAM,EAAK;QAChC,MAAI,CAACkB,uBAAuB,CAAClB,MAAM,CAAC;QACpC,MAAI,CAACA,MAAM,CAACA,MAAM,CAAC;MACvB,CAAC,CAAC;MACF,IAAI,CAACvB,UAAU,GAAG,EAAE;IACxB;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,wBAAe;MACXf,KAAK,CAAC,wBAAwB,EAAE,IAAI,CAACW,GAAG,CAAC;MACzC,IAAI,CAACwE,OAAO,EAAE;MACd,IAAI,CAACvD,OAAO,CAAC,sBAAsB,CAAC;IACxC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,mBAAU;MACN,IAAI,IAAI,CAACN,IAAI,EAAE;QACX;QACA,IAAI,CAACA,IAAI,CAACuE,OAAO,CAAC,UAACC,UAAU;UAAA,OAAKA,UAAU,EAAE;QAAA,EAAC;QAC/C,IAAI,CAACxE,IAAI,GAAGqC,SAAS;MACzB;MACA,IAAI,CAACjD,EAAE,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;IAC7B;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,sBAAa;MACT,IAAI,IAAI,CAACG,SAAS,EAAE;QAChBb,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAACW,GAAG,CAAC;QAC7C,IAAI,CAAC2B,MAAM,CAAC;UAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAU,CAACwC;QAAW,CAAC,CAAC;MACnE;MACA;MACA,IAAI,CAACG,OAAO,EAAE;MACd,IAAI,IAAI,CAACtE,SAAS,EAAE;QAChB;QACA,IAAI,CAACe,OAAO,CAAC,sBAAsB,CAAC;MACxC;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,iBAAQ;MACJ,OAAO,IAAI,CAACtB,UAAU,EAAE;IAC5B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,kBAASsC,SAAQ,EAAE;MACf,IAAI,CAAC1B,KAAK,CAAC0B,QAAQ,GAAGA,SAAQ;MAC9B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,KAOA,eAAe;MACX,IAAI,CAAC1B,KAAK,CAACqC,QAAQ,GAAG,IAAI;MAC1B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdI;IAAA;IAAA,OAeA,iBAAQG,QAAO,EAAE;MACb,IAAI,CAACxC,KAAK,CAACwC,OAAO,GAAGA,QAAO;MAC5B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,eAAM+B,QAAQ,EAAE;MACZ,IAAI,CAACH,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,EAAE;MAC7C,IAAI,CAACA,aAAa,CAAC7B,IAAI,CAACgC,QAAQ,CAAC;MACjC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,oBAAWA,QAAQ,EAAE;MACjB,IAAI,CAACH,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,EAAE;MAC7C,IAAI,CAACA,aAAa,CAACtD,OAAO,CAACyD,QAAQ,CAAC;MACpC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gBAAOA,QAAQ,EAAE;MACb,IAAI,CAAC,IAAI,CAACH,aAAa,EAAE;QACrB,OAAO,IAAI;MACf;MACA,IAAIG,QAAQ,EAAE;QACV,IAAMF,SAAS,GAAG,IAAI,CAACD,aAAa;QACpC,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,SAAS,CAAC1C,MAAM,EAAEiB,CAAC,EAAE,EAAE;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAC,CAAC,EAAE;YAC3ByB,SAAS,CAACxB,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;YACtB,OAAO,IAAI;UACf;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACwB,aAAa,GAAG,EAAE;MAC3B;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,wBAAe;MACX,OAAO,IAAI,CAACA,aAAa,IAAI,EAAE;IACnC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfI;IAAA;IAAA,OAgBA,uBAAcG,QAAQ,EAAE;MACpB,IAAI,CAACM,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,EAAE;MAC7D,IAAI,CAACA,qBAAqB,CAACtC,IAAI,CAACgC,QAAQ,CAAC;MACzC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfI;IAAA;IAAA,OAgBA,4BAAmBA,QAAQ,EAAE;MACzB,IAAI,CAACM,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,EAAE;MAC7D,IAAI,CAACA,qBAAqB,CAAC/D,OAAO,CAACyD,QAAQ,CAAC;MAC5C,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAnBI;IAAA;IAAA,OAoBA,wBAAeA,QAAQ,EAAE;MACrB,IAAI,CAAC,IAAI,CAACM,qBAAqB,EAAE;QAC7B,OAAO,IAAI;MACf;MACA,IAAIN,QAAQ,EAAE;QACV,IAAMF,SAAS,GAAG,IAAI,CAACQ,qBAAqB;QAC5C,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,SAAS,CAAC1C,MAAM,EAAEiB,CAAC,EAAE,EAAE;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAC,CAAC,EAAE;YAC3ByB,SAAS,CAACxB,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;YACtB,OAAO,IAAI;UACf;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACiC,qBAAqB,GAAG,EAAE;MACnC;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,gCAAuB;MACnB,OAAO,IAAI,CAACA,qBAAqB,IAAI,EAAE;IAC3C;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,iCAAwBzD,MAAM,EAAE;MAC5B,IAAI,IAAI,CAACyD,qBAAqB,IAAI,IAAI,CAACA,qBAAqB,CAAClD,MAAM,EAAE;QACjE,IAAM0C,SAAS,GAAG,IAAI,CAACQ,qBAAqB,CAACP,KAAK,EAAE;QAAC,4CAC9BD,SAAS;UAAA;QAAA;UAAhC,uDAAkC;YAAA,IAAvBE,QAAQ;YACfA,QAAQ,CAACvD,KAAK,CAAC,IAAI,EAAEI,MAAM,CAACI,IAAI,CAAC;UACrC;QAAC;UAAA;QAAA;UAAA;QAAA;MACL;IACJ;EAAC;EAAA;AAAA,EA7kBgB5C,mBAAmB,CAACkG,OAAO;AA+kBhDxG,OAAO,CAACE,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}