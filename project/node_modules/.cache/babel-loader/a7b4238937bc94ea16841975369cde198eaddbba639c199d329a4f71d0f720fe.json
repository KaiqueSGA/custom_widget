{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/yudji/OneDrive/Documentos/SGA/WIDGETS/mqtt_wid/dash_mqtt/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = void 0;\nvar common_1 = require(\"./common\");\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var newStructure = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_legend: true,\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"semidonut\"\n  };\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (item.is_hide) {\n          // is_hide items are not visible, so we cannot\n          // put them in the variables array\n          continue;\n        }\n        var _iterator2 = _createForOfIteratorHelper(item === null || item === void 0 ? void 0 : item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$vars_labe, _oldDisplay$vars_form;\n            var variable = _step2.value;\n            var key = \"\".concat(item.origin).concat(variable);\n            var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[key];\n            var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[key];\n            var color = common_1.chartColors.find(function (e) {\n              return !newStructure.display.variables.find(function (v) {\n                return (v === null || v === void 0 ? void 0 : v.color) === e;\n              });\n            }) || \"#999\";\n            newStructure.display.variables.push(_objectSpread(_objectSpread({\n              color: color,\n              origin: item.origin,\n              variable: variable\n            }, alias ? {\n              alias: alias\n            } : {}), numberFormat ? {\n              number_format: numberFormat\n            } : {}));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4, _widget$display5, _widget$display6;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.numberformat || (widget === null || widget === void 0 ? void 0 : (_widget$display4 = widget.display) === null || _widget$display4 === void 0 ? void 0 : _widget$display4.hide_variables) !== undefined || (widget === null || widget === void 0 ? void 0 : (_widget$display5 = widget.display) === null || _widget$display5 === void 0 ? void 0 : _widget$display5.watermark) !== undefined || widget !== null && widget !== void 0 && (_widget$display6 = widget.display) !== null && _widget$display6 !== void 0 && _widget$display6.pie_type);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["convert","oldWidget","oldDisplay","display","newStructure","dashboard","header_buttons","help","show_legend","variables","id","label","realtime","type","Array","isArray","data","item","is_hide","variable","key","origin","alias","vars_labels","numberFormat","vars_format","color","common_1","find","e","v","push","number_format","exports","isOldStructure","widget","isOld","numberformat","hide_variables","undefined","watermark","pie_type"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\semidonut.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old SEMIDONUT to new SEMIDONUT\n// ? ====================================================================================\nimport { WidgetInfo } from \"../Account/dashboards.types\";\nimport { chartColors } from \"./common\";\n\nexport function convert(oldWidget: any): WidgetInfo {\n  const oldDisplay = oldWidget.display || {};\n\n  const newStructure: any = {\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      show_legend: true,\n      variables: [],\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: null,\n    type: \"semidonut\",\n  };\n\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n\n    newStructure.display.variables = []; // creates the variable array\n\n    for (const item of oldWidget.data) {\n      if (item.is_hide) {\n        // is_hide items are not visible, so we cannot\n        // put them in the variables array\n        continue;\n      }\n\n      for (const variable of item?.variables) {\n        const key = `${item.origin}${variable}`;\n\n        const alias = oldDisplay.vars_labels?.[key];\n        const numberFormat = oldDisplay.vars_format?.[key];\n        const color =\n          chartColors.find((e) => {\n            return !newStructure.display.variables.find((v: any) => v?.color === e);\n          }) || \"#999\";\n\n        newStructure.display.variables.push({\n          color,\n          origin: item.origin,\n          variable,\n          ...(alias ? { alias } : {}),\n          ...(numberFormat ? { number_format: numberFormat } : {}),\n        });\n      }\n    }\n  }\n\n  return newStructure;\n}\n\nexport function isOldStructure(widget: any) {\n  const isOld = !!(\n    widget?.display?.vars_labels ||\n    widget?.display?.vars_format ||\n    widget?.display?.numberformat ||\n    widget?.display?.hide_variables !== undefined ||\n    widget?.display?.watermark !== undefined ||\n    widget?.display?.pie_type\n  );\n\n  return isOld;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}