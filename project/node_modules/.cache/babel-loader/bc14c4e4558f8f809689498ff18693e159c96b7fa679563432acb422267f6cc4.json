{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst Access_1 = __importDefault(require(\"./Access\"));\nconst Actions_1 = __importDefault(require(\"./Actions\"));\nconst Analyses_1 = __importDefault(require(\"./Analyses\"));\nconst Billing_1 = __importDefault(require(\"./Billing\"));\nconst Buckets_1 = __importDefault(require(\"./Buckets\"));\nconst Dashboards_1 = __importDefault(require(\"./Dashboards\"));\nconst Devices_1 = __importDefault(require(\"./Devices\"));\nconst Dictionaries_1 = __importDefault(require(\"./Dictionaries\"));\nconst Explore_1 = __importDefault(require(\"./Explore\"));\nconst Files_1 = __importDefault(require(\"./Files\"));\nconst Notifications_1 = __importDefault(require(\"./Notifications\"));\nconst PaymentHistory_1 = __importDefault(require(\"./PaymentHistory\"));\nconst PaymentMethods_1 = __importDefault(require(\"./PaymentMethods\"));\nconst Plan_1 = __importDefault(require(\"./Plan\"));\nconst Profile_1 = __importDefault(require(\"./Profile\"));\nconst Run_1 = __importDefault(require(\"./Run\"));\nconst ServiceAuthorization_1 = __importDefault(require(\"./ServiceAuthorization\"));\nconst Tags_1 = __importDefault(require(\"./Tags\"));\nconst Template_1 = __importDefault(require(\"./Template\"));\nconst Integration_1 = __importDefault(require(\"./Integration\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nconst TagoCores_1 = __importDefault(require(\"./TagoCores\"));\n/**\n * To set up an account object, you need a token that you need to get from our\n * admin website and the region. Make sure to use tokens with the correct\n * write/read privileges for the current function that you want to use.\n *\n * @class Account\n * @extends {TagoIOModule<GenericModuleParams>}\n */\nclass Account extends TagoIOModule_1.default {\n  constructor() {\n    super(...arguments);\n    /**\n     * Manage actions in account.\n     * Be sure to use an account token with “write” permissions when\n     * using functions like create, edit and delete.\n     */\n    this.actions = new Actions_1.default(this.params);\n    /**\n     * Manage analysis in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.analysis = new Analyses_1.default(this.params);\n    /**\n     * Manage buckets in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.buckets = new Buckets_1.default(this.params);\n    /**\n     * Manage files in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.files = new Files_1.default(this.params);\n    /**\n     * Manage dashboards in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.dashboards = new Dashboards_1.default(this.params);\n    /**\n     * Manage devices in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.devices = new Devices_1.default(this.params);\n    /**\n     * Manage dictionaries in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.dictionaries = new Dictionaries_1.default(this.params);\n    /**\n     * Manage Billing for the account.\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.billing = new Billing_1.default(this.params);\n    /**\n     * Manage notifications in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.notifications = new Notifications_1.default(this.params);\n    /**\n     * Manage tags in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.tags = new Tags_1.default(this.params);\n    /**\n     * Manage payment methods in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.paymentMethods = new PaymentMethods_1.default(this.params);\n    /**\n     * Manage account plans\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.plan = new Plan_1.default(this.params);\n    /**\n     * Manage payment history in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.paymentHistory = new PaymentHistory_1.default(this.params);\n    /**\n     * Manage explore in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.explore = new Explore_1.default(this.params);\n    /**\n     * Manage connectors in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.integration = new Integration_1.default(this.params);\n    /**\n     * Manage templates in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.template = new Template_1.default(this.params);\n    /**\n     * Manage access in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.accessManagement = new Access_1.default(this.params);\n    /**\n     * Manage run apps in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     *\n     */\n    this.run = new Run_1.default(this.params);\n    /**\n     * Manage services in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.ServiceAuthorization = new ServiceAuthorization_1.default(this.params);\n    /**\n     * Manage profiles in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.profiles = new Profile_1.default(this.params);\n    /**\n     * Manage tagocores in account\n     * Be sure to use an account token with “write” permissions when using\n     * functions like create, edit and delete.\n     */\n    this.tagocores = new TagoCores_1.default(this.params);\n  }\n  /**\n   * Gets all account information\n   */\n  async info() {\n    let result = await this.doRequest({\n      path: \"/account\",\n      method: \"GET\"\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\", \"last_login\"]);\n    if (result.options) result.options = (0, dateParser_1.default)(result.options, [\"last_whats_new\"]);\n    return result;\n  }\n  /**\n   * Edit account\n   * @param accountObj Account data to edit\n   */\n  async edit(accountObj) {\n    const result = await this.doRequest({\n      path: \"/account\",\n      method: \"PUT\",\n      body: accountObj\n    });\n    return result;\n  }\n  /**\n   * Delete account\n   */\n  async delete() {\n    const result = await this.doRequest({\n      path: \"/account\",\n      method: \"DELETE\"\n    });\n    return result;\n  }\n  /**\n   * Generates and retrieves a new token for the account\n   * @param tokenParams Token data\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async tokenCreate(tokenParams, region) {\n    const params = {\n      path: \"/account/profile/token\",\n      method: \"POST\",\n      body: tokenParams\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Retrieve list of profiles for login and do Login\n   * @param credentials Credentials\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async login(credentials, region) {\n    const params = {\n      path: \"/account/login\",\n      method: \"POST\",\n      body: credentials\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Send password recover email\n   * @param email E-mail to recovery\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async passwordRecover(email, region) {\n    const params = {\n      path: `/account/passwordreset/${email}`,\n      method: \"GET\"\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Change account password\n   * @param password New Password\n   */\n  async passwordChange(password) {\n    const result = await this.doRequest({\n      path: `/account/passwordreset`,\n      method: \"POST\",\n      body: {\n        password\n      }\n    });\n    return result;\n  }\n  /**\n   * Create new TagoIO account\n   * @param createParams New account details\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async create(createParams, region) {\n    const params = {\n      path: `/account`,\n      method: \"POST\",\n      body: createParams\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   *  Re-send confirmation account email\n   * @param email E-mail address\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async resendConfirmation(email, region) {\n    const params = {\n      path: `/account/resend_confirmation/${email}`,\n      method: \"GET\"\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Confirm account creation\n   * @param token Confirmation token\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  static async confirmAccount(token, region) {\n    const params = {\n      path: `/account/confirm/${token}`,\n      method: \"GET\"\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Request the PIN Code for a given OTP Type.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  static async requestLoginPINCode(credentials, typeOTP, region) {\n    const params = {\n      path: `/account/login/otp`,\n      method: \"POST\",\n      body: {\n        ...credentials,\n        otp_type: typeOTP\n      }\n    };\n    const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);\n    return result;\n  }\n  /**\n   * Enable OTP for a given OTP Type.\n   * You will be requested to confirm the operation with a pin code.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async enableOTP(credentials, typeOTP) {\n    const result = await this.doRequest({\n      path: `/account/otp/${typeOTP}/enable`,\n      method: \"POST\",\n      body: credentials\n    });\n    return result;\n  }\n  /**\n   * Enable OTP for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async disableOTP(credentials, typeOTP) {\n    const result = await this.doRequest({\n      path: `/account/otp/${typeOTP}/disable`,\n      method: \"POST\",\n      body: credentials\n    });\n    return result;\n  }\n  /**\n   * Confirm OTP enabling process for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  async confirmOTP(pinCode, typeOTP) {\n    const result = await this.doRequest({\n      path: `/account/otp/${typeOTP}/confirm`,\n      method: \"POST\",\n      body: {\n        pin_code: pinCode\n      }\n    });\n    return result;\n  }\n}\nexports.default = Account;","map":{"version":3,"mappings":"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","names":["Account","TagoIOModule_1","constructor","Actions_1","params","Analyses_1","Buckets_1","Files_1","Dashboards_1","Devices_1","Dictionaries_1","Billing_1","Notifications_1","Tags_1","PaymentMethods_1","Plan_1","PaymentHistory_1","Explore_1","Integration_1","Template_1","Access_1","Run_1","ServiceAuthorization_1","Profile_1","TagoCores_1","info","result","doRequest","path","method","options","edit","accountObj","body","delete","tokenCreate","tokenParams","region","doRequestAnonymous","login","credentials","passwordRecover","email","passwordChange","password","create","createParams","resendConfirmation","confirmAccount","token","requestLoginPINCode","typeOTP","otp_type","enableOTP","disableOTP","confirmOTP","pinCode","pin_code","exports"],"sources":["C:\\Users\\yudji\\OneDrive\\Documentos\\SGA\\WIDGETS\\mqtt_wid\\dash_mqtt\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Account.ts"],"sourcesContent":["import { GenericToken } from \"../../common/common.types\";\nimport TagoIOModule, { GenericModuleParams, doRequestParams } from \"../../common/TagoIOModule\";\nimport Access from \"./Access\";\nimport { AccountCreateInfo, AccountInfo, LoginResponse, OTPType, TokenCreateInfo } from \"./account.types\";\nimport Actions from \"./Actions\";\nimport Analyses from \"./Analyses\";\nimport Billing from \"./Billing\";\nimport Buckets from \"./Buckets\";\nimport Dashboards from \"./Dashboards\";\nimport Devices from \"./Devices\";\nimport Dictionaries from \"./Dictionaries\";\nimport Explore from \"./Explore\";\nimport Files from \"./Files\";\nimport Notifications from \"./Notifications\";\nimport PaymentHistory from \"./PaymentHistory\";\nimport PaymentMethods from \"./PaymentMethods\";\nimport Plan from \"./Plan\";\nimport Profile from \"./Profile\";\nimport Run from \"./Run\";\nimport ServiceAuthorization from \"./ServiceAuthorization\";\nimport Tags from \"./Tags\";\nimport Template from \"./Template\";\nimport { Regions } from \"../../regions\";\nimport Integration from \"./Integration\";\nimport dateParser from \"../Utils/dateParser\";\nimport TagoCores from \"./TagoCores\";\n\n/**\n * To set up an account object, you need a token that you need to get from our\n * admin website and the region. Make sure to use tokens with the correct\n * write/read privileges for the current function that you want to use.\n *\n * @class Account\n * @extends {TagoIOModule<GenericModuleParams>}\n */\nclass Account extends TagoIOModule<GenericModuleParams> {\n  /**\n   * Gets all account information\n   */\n  public async info(): Promise<AccountInfo> {\n    let result = await this.doRequest<AccountInfo>({\n      path: \"/account\",\n      method: \"GET\",\n    });\n\n    result = dateParser(result, [\"created_at\", \"updated_at\", \"last_login\"]);\n\n    if (result.options) result.options = dateParser(result.options, [\"last_whats_new\"]);\n\n    return result;\n  }\n\n  /**\n   * Edit account\n   * @param accountObj Account data to edit\n   */\n  public async edit(accountObj: Partial<AccountInfo>): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: \"/account\",\n      method: \"PUT\",\n      body: accountObj,\n    });\n\n    return result;\n  }\n\n  /**\n   * Delete account\n   */\n  public async delete(): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: \"/account\",\n      method: \"DELETE\",\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates and retrieves a new token for the account\n   * @param tokenParams Token data\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async tokenCreate(tokenParams: TokenCreateInfo, region?: Regions): Promise<{ token: GenericToken }> {\n    const params: doRequestParams = {\n      path: \"/account/profile/token\",\n      method: \"POST\",\n      body: tokenParams,\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<{ token: GenericToken }>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Retrieve list of profiles for login and do Login\n   * @param credentials Credentials\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async login(\n    credentials: { email: string; password: string },\n    region?: Regions\n  ): Promise<LoginResponse> {\n    const params: doRequestParams = {\n      path: \"/account/login\",\n      method: \"POST\",\n      body: credentials,\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<LoginResponse>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Send password recover email\n   * @param email E-mail to recovery\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async passwordRecover(email: string, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/account/passwordreset/${email}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Change account password\n   * @param password New Password\n   */\n  public async passwordChange(password: string): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/account/passwordreset`,\n      method: \"POST\",\n      body: {\n        password,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Create new TagoIO account\n   * @param createParams New account details\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async create(createParams: AccountCreateInfo, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/account`,\n      method: \"POST\",\n      body: createParams,\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   *  Re-send confirmation account email\n   * @param email E-mail address\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async resendConfirmation(email: string, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/account/resend_confirmation/${email}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Confirm account creation\n   * @param token Confirmation token\n   * @param region TagoIO Region Server [default usa-1]\n   */\n  public static async confirmAccount(token: GenericToken, region?: Regions): Promise<string> {\n    const params: doRequestParams = {\n      path: `/account/confirm/${token}`,\n      method: \"GET\",\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Request the PIN Code for a given OTP Type.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public static async requestLoginPINCode(\n    credentials: { email: string; password: string },\n    typeOTP: OTPType,\n    region?: Regions\n  ): Promise<string> {\n    const params: doRequestParams = {\n      path: `/account/login/otp`,\n      method: \"POST\",\n      body: { ...credentials, otp_type: typeOTP },\n    };\n\n    const result = await TagoIOModule.doRequestAnonymous<string>(params, region);\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type.\n   * You will be requested to confirm the operation with a pin code.\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async enableOTP(credentials: { email: string; password: string }, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/account/otp/${typeOTP}/enable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Enable OTP for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async disableOTP(credentials: { email: string; password: string }, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/account/otp/${typeOTP}/disable`,\n      method: \"POST\",\n      body: credentials,\n    });\n\n    return result;\n  }\n\n  /**\n   * Confirm OTP enabling process for a given OTP Type\n   * @param credentials Credentials\n   * @param typeOTP authenticator, sms or email\n   */\n  public async confirmOTP(pinCode: string, typeOTP: OTPType): Promise<string> {\n    const result = await this.doRequest<string>({\n      path: `/account/otp/${typeOTP}/confirm`,\n      method: \"POST\",\n      body: {\n        pin_code: pinCode,\n      },\n    });\n\n    return result;\n  }\n\n  /**\n   * Manage actions in account.\n   * Be sure to use an account token with “write” permissions when\n   * using functions like create, edit and delete.\n   */\n  public actions = new Actions(this.params);\n\n  /**\n   * Manage analysis in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public analysis = new Analyses(this.params);\n\n  /**\n   * Manage buckets in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public buckets = new Buckets(this.params);\n\n  /**\n   * Manage files in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public files = new Files(this.params);\n\n  /**\n   * Manage dashboards in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public dashboards = new Dashboards(this.params);\n\n  /**\n   * Manage devices in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public devices = new Devices(this.params);\n\n  /**\n   * Manage dictionaries in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public dictionaries = new Dictionaries(this.params);\n\n  /**\n   * Manage Billing for the account.\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public billing = new Billing(this.params);\n\n  /**\n   * Manage notifications in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public notifications = new Notifications(this.params);\n\n  /**\n   * Manage tags in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public tags = new Tags(this.params);\n\n  /**\n   * Manage payment methods in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public paymentMethods = new PaymentMethods(this.params);\n\n  /**\n   * Manage account plans\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public plan = new Plan(this.params);\n  /**\n   * Manage payment history in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public paymentHistory = new PaymentHistory(this.params);\n\n  /**\n   * Manage explore in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public explore = new Explore(this.params);\n\n  /**\n   * Manage connectors in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public integration = new Integration(this.params);\n\n  /**\n   * Manage templates in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public template = new Template(this.params);\n\n  /**\n   * Manage access in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public accessManagement = new Access(this.params);\n\n  /**\n   * Manage run apps in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   *\n   */\n  public run = new Run(this.params);\n\n  /**\n   * Manage services in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public ServiceAuthorization = new ServiceAuthorization(this.params);\n\n  /**\n   * Manage profiles in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public profiles = new Profile(this.params);\n\n  /**\n   * Manage tagocores in account\n   * Be sure to use an account token with “write” permissions when using\n   * functions like create, edit and delete.\n   */\n  public tagocores = new TagoCores(this.params);\n}\n\nexport default Account;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}