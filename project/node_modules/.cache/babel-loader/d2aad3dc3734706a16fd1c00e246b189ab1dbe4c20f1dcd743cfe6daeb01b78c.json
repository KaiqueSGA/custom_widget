{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst TagoIOModule_1 = __importDefault(require(\"../../common/TagoIOModule\"));\nconst dateParser_1 = __importDefault(require(\"../Utils/dateParser\"));\nclass Connectors extends TagoIOModule_1.default {\n  /**\r\n   * Retrieves a list with all connectors from account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\n  async list(queryObj) {\n    let result = await this.doRequest({\n      path: \"/integration/connector/\",\n      method: \"GET\",\n      params: {\n        page: queryObj?.page || 1,\n        fields: queryObj?.fields || [\"id\", \"name\"],\n        filter: queryObj?.filter || {},\n        amount: queryObj?.amount || 20,\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\"\n      }\n    });\n    result = result.map(data => (0, dateParser_1.default)(data, [\"created_at\", \"updated_at\"]));\n    return result;\n  }\n  /**\r\n   * Get Info of the Connector\r\n   * @param connectorID Connector identification\r\n   * @param fields Fields to fetch.\r\n   */\n  async info(connectorID, fields) {\n    let result = await this.doRequest({\n      path: `/integration/connector/${connectorID}`,\n      method: \"GET\",\n      params: {\n        fields\n      }\n    });\n    result = (0, dateParser_1.default)(result, [\"created_at\", \"updated_at\"]);\n    return result;\n  }\n  /**\r\n   * Generates and retrieves a new connector from the account\r\n   * @param connectorObj Object data to create new Connector\r\n   */\n  async create(connectorObj) {\n    const result = await this.doRequest({\n      path: `/integration/connector/`,\n      method: \"POST\",\n      body: {\n        ...connectorObj\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Modify any property of the connector\r\n   * @param connectorID Connector identification\r\n   * @param connectorObj Object data to create new Connector\r\n   */\n  async edit(connectorID, connectorObj) {\n    const result = await this.doRequest({\n      path: `/integration/connector/${connectorID}`,\n      method: \"PUT\",\n      body: {\n        ...connectorObj\n      }\n    });\n    return result;\n  }\n}\nexports.default = Connectors;","map":{"version":3,"mappings":";;;;;;;;;;AACA;AACA;AAGA,MAAMA,UAAW,SAAQC,sBAAiC;EACxD;;;;;;;;;;;;;;EAcO,MAAMC,IAAI,CAACC,QAAyB;IACzC,IAAIC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAkB;MACjDC,IAAI,EAAE,yBAAyB;MAC/BC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNC,IAAI,EAAEN,QAAQ,EAAEM,IAAI,IAAI,CAAC;QACzBC,MAAM,EAAEP,QAAQ,EAAEO,MAAM,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;QAC1CC,MAAM,EAAER,QAAQ,EAAEQ,MAAM,IAAI,EAAE;QAC9BC,MAAM,EAAET,QAAQ,EAAES,MAAM,IAAI,EAAE;QAC9BC,OAAO,EAAEV,QAAQ,EAAEU,OAAO,GAAG,GAAGV,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,IAAIV,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG;;KAElF,CAAC;IAEFT,MAAM,GAAGA,MAAM,CAACU,GAAG,CAAEC,IAAI,IAAK,wBAAU,EAACA,IAAI,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;IAE7E,OAAOX,MAAM;EACf;EAEA;;;;;EAKO,MAAMY,IAAI,CAACC,WAAsB,EAAEP,MAAiB;IACzD,IAAIN,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAgB;MAC/CC,IAAI,EAAE,0BAA0BW,WAAW,EAAE;MAC7CV,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;QACNE;;KAEH,CAAC;IAEFN,MAAM,GAAG,wBAAU,EAACA,MAAM,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAEzD,OAAOA,MAAM;EACf;EAEA;;;;EAIO,MAAMc,MAAM,CAACC,YAAiC;IACnD,MAAMf,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAA2B;MAC5DC,IAAI,EAAE,yBAAyB;MAC/BC,MAAM,EAAE,MAAM;MACda,IAAI,EAAE;QACJ,GAAGD;;KAEN,CAAC;IAEF,OAAOf,MAAM;EACf;EAEA;;;;;EAKO,MAAMiB,IAAI,CAACJ,WAAsB,EAAEE,YAA0C;IAClF,MAAMf,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAAS;MAC1CC,IAAI,EAAE,0BAA0BW,WAAW,EAAE;MAC7CV,MAAM,EAAE,KAAK;MACba,IAAI,EAAE;QACJ,GAAGD;;KAEN,CAAC;IAEF,OAAOf,MAAM;EACf;;AAGFkB,kBAAetB,UAAU","names":["Connectors","TagoIOModule_1","list","queryObj","result","doRequest","path","method","params","page","fields","filter","amount","orderBy","map","data","info","connectorID","create","connectorObj","body","edit","exports"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Account\\Integration.Connectors.ts"],"sourcesContent":["import { GenericID } from \"../../common/common.types\";\r\nimport TagoIOModule, { GenericModuleParams } from \"../../common/TagoIOModule\";\r\nimport dateParser from \"../Utils/dateParser\";\r\nimport { ConnectorCreateInfo, ConnectorInfo, ConnectorQuery } from \"./integration.connectors.types\";\r\n\r\nclass Connectors extends TagoIOModule<GenericModuleParams> {\r\n  /**\r\n   * Retrieves a list with all connectors from account\r\n   * @default\r\n   * ```json\r\n   * queryObj: {\r\n   *   page: 1,\r\n   *   fields: [\"id\", \"name\"],\r\n   *   filter: {},\r\n   *   amount: 20,\r\n   *   orderBy: \"name,asc\",\r\n   * }\r\n   * ```\r\n   * @param queryObj Search query params\r\n   */\r\n  public async list(queryObj?: ConnectorQuery): Promise<ConnectorInfo[]> {\r\n    let result = await this.doRequest<ConnectorInfo[]>({\r\n      path: \"/integration/connector/\",\r\n      method: \"GET\",\r\n      params: {\r\n        page: queryObj?.page || 1,\r\n        fields: queryObj?.fields || [\"id\", \"name\"],\r\n        filter: queryObj?.filter || {},\r\n        amount: queryObj?.amount || 20,\r\n        orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : \"name,asc\",\r\n      },\r\n    });\r\n\r\n    result = result.map((data) => dateParser(data, [\"created_at\", \"updated_at\"]));\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get Info of the Connector\r\n   * @param connectorID Connector identification\r\n   * @param fields Fields to fetch.\r\n   */\r\n  public async info(connectorID: GenericID, fields?: string[]): Promise<ConnectorInfo> {\r\n    let result = await this.doRequest<ConnectorInfo>({\r\n      path: `/integration/connector/${connectorID}`,\r\n      method: \"GET\",\r\n      params: {\r\n        fields,\r\n      },\r\n    });\r\n\r\n    result = dateParser(result, [\"created_at\", \"updated_at\"]);\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates and retrieves a new connector from the account\r\n   * @param connectorObj Object data to create new Connector\r\n   */\r\n  public async create(connectorObj: ConnectorCreateInfo): Promise<{ connector: GenericID }> {\r\n    const result = await this.doRequest<{ connector: GenericID }>({\r\n      path: `/integration/connector/`,\r\n      method: \"POST\",\r\n      body: {\r\n        ...connectorObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Modify any property of the connector\r\n   * @param connectorID Connector identification\r\n   * @param connectorObj Object data to create new Connector\r\n   */\r\n  public async edit(connectorID: GenericID, connectorObj: Partial<ConnectorCreateInfo>): Promise<string> {\r\n    const result = await this.doRequest<string>({\r\n      path: `/integration/connector/${connectorID}`,\r\n      method: \"PUT\",\r\n      body: {\r\n        ...connectorObj,\r\n      },\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Connectors;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}