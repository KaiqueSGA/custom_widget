{"ast":null,"code":"\"use strict\";\n\n// ? ==================================== (c) TagoIO ====================================\n// * What is this file?\n//     Migration of old DYNAMIC_TABLE to new DYNAMIC_TABLE\n// ? ====================================================================================\nvar _objectSpread = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/kaique/Documents/SGA/widget/project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOldStructure = exports.convert = exports.dynamicTableConfig = void 0;\nvar common_1 = require(\"./common\");\nexports.dynamicTableConfig = {\n  cellFilterHeight: 56,\n  cellHeight: 28,\n  defaultControlColumn: {\n    alias: \"Controls\",\n    alignment: \"center\",\n    delete_cancel_text: \"Cancel\",\n    delete_confirm_text: \"Yes, delete row\",\n    delete_message: \"Do you really want to delete this row?\",\n    delete_title: \"Delete row\",\n    fixed_width: 33,\n    id: \"control\",\n    is_control: true,\n    overflow_behavior: \"stretch\",\n    show_delete: true,\n    show_edit: true,\n    size: \"fixed\"\n  },\n  defaultDateColumn: {\n    alias: \"Date and Time\",\n    allow_resize: true,\n    fixed_width: 100,\n    id: \"date\",\n    is_date: true,\n    overflow_behavior: \"stretch\",\n    size: \"auto\"\n  }\n};\nfunction convert(oldWidget) {\n  var oldDisplay = oldWidget.display || {};\n  var newStructure = {\n    analysis_run: oldWidget.analysis_run,\n    dashboard: oldWidget.dashboard,\n    display: {\n      header_buttons: oldDisplay.header_buttons || [],\n      help: oldDisplay.help || \"\",\n      max_rows: oldDisplay.max_rows || 10000,\n      search_position: \"whole\",\n      show_control: false,\n      show_search: oldDisplay.show_search,\n      show_time: oldDisplay.show_time,\n      theme: {\n        color: {}\n      },\n      variables: []\n    },\n    id: oldWidget.id,\n    label: oldWidget.label,\n    realtime: oldWidget.realtime,\n    type: \"dynamic_table\"\n  };\n  var showEdit = false;\n  var sequentialID = 0;\n  var createControlColumn = false;\n  if (oldDisplay.show_delete) {\n    createControlColumn = true;\n  }\n  if (Array.isArray(oldDisplay.intervals)) {\n    // transfer the intervals\n    newStructure.display.intervals = oldDisplay.intervals.map(common_1.convertInterval);\n  }\n  if (Array.isArray(oldWidget.data)) {\n    newStructure.data = oldWidget.data; // transfers the .data property\n    newStructure.display.variables = []; // creates the variable array\n    var _iterator = _createForOfIteratorHelper(oldWidget.data),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (item.is_hide) {\n          // is_hide items are not visible in the columns, so we cannot\n          // put them in the variables array\n          continue;\n        }\n        var _iterator2 = _createForOfIteratorHelper(item.variables),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _oldDisplay$vars_labe, _oldDisplay$vars_form, _oldDisplay$vars_form2, _oldDisplay$column_al, _oldDisplay$condition, _oldDisplay$vars_that, _oldDisplay$form, _oldDisplay$form$fiel;\n            var variable = _step2.value;\n            var key = \"\".concat(item.origin).concat(variable);\n            var keyReverse = \"\".concat(variable).concat(item.origin); // form fields use key in reverse\n            var alias = (_oldDisplay$vars_labe = oldDisplay.vars_labels) === null || _oldDisplay$vars_labe === void 0 ? void 0 : _oldDisplay$vars_labe[key];\n            var numberFormat = (_oldDisplay$vars_form = oldDisplay.vars_format) === null || _oldDisplay$vars_form === void 0 ? void 0 : _oldDisplay$vars_form[key];\n            var formula = (0, common_1.convertFormula)((_oldDisplay$vars_form2 = oldDisplay.vars_formula) === null || _oldDisplay$vars_form2 === void 0 ? void 0 : _oldDisplay$vars_form2[key]);\n            var alignment = ((_oldDisplay$column_al = oldDisplay.column_alignments) === null || _oldDisplay$column_al === void 0 ? void 0 : _oldDisplay$column_al[key]) || \"left\";\n            var iconConditions = (_oldDisplay$condition = oldDisplay.conditions) === null || _oldDisplay$condition === void 0 ? void 0 : _oldDisplay$condition[key];\n            var overrideColor = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.override_color;\n            var usesIcon = oldDisplay === null || oldDisplay === void 0 ? void 0 : (_oldDisplay$vars_that = oldDisplay.vars_that_have_conditions) === null || _oldDisplay$vars_that === void 0 ? void 0 : _oldDisplay$vars_that[key];\n            var allowResize = true;\n            var id = \"data:id:\".concat(++sequentialID);\n            var data = {\n              origin: item.origin,\n              variable: variable\n            };\n            var formField = (_oldDisplay$form = oldDisplay.form) === null || _oldDisplay$form === void 0 ? void 0 : (_oldDisplay$form$fiel = _oldDisplay$form.fields) === null || _oldDisplay$form$fiel === void 0 ? void 0 : _oldDisplay$form$fiel[keyReverse];\n            var edit = createEditObject(formField);\n            if (edit !== null && edit !== void 0 && edit.enabled) {\n              createControlColumn = true;\n              showEdit = true;\n            }\n            var column = {\n              alignment: alignment,\n              allow_resize: allowResize,\n              content_type: usesIcon ? \"icon\" : \"value\",\n              data: data,\n              id: id,\n              override_color: overrideColor || false\n            };\n            if (iconConditions) {\n              column.icon_conditions = iconConditions;\n            }\n            if (alias) {\n              column.alias = alias;\n            }\n            if (numberFormat && Object.keys(numberFormat).length > 0) {\n              column.number_format = numberFormat;\n            }\n            if (formula) {\n              column.formula = formula;\n            }\n            if (edit) {\n              column.edit = edit;\n            }\n            newStructure.display.variables.push(column);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  // here we verify if the show_time parameter is true, and if it is\n  // we need to create a new column to hold the dates information\n  if (newStructure.display.show_time) {\n    // create a new column for date/times\n    var dateColumn = exports.dynamicTableConfig.defaultDateColumn;\n    newStructure.display.variables.push(dateColumn);\n  }\n  // here we verify if the createControlColumn parameter is true, and if it is\n  // we need to create a new column to hold the control information\n  if (createControlColumn) {\n    // create a new column for control\n    var controlColumn = _objectSpread(_objectSpread({}, exports.dynamicTableConfig.defaultControlColumn), {}, {\n      show_delete: oldDisplay.show_delete,\n      show_edit: showEdit,\n      show_edit_modal: oldDisplay.show_edit_modal\n    });\n    if (oldDisplay.messageDeleteRow) {\n      // if the message was informed, use the one that the use informed\n      controlColumn.delete_message = oldDisplay.messageDeleteRow;\n    }\n    newStructure.display.variables.push(controlColumn);\n    newStructure.display.show_control = true;\n  }\n  return newStructure;\n}\nexports.convert = convert;\nfunction createEditObject(formField) {\n  if (!formField) {\n    return null;\n  }\n  var edit = {\n    enabled: formField.editable || false,\n    required: formField.required || false,\n    show_label: formField.show_label || false,\n    type: formField.fieldtype || \"text\"\n  };\n  if (formField.options) {\n    edit.options = formField.options;\n  }\n  if (formField.use_values_from === \"variable\") {\n    edit.use_values_from = \"variable\";\n  }\n  if (formField.use_variable) {\n    var _formField$use_variab, _formField$use_variab2, _formField$use_variab3, _formField$use_variab4;\n    edit.use_values_from_variable = {\n      origin: ((_formField$use_variab = formField.use_variable) === null || _formField$use_variab === void 0 ? void 0 : (_formField$use_variab2 = _formField$use_variab.origin) === null || _formField$use_variab2 === void 0 ? void 0 : _formField$use_variab2.id) || ((_formField$use_variab3 = formField.use_variable) === null || _formField$use_variab3 === void 0 ? void 0 : _formField$use_variab3.origin),\n      variable: (_formField$use_variab4 = formField.use_variable) === null || _formField$use_variab4 === void 0 ? void 0 : _formField$use_variab4.variable\n    };\n    if (typeof edit.use_values_from_variable.origin !== \"string\") {\n      // origin has to be a string. If it's not, then something went wrong\n      // during the formula conversion.\n      edit.use_values_from_variable = null;\n    }\n  }\n  return edit;\n}\nfunction isOldStructure(widget) {\n  var _widget$display, _widget$display2, _widget$display3, _widget$display4, _widget$display5;\n  var isOld = !!(widget !== null && widget !== void 0 && (_widget$display = widget.display) !== null && _widget$display !== void 0 && _widget$display.vars_labels || widget !== null && widget !== void 0 && (_widget$display2 = widget.display) !== null && _widget$display2 !== void 0 && _widget$display2.vars_format || widget !== null && widget !== void 0 && (_widget$display3 = widget.display) !== null && _widget$display3 !== void 0 && _widget$display3.vars_formula || widget !== null && widget !== void 0 && (_widget$display4 = widget.display) !== null && _widget$display4 !== void 0 && _widget$display4.conditions || widget !== null && widget !== void 0 && (_widget$display5 = widget.display) !== null && _widget$display5 !== void 0 && _widget$display5.form);\n  return isOld;\n}\nexports.isOldStructure = isOldStructure;","map":{"version":3,"mappings":"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","names":["exports","cellFilterHeight","cellHeight","defaultControlColumn","alias","alignment","delete_cancel_text","delete_confirm_text","delete_message","delete_title","fixed_width","id","is_control","overflow_behavior","show_delete","show_edit","size","defaultDateColumn","allow_resize","is_date","convert","oldWidget","oldDisplay","display","newStructure","analysis_run","dashboard","header_buttons","help","max_rows","search_position","show_control","show_search","show_time","theme","color","variables","label","realtime","type","showEdit","sequentialID","createControlColumn","Array","isArray","intervals","map","common_1","data","item","is_hide","variable","key","origin","keyReverse","vars_labels","numberFormat","vars_format","formula","vars_formula","column_alignments","iconConditions","conditions","overrideColor","override_color","usesIcon","vars_that_have_conditions","allowResize","formField","form","fields","edit","createEditObject","enabled","column","content_type","icon_conditions","Object","keys","length","number_format","push","dateColumn","controlColumn","show_edit_modal","messageDeleteRow","editable","required","show_label","fieldtype","options","use_values_from","use_variable","use_values_from_variable","isOldStructure","widget","isOld"],"sources":["C:\\Users\\kaique\\Documents\\SGA\\widget\\project\\node_modules\\@tago-io\\sdk\\src\\modules\\Migration\\dynamic_table.ts"],"sourcesContent":["// ? ==================================== (c) TagoIO ====================================\r\n// * What is this file?\r\n//     Migration of old DYNAMIC_TABLE to new DYNAMIC_TABLE\r\n// ? ====================================================================================\r\n\r\nimport { WidgetInfo } from \"../Account/dashboards.types\";\r\nimport { convertFormula, convertInterval } from \"./common\";\r\n\r\nexport const dynamicTableConfig = {\r\n  cellFilterHeight: 56, // height of cell with a filter in it\r\n  cellHeight: 28, // height of default cell\r\n  defaultControlColumn: {\r\n    alias: \"Controls\",\r\n    alignment: \"center\",\r\n    delete_cancel_text: \"Cancel\",\r\n    delete_confirm_text: \"Yes, delete row\",\r\n    delete_message: \"Do you really want to delete this row?\",\r\n    delete_title: \"Delete row\",\r\n    fixed_width: 33,\r\n    id: \"control\",\r\n    is_control: true,\r\n    overflow_behavior: \"stretch\",\r\n    show_delete: true,\r\n    show_edit: true,\r\n    size: \"fixed\",\r\n  },\r\n  defaultDateColumn: {\r\n    alias: \"Date and Time\",\r\n    allow_resize: true,\r\n    fixed_width: 100,\r\n    id: \"date\",\r\n    is_date: true,\r\n    overflow_behavior: \"stretch\",\r\n    size: \"auto\",\r\n  },\r\n};\r\n\r\nexport function convert(oldWidget: any): WidgetInfo {\r\n  const oldDisplay = oldWidget.display || {};\r\n\r\n  const newStructure: any = {\r\n    analysis_run: oldWidget.analysis_run,\r\n    dashboard: oldWidget.dashboard,\r\n    display: {\r\n      header_buttons: oldDisplay.header_buttons || [],\r\n      help: oldDisplay.help || \"\",\r\n      max_rows: oldDisplay.max_rows || 10000,\r\n      search_position: \"whole\",\r\n      show_control: false,\r\n      show_search: oldDisplay.show_search,\r\n      show_time: oldDisplay.show_time,\r\n      theme: {\r\n        color: {},\r\n      },\r\n      variables: [],\r\n    },\r\n    id: oldWidget.id,\r\n    label: oldWidget.label,\r\n    realtime: oldWidget.realtime,\r\n    type: \"dynamic_table\",\r\n  };\r\n\r\n  let showEdit = false;\r\n  let sequentialID = 0;\r\n  let createControlColumn = false;\r\n\r\n  if (oldDisplay.show_delete) {\r\n    createControlColumn = true;\r\n  }\r\n\r\n  if (Array.isArray(oldDisplay.intervals)) {\r\n    // transfer the intervals\r\n    newStructure.display.intervals = oldDisplay.intervals.map(convertInterval);\r\n  }\r\n\r\n  if (Array.isArray(oldWidget.data)) {\r\n    newStructure.data = oldWidget.data; // transfers the .data property\r\n    newStructure.display.variables = []; // creates the variable array\r\n\r\n    for (const item of oldWidget.data) {\r\n      if (item.is_hide) {\r\n        // is_hide items are not visible in the columns, so we cannot\r\n        // put them in the variables array\r\n        continue;\r\n      }\r\n\r\n      for (const variable of item.variables) {\r\n        const key = `${item.origin}${variable}`;\r\n        const keyReverse = `${variable}${item.origin}`; // form fields use key in reverse\r\n\r\n        const alias = oldDisplay.vars_labels?.[key];\r\n        const numberFormat = oldDisplay.vars_format?.[key];\r\n        const formula = convertFormula(oldDisplay.vars_formula?.[key]);\r\n        const alignment = oldDisplay.column_alignments?.[key] || \"left\";\r\n        const iconConditions = oldDisplay.conditions?.[key];\r\n        const overrideColor = oldDisplay?.override_color;\r\n        const usesIcon = oldDisplay?.vars_that_have_conditions?.[key];\r\n        const allowResize = true;\r\n        const id = `data:id:${++sequentialID}`;\r\n        const data = {\r\n          origin: item.origin,\r\n          variable,\r\n        };\r\n\r\n        const formField = oldDisplay.form?.fields?.[keyReverse];\r\n        const edit = createEditObject(formField);\r\n\r\n        if (edit?.enabled) {\r\n          createControlColumn = true;\r\n          showEdit = true;\r\n        }\r\n\r\n        const column: any = {\r\n          alignment,\r\n          allow_resize: allowResize,\r\n          content_type: usesIcon ? \"icon\" : \"value\",\r\n          data,\r\n          id,\r\n          override_color: overrideColor || false,\r\n        };\r\n\r\n        if (iconConditions) {\r\n          column.icon_conditions = iconConditions;\r\n        }\r\n        if (alias) {\r\n          column.alias = alias;\r\n        }\r\n        if (numberFormat && Object.keys(numberFormat).length > 0) {\r\n          column.number_format = numberFormat;\r\n        }\r\n        if (formula) {\r\n          column.formula = formula;\r\n        }\r\n        if (edit) {\r\n          column.edit = edit;\r\n        }\r\n\r\n        newStructure.display.variables.push(column);\r\n      }\r\n    }\r\n  }\r\n\r\n  // here we verify if the show_time parameter is true, and if it is\r\n  // we need to create a new column to hold the dates information\r\n  if (newStructure.display.show_time) {\r\n    // create a new column for date/times\r\n    const dateColumn = dynamicTableConfig.defaultDateColumn;\r\n    newStructure.display.variables.push(dateColumn);\r\n  }\r\n\r\n  // here we verify if the createControlColumn parameter is true, and if it is\r\n  // we need to create a new column to hold the control information\r\n  if (createControlColumn) {\r\n    // create a new column for control\r\n    const controlColumn = {\r\n      ...dynamicTableConfig.defaultControlColumn,\r\n      show_delete: oldDisplay.show_delete,\r\n      show_edit: showEdit,\r\n      show_edit_modal: oldDisplay.show_edit_modal,\r\n    };\r\n\r\n    if (oldDisplay.messageDeleteRow) {\r\n      // if the message was informed, use the one that the use informed\r\n      controlColumn.delete_message = oldDisplay.messageDeleteRow;\r\n    }\r\n\r\n    newStructure.display.variables.push(controlColumn);\r\n    newStructure.display.show_control = true;\r\n  }\r\n\r\n  return newStructure;\r\n}\r\n\r\nfunction createEditObject(formField: any) {\r\n  if (!formField) {\r\n    return null;\r\n  }\r\n\r\n  const edit: any = {\r\n    enabled: formField.editable || false,\r\n    required: formField.required || false,\r\n    show_label: formField.show_label || false, // only for dropdowns\r\n    type: formField.fieldtype || \"text\",\r\n  };\r\n\r\n  if (formField.options) {\r\n    edit.options = formField.options;\r\n  }\r\n  if (formField.use_values_from === \"variable\") {\r\n    edit.use_values_from = \"variable\";\r\n  }\r\n\r\n  if (formField.use_variable) {\r\n    edit.use_values_from_variable = {\r\n      origin: formField.use_variable?.origin?.id || formField.use_variable?.origin,\r\n      variable: formField.use_variable?.variable,\r\n    };\r\n\r\n    if (typeof edit.use_values_from_variable.origin !== \"string\") {\r\n      // origin has to be a string. If it's not, then something went wrong\r\n      // during the formula conversion.\r\n      edit.use_values_from_variable = null;\r\n    }\r\n  }\r\n\r\n  return edit;\r\n}\r\n\r\nexport function isOldStructure(widget: any) {\r\n  const isOld = !!(\r\n    widget?.display?.vars_labels ||\r\n    widget?.display?.vars_format ||\r\n    widget?.display?.vars_formula ||\r\n    widget?.display?.conditions ||\r\n    widget?.display?.form\r\n  );\r\n  return isOld;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}