"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const qs_1 = __importDefault(require("qs"));
const apiRequest_1 = __importDefault(require("../infrastructure/apiRequest"));
const regions_1 = __importDefault(require("../regions"));
/**
 * Create a Object for Axios
 * @internal
 * @param uri URI
 * @param requestObj doRequestParams
 */
function mountAxiosRequest(uri, requestObj) {
    const axiosObj = {
        url: `${uri}${requestObj.path}`,
        method: requestObj.method,
        data: requestObj.body,
        params: requestObj.params,
        maxContentLength: requestObj.maxContentLength,
        paramsSerializer: (p) => qs_1.default.stringify(p),
        headers: {
            ...requestObj.headers,
        },
        ...requestObj.overwriteAxiosConfig,
    };
    return axiosObj;
}
/**
 * Abstract class to wrap all TagoIO SDK Modules
 * @internal
 */
class TagoIOModule {
    constructor(params) {
        this.params = {};
        this.params = params;
        this.validateParams();
    }
    validateParams() {
        if (!this.params) {
            throw new Error("Invalid Params");
        }
        if (!this.params.token) {
            throw new Error("Invalid Token");
        }
        // if (this.params.options && typeof this.params.options !== "object") {
        //   throw new Error("Invalid Params");
        // }
    }
    async doRequest(requestObj) {
        const apiURI = (0, regions_1.default)(this.params.region)?.api;
        if (!apiURI) {
            throw new Error("Invalid region");
        }
        const axiosObj = mountAxiosRequest(apiURI, requestObj);
        axiosObj.headers = {
            token: this.params.token,
            ...axiosObj.headers,
        };
        const result = await (0, apiRequest_1.default)(axiosObj, requestObj.cacheTTL);
        return result;
    }
    static async doRequestAnonymous(requestObj, region) {
        const apiURI = (0, regions_1.default)(region)?.api;
        if (!apiURI) {
            throw new Error("Invalid region");
        }
        const axiosObj = mountAxiosRequest(apiURI, requestObj);
        const result = await (0, apiRequest_1.default)(axiosObj, requestObj.cacheTTL);
        return result;
    }
}
exports.default = TagoIOModule;
//# sourceMappingURL=TagoIOModule.js.map