"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertField = exports.convertFieldCaptureUser = exports.convertFieldValidation = exports.convertFieldRadio = exports.convertFieldQrCode = exports.convertFieldPassword = exports.convertFieldNumber = exports.convertFieldIncrementalSteps = exports.convertFieldImageVideoSelect = exports.convertFieldHidden = exports.convertFieldFilteredVariables = exports.convertFieldFileUpload = exports.convertFieldEmail = exports.convertFieldDropdownMultiple = exports.convertFieldDropdown = exports.convertFieldDevice = exports.convertFieldClockSet = exports.convertFieldCheckbox = exports.convertFieldCalendar = exports.convertFieldBarCode = exports.convertFieldAddress = exports.convertFieldText = exports.convertVisualField = exports.convertFormField = exports.convertSubmitButton = exports.InputFormField = void 0;
const common_1 = require("./common");
var InputFormField;
(function (InputFormField) {
    InputFormField["Text"] = "text";
    InputFormField["Address"] = "address";
    InputFormField["Barcode"] = "barcode";
    InputFormField["Calendar"] = "calendar";
    InputFormField["Capture user"] = "user";
    InputFormField["Checkbox"] = "checkbox";
    InputFormField["Clock Set"] = "clock-set";
    InputFormField["Device"] = "device";
    InputFormField["Dropdown"] = "dropdown";
    InputFormField["Dropdown Multiple"] = "dropdown-multi";
    InputFormField["Email"] = "email";
    InputFormField["File Upload"] = "upload";
    InputFormField["Filtered variables"] = "filtered";
    InputFormField["Hidden"] = "hidden";
    InputFormField["Image / Video Select"] = "image-select";
    InputFormField["Incremental Step"] = "incremental-step";
    InputFormField["Number"] = "number";
    InputFormField["Password"] = "password";
    InputFormField["QR Code"] = "qrcode";
    InputFormField["Radio"] = "radio";
    InputFormField["Validation"] = "validation";
})(InputFormField = exports.InputFormField || (exports.InputFormField = {}));
function convertDefaultValue(useCurrentValue) {
    let defaultValue = "last";
    if (typeof useCurrentValue === "string" && useCurrentValue !== "current_value") {
        defaultValue = "fixed";
    }
    return defaultValue;
}
function convertSubmitButton(oldDisplay, runAnalysis) {
    return {
        analysis: runAnalysis || "",
        clear_form: false,
        color: "#337ab7",
        confirmation_cancel: null,
        confirmation_confirm: null,
        confirmation_message: oldDisplay?.form?.message_submit || "",
        confirmation_title: null,
        icon: null,
        id: (0, common_1.generateWidgetItemId)(),
        identifier: "",
        run_analysis: !!runAnalysis,
        send_data: !oldDisplay?.form?.bypass_bucket,
        show_confirmation: !!oldDisplay?.form?.confirm_before_submit,
        text: !oldDisplay?.form?.label_submit ? "Send" : oldDisplay?.form?.label_submit,
        wait_for_validation: !!oldDisplay?.form?.wait_validation_unlock,
    };
}
exports.convertSubmitButton = convertSubmitButton;
function convertFormField(field) {
    return {
        data: {
            bucket: field?.bucket,
            origin: field?.origin,
            variable: field?.variable,
        },
        id: field?.id || (0, common_1.generateWidgetItemId)(),
    };
}
exports.convertFormField = convertFormField;
function convertVisualField(field) {
    return {
        ...convertFormField(field),
        icon: null,
        label: field?.label,
        required: !!field?.required,
        show_new_line: field?.new_line !== undefined ? !!field?.new_line : true,
        visibility_conditions: field?.visibility_conditions || [],
        ...(field?.placeholder ? { placeholder: field?.placeholder } : {}),
        ...(field?.unit ? { unit: field?.unit } : {}),
        ...(field?.value_type ? { value_type: field?.value_type } : {}),
    };
}
exports.convertVisualField = convertVisualField;
/**
 * Convert text fields to new widget format
 */
function convertFieldText(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField.Text,
    };
}
exports.convertFieldText = convertFieldText;
/**
 * Convert address fields to new widget format
 */
function convertFieldAddress(field, showMap) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        show_map: !!showMap,
        type: InputFormField.Address,
    };
}
exports.convertFieldAddress = convertFieldAddress;
/**
 * Convert barcode fields to new widget format
 */
function convertFieldBarCode(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField.Barcode,
    };
}
exports.convertFieldBarCode = convertFieldBarCode;
/**
 * Convert calendar fields to new widget format
 */
function convertFieldCalendar(field) {
    return {
        ...convertVisualField(field),
        allow_time: !!field?.allow_time_select,
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        show_end_date: field?.hide_end_date ?? true,
        type: InputFormField.Calendar,
    };
}
exports.convertFieldCalendar = convertFieldCalendar;
/**
 * Convert calendar fields to new widget format
 */
function convertFieldCheckbox(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField.Checkbox,
    };
}
exports.convertFieldCheckbox = convertFieldCheckbox;
/**
 * Convert clock set fields to new widget format
 */
function convertFieldClockSet(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        define_limits: !!field?.enable_limit,
        fixed_value: field?.default,
        hour_visualization: field?.clock_visualization,
        maximum: field?.maximum,
        minimum: field?.minimum,
        step_value: field?.increment,
        type: InputFormField["Clock Set"],
    };
}
exports.convertFieldClockSet = convertFieldClockSet;
/**
 * Convert device fields to new widget format
 */
function convertFieldDevice(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField.Device,
    };
}
exports.convertFieldDevice = convertFieldDevice;
/**
 * Convert dropdown field to new widget format
 */
function convertFieldDropdown(field) {
    return {
        ...convertVisualField(field),
        options: (field?.options || []).map((e) => ({
            label: e?.label,
            value: e?.value,
            ...(e?.unit ? { unit: e?.unit } : {}),
            ...(e?.is_default ? { default: e?.is_default } : {}),
        })),
        type: InputFormField.Dropdown,
        use_values_from: field?.use_values_from === "variable" ? "variable" : "options",
        use_values_from_variable: {
            origin: field?.use_variable?.origin?.id || field?.use_variable?.origin,
            variable: field?.use_variable?.variable,
        },
    };
}
exports.convertFieldDropdown = convertFieldDropdown;
/**
 * Convert dropdown multiples field to new widget format
 */
function convertFieldDropdownMultiple(field) {
    return {
        ...convertFieldDropdown(field),
        type: InputFormField["Dropdown Multiple"],
    };
}
exports.convertFieldDropdownMultiple = convertFieldDropdownMultiple;
/**
 * Convert email field to new widget format
 */
function convertFieldEmail(field) {
    return {
        ...convertVisualField(field),
        amount: "single",
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField.Email,
    };
}
exports.convertFieldEmail = convertFieldEmail;
/**
 * Convert file upload field to new widget format
 */
function convertFieldFileUpload(field) {
    return {
        ...convertVisualField(field),
        maximum_files: field?.max_files || 1,
        path: field?.path || "",
        type: InputFormField["File Upload"],
        use_mobile_camera: !!field?.use_camera,
    };
}
exports.convertFieldFileUpload = convertFieldFileUpload;
/**
 * Convert filtered variables field to new widget format
 */
function convertFieldFilteredVariables(field) {
    const useValuesFromVariable = {
        origin: field?.use_variable?.origin?.id || field?.use_variable?.origin,
        variable: field?.use_variable?.variable,
    };
    return {
        ...convertVisualField(field),
        filter_amount: field?.selection_type || "single",
        filter_origin: field?.filter_origin,
        type: InputFormField["Filtered variables"],
        use_values_from_variable: { ...useValuesFromVariable },
    };
}
exports.convertFieldFilteredVariables = convertFieldFilteredVariables;
/**
 * Convert hidden field to new widget format
 */
function convertFieldHidden(field) {
    return {
        ...convertFormField(field),
        fixed_value: field?.value,
        type: InputFormField.Hidden,
        unit: field?.unit || "",
    };
}
exports.convertFieldHidden = convertFieldHidden;
/**
 * Convert Image / Video select field to new widget format
 */
function convertFieldImageVideoSelect(field) {
    return {
        ...convertVisualField(field),
        allow_multiple: !!field?.allow_multiple,
        options: (field?.options || []).map((e) => ({
            description: e?.description || "",
            label: e?.label,
            link: e?.url || "",
            value: e?.value,
            ...(e?.unit ? { unit: e?.unit } : {}),
            ...(e?.is_default ? { default: e?.is_default } : {}),
        })),
        show_filter: !!field?.show_filter_value,
        type: InputFormField["Image / Video Select"],
        use_values_from: field?.use_values_from === "variable" ? "variable" : "options",
        use_values_from_variable: {
            origin: field?.use_variable?.origin?.id || field?.use_variable?.origin,
            variable: field?.variable,
        },
    };
}
exports.convertFieldImageVideoSelect = convertFieldImageVideoSelect;
/**
 * Convert Incremental steps field for new widget format
 */
function convertFieldIncrementalSteps(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        maximum: field?.maximum || 100,
        minimum: field?.minimum || 0,
        step_value: field?.increment || 1,
        type: InputFormField["Incremental Step"],
    };
}
exports.convertFieldIncrementalSteps = convertFieldIncrementalSteps;
/**
 * Convert Number field to new widget format
 */
function convertFieldNumber(field) {
    return {
        ...convertVisualField(field),
        decimals: field?.decimals === "-1" ? "auto" : field?.decimals,
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        show_thousand_separator: !!field?.show_thousand,
        type: InputFormField.Number,
    };
}
exports.convertFieldNumber = convertFieldNumber;
/**
 * Convert Password field to new widget format
 */
function convertFieldPassword(field) {
    return {
        ...convertVisualField(field),
        fixed_value: field?.use_current_value !== "current_value" ? field?.default : "",
        type: InputFormField.Password,
    };
}
exports.convertFieldPassword = convertFieldPassword;
/**
 * Convert QR Code field to new widget format
 */
function convertFieldQrCode(field) {
    return {
        ...convertVisualField(field),
        default_value: convertDefaultValue(field?.use_current_value),
        fixed_value: field?.default,
        type: InputFormField["QR Code"],
    };
}
exports.convertFieldQrCode = convertFieldQrCode;
/**
 * Convert Radio field to new widget format
 */
function convertFieldRadio(field) {
    return {
        ...convertVisualField(field),
        options: (field?.options || []).map((e) => ({
            label: e?.label,
            value: e?.value,
            ...(e?.unit ? { unit: e?.unit } : {}),
            ...(e?.is_default ? { default: e?.is_default } : {}),
        })),
        type: InputFormField.Radio,
    };
}
exports.convertFieldRadio = convertFieldRadio;
/**
 * Convert Validation field to new widget format
 */
function convertFieldValidation(field) {
    return {
        ...convertFormField(field),
        fade_out: !field?.validation_message?.always_show,
        keep_last_validation: false,
        show_markdown: false,
        type: InputFormField.Validation,
    };
}
exports.convertFieldValidation = convertFieldValidation;
/**
 * Convert Capture user field to new widget format
 */
function convertFieldCaptureUser(field) {
    return {
        ...convertFormField(field),
        field: field?.field || "",
        type: InputFormField["Capture user"],
    };
}
exports.convertFieldCaptureUser = convertFieldCaptureUser;
/**
 * Convert fields
 */
function convertField(field, showMap) {
    const { fieldtype } = field;
    switch (fieldtype) {
        case "text":
            return convertFieldText(field);
        case "address":
            return convertFieldAddress(field, showMap);
        case "barcode":
            return convertFieldBarCode(field);
        case "calendar":
            return convertFieldCalendar(field);
        case "checkbox":
            return convertFieldCheckbox(field);
        case "clock-set":
            return convertFieldClockSet(field);
        case "device":
            return convertFieldDevice(field);
        case "dropdown":
            return convertFieldDropdown(field);
        case "dropdown-multi":
            return convertFieldDropdownMultiple(field);
        case "email":
            return convertFieldEmail(field);
        case "upload":
            return convertFieldFileUpload(field);
        case "filtered":
            return convertFieldFilteredVariables(field);
        case "hidden":
            return convertFieldHidden(field);
        case "image-select":
            return convertFieldImageVideoSelect(field);
        case "incremental-step":
            return convertFieldIncrementalSteps(field);
        case "number":
            return convertFieldNumber(field);
        case "password":
            return convertFieldPassword(field);
        case "qrcode":
            return convertFieldQrCode(field);
        case "radio":
            return convertFieldRadio(field);
        case "validation":
            return convertFieldValidation(field);
        case "user":
            return convertFieldCaptureUser(field);
        default:
            return null;
    }
}
exports.convertField = convertField;
//# sourceMappingURL=convertFields.js.map