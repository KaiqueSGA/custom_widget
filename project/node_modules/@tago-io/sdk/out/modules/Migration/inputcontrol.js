"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const common_1 = require("./common");
var EInputControlFieldType;
(function (EInputControlFieldType) {
    EInputControlFieldType["Switch"] = "switch";
    EInputControlFieldType["Text"] = "text";
})(EInputControlFieldType || (EInputControlFieldType = {}));
function convert(oldWidget) {
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            sections: [],
            theme: {
                color: {
                    background: null,
                    field: null,
                    footer: null,
                },
            },
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "control",
    };
    const section = {
        description: "",
        fields: [],
        id: (0, common_1.generateWidgetItemId)(),
        show_border: false,
        show_caption: false,
        title: "",
    };
    for (const oldField of oldDisplay?.controls || []) {
        const data = {
            ...(oldField?.bucket ? { bucket: oldField?.bucket } : {}),
            ...(oldField?.origin ? { origin: oldField?.origin } : {}),
            ...(oldField?.variable ? { variable: oldField?.variable } : {}),
        };
        section.fields.push({
            data,
            icon: null,
            id: (0, common_1.generateWidgetItemId)(),
            label: oldField?.name,
            label_selected: oldField?.label_yes || "",
            label_type: "text",
            label_unselected: oldField?.label_no || "",
            send_data: true,
            show_new_line: oldField?.new_line !== undefined ? oldField?.new_line : true,
            type: oldField?.type === "switch" ? EInputControlFieldType.Switch : EInputControlFieldType.Text,
        });
    }
    newStructure.display.sections.push(section);
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data;
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    const isOld = !!(widget?.display?.watermark !== undefined || widget?.display?.input_type);
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=inputcontrol.js.map