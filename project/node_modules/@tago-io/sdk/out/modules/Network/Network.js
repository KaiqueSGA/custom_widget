"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Network extends TagoIOModule_1.default {
    /**
     * Get information about the current network
     */
    async info() {
        const result = await this.doRequest({
            path: "/info",
            method: "GET",
            params: {
                details: this.params.details,
            },
        });
        return result;
    }
    /**
     * Get a valid token using token serie
     * @param serieNumber
     * @param authorization
     */
    async resolveToken(serieNumber, authorization) {
        let path = `/integration/network/resolve/${serieNumber}`;
        if (authorization)
            path = `${path}/${authorization}`;
        const result = await this.doRequest({
            path,
            method: "GET",
            params: {
                details: this.params.details,
            },
        });
        return result;
    }
    /**
     * Retrieves a list with all devices tokens related to
     * network and connector. Network require_devices_access
     * param need to be true.
     * @default
     * queryObj: {
     *   page: 1,
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc"
     * }
     * @param connectorID Connector identification
     * @param queryObj Search query params
     */
    async deviceList(connectorID, queryObj) {
        let result = await this.doRequest({
            path: `/integration/network/${connectorID}/devices`,
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]));
        return result;
    }
    /**
     * Create or edit param for the Device in network
     * @param deviceID Device ID
     * @param configObj Configuration Data
     * @param paramID Parameter ID
     */
    async deviceParamSet(deviceID, configObj, paramID) {
        const result = await this.doRequest({
            path: `/integration/network/${deviceID}/params`,
            method: "POST",
            body: paramID
                ? {
                    id: paramID,
                    ...configObj,
                }
                : configObj,
        });
        return result;
    }
}
exports.default = Network;
//# sourceMappingURL=Network.js.map