import TagoIOModule, { ConnectorModuleParams } from "../../common/TagoIOModule";
import { NetworkDeviceListQuery, INetworkInfo, NetworkDeviceListQueryInfo } from "./network.types";
import { GenericID, GenericToken } from "../../common/common.types";
import { ConfigurationParams } from "../Account/devices.types";
declare class Network extends TagoIOModule<ConnectorModuleParams> {
    /**
     * Get information about the current network
     */
    info(): Promise<INetworkInfo>;
    /**
     * Get a valid token using token serie
     * @param serieNumber
     * @param authorization
     */
    resolveToken(serieNumber: string, authorization?: string): Promise<GenericToken>;
    /**
     * Retrieves a list with all devices tokens related to
     * network and connector. Network require_devices_access
     * param need to be true.
     * @default
     * queryObj: {
     *   page: 1,
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc"
     * }
     * @param connectorID Connector identification
     * @param queryObj Search query params
     */
    deviceList(connectorID: GenericID, queryObj?: NetworkDeviceListQuery): Promise<NetworkDeviceListQueryInfo[]>;
    /**
     * Create or edit param for the Device in network
     * @param deviceID Device ID
     * @param configObj Configuration Data
     * @param paramID Parameter ID
     */
    deviceParamSet(deviceID: GenericID, configObj: Partial<ConfigurationParams>, paramID?: GenericID): Promise<string>;
}
export default Network;
//# sourceMappingURL=Network.d.ts.map