"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const sleep_1 = __importDefault(require("../../common/sleep"));
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Device extends TagoIOModule_1.default {
    /**
     * Get information about the current device
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.info();
     * ```
     */
    async info() {
        let result = await this.doRequest({
            path: "/info",
            method: "GET",
        });
        result = (0, dateParser_1.default)(result, ["created_at", "updated_at", "last_input", "last_output"]);
        return result;
    }
    /**
     * Send data to device
     * @param data An array or one object with data to be send to TagoIO using device token
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.sendData({
     *   variable: "temperature",
     *   unit: "F",
     *   value: 55,
     *   time: "2015-11-03 13:44:33",
     *   location: { lat: 42.2974279, lng: -85.628292 },
     * });
     * ```
     */
    async sendData(data) {
        data = Array.isArray(data) ? data : [data];
        const result = await this.doRequest({
            path: "/data",
            method: "POST",
            body: data,
        });
        return result;
    }
    /**
     * Get data from TagoIO Device.
     * @param queryParams Object with query params
     * @returns An array of TagoIO registers
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getData({
     *   query: "last_item",
     *   variable: "humidity",
     * });
     * ```
     */
    async getData(queryParams) {
        if (queryParams?.query === "default") {
            delete queryParams.query;
        }
        let result = await this.doRequest({
            path: "/data",
            method: "GET",
            params: queryParams,
        });
        if (typeof result === "number") {
            result = [
                {
                    id: "none",
                    origin: "?",
                    time: new Date(),
                    value: result,
                    variable: "?",
                },
            ];
        }
        return result.map((item) => (0, dateParser_1.default)(item, ["time", "created_at"]));
    }
    /**
     * Edit data in a Mutable-type device.
     *
     * @param data Array or object with the data to be edited, each object with the data's ID.
     *
     * @example
     * ```ts
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.editData({
     *   id: "id_of_the_data_item",
     *   value: 123,
     *   time: "2022-04-01 12:34:56",
     *   location: { lat: 42.2974279, lng: -85.628292 },
     * });
     * ```
     *
     * @returns Success message with the amount of data items updated.
     */
    async editData(data) {
        data = Array.isArray(data) ? data : [data];
        const result = await this.doRequest({
            path: "/data",
            method: "PUT",
            body: data,
        });
        return result;
    }
    /**
     * Delete data from device
     * @param queryParams
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.deleteData({
     *   query: "last_item",
     *   variable: "humidity",
     *   value: 10
     * });
     * ```
     */
    async deleteData(queryParams) {
        if (!queryParams) {
            queryParams = { query: "last_item" };
        }
        if (queryParams?.query === "default") {
            delete queryParams.query;
        }
        const result = await this.doRequest({
            path: "/data",
            method: "DELETE",
            params: queryParams,
        });
        return result;
    }
    /**
     * Get parameters from device
     * @param onlyUnRead set true to get only unread parameters
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getParameters();
     * ```
     */
    async getParameters(status) {
        const params = {};
        if (status === "onlyRead") {
            params.sent_status = true;
        }
        else if (status === "onlyUnRead") {
            params.sent_status = false;
        }
        // ? Support for old call (onlyUnRead?: boolean)
        // @ts-expect-error
        if (status === true) {
            params.sent_status = false;
        }
        const result = await this.doRequest({
            path: "/device/params",
            method: "GET",
            params: params,
        });
        return result;
    }
    /**
     * Mark parameter as read
     * @param parameterID Parameter identification
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.setParameterAsRead("parameter_id");
     * ```
     *
     */
    async setParameterAsRead(parameterID) {
        const result = await this.doRequest({
            path: `/device/params/${parameterID}`,
            method: "PUT",
            body: { sent: true },
        });
        return result;
    }
    /**
     * Get Data Streaming
     *
     * @experimental
     * @param params Data Query
     * @param options Stream options
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * for await (const items of myDevice.getDataStreaming()) {
     *  console.log(items);
     * }
     * ```
     */
    async *getDataStreaming(params, options) {
        const poolingRecordQty = options?.poolingRecordQty || 1000;
        const poolingTime = options?.poolingTime || 1000; // 1 seg
        const neverStop = options?.neverStop || false;
        if (poolingRecordQty > 10000) {
            throw new Error("The maximum of poolingRecordQty is 10000");
        }
        const qty = Math.ceil(poolingRecordQty);
        let skip = 0;
        let stop = false;
        while (!stop) {
            await (0, sleep_1.default)(poolingTime);
            yield (async () => {
                const data = await this.getData({ ...params, qty, skip, query: "default", ordination: "ascending" });
                skip += data.length;
                if (!neverStop) {
                    stop = data.length === 0 || data.length < poolingRecordQty;
                }
                return data;
            })();
        }
    }
    /**
     * Stream data to device
     *
     * @experimental
     * @param data An array or one object with data to be send to TagoIO using device token
     * @param options Stream options
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const data = [
     *     {
     *       variable: "temperature",
     *       unit: "F",
     *       value: 55,
     *       time: "2015-11-03 13:44:33",
     *       location: { lat: 42.2974279, lng: -85.628292 },
     *     },
     *     {
     *       variable: "temperature",
     *       unit: "F",
     *       value: 53,
     *       time: "2015-11-03 13:44:33",
     *       location: { lat: 43.2974279, lng: -86.628292 },
     *     },
     *     // ...
     *   ];
     *
     *   const result = await myDevice.sendDataStreaming(data, {
     *     poolingRecordQty: 1000,
     *     poolingTime: 1000,
     *   });
     * ```
     */
    async sendDataStreaming(data, options) {
        const poolingRecordQty = options?.poolingRecordQty || 1000;
        const poolingTime = options?.poolingTime || 1000; // 1 seg
        if (!Array.isArray(data)) {
            return Promise.reject("Only data array is allowed");
        }
        const dataChunk = (0, lodash_1.chunk)(data, poolingRecordQty);
        for (const items of dataChunk) {
            await this.sendData(items);
            await (0, sleep_1.default)(poolingTime);
        }
        return `${data.length} Data added.`;
    }
}
exports.default = Device;
//# sourceMappingURL=Device.js.map