"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Networks extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all Networks from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        const result = await this.doRequest({
            path: "/integration/network/",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        return result;
    }
    /**
     * Get Info of the Network
     * @param networkID Network identification
     * @param fields Fields to fetch.
     */
    async info(networkID, fields = ["id", "name"]) {
        const result = await this.doRequest({
            path: `/integration/network/${networkID}`,
            method: "GET",
            params: {
                fields,
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new network from the account
     * @param connectorObj Object data to create new Network
     */
    async create(connectorObj) {
        const result = await this.doRequest({
            path: `/integration/network/`,
            method: "POST",
            body: {
                ...connectorObj,
            },
        });
        return result;
    }
    /**
     * Modify any property of the network
     * @param networkID Network identification
     * @param connectorObj Object data to create new Network
     */
    async edit(networkID, connectorObj) {
        const result = await this.doRequest({
            path: `/integration/network/${networkID}`,
            method: "PUT",
            body: {
                ...connectorObj,
            },
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * ```
     * @param networkID Network ID
     * @param queryObj Search query params
     */
    async tokenList(networkID, queryObj) {
        let result = await this.doRequest({
            path: `/integration/network/token/${networkID}`,
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["name", "token", "permission"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "created_at,desc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param networkID Network ID
     * @param tokenParams Details of new token
     */
    async tokenCreate(networkID, tokenParams) {
        const result = await this.doRequest({
            path: `/integration/network/token`,
            method: "POST",
            body: { network: networkID, ...tokenParams },
        });
        return result;
    }
    /**
     * Deletes a token
     * @param token Token ID
     */
    async tokenDelete(token) {
        const result = await this.doRequest({
            path: `/integration/network/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Networks;
//# sourceMappingURL=Integration.Networks.js.map