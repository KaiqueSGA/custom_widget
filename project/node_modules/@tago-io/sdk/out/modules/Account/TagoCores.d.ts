import { TagoCoreClusterCreateInfo, TagoCoreClusterInfo, TagoCoreClusterListInfo, TagoCoreClusterQuery, TagoCoreInfo, TagoCoreListInfo, TagoCoreQuery } from "./tagocore.types";
import { GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { DeviceInfo, DeviceListItem, DeviceQuery } from "./devices.types";
declare class TagoCores extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all TagoCores from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    list(queryObj?: TagoCoreQuery): Promise<TagoCoreListInfo[]>;
    /**
     * Gets information about the TagoCore
     * @param tagoCoreID TagoCore ID
     * @param summary Fetch summary from the instance if it is connected
     */
    info(tagoCoreID: GenericID, summary?: boolean): Promise<TagoCoreInfo>;
    /**
     * Modify any property of the TagoCore.
     * @param tagoCoreID TagoCore ID
     * @param tagoCoreObj TagoCore Object with data to replace
     */
    edit(tagoCoreID: GenericID, tagoCoreObj: Partial<TagoCoreInfo>): Promise<string>;
    /**
     * Generate a new token for the TagoCore
     * @param tagoCoreID TagoCore ID
     */
    tokenGenerate(tagoCoreID: GenericID): Promise<string>;
    /**
     * Deletes a TagoCore
     * @param tagoCoreID TagoCore ID
     */
    delete(tagocoreID: GenericID): Promise<string>;
    /**
     * Retrieves a list with all TagoCore Clusters from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    clusterList(queryObj?: TagoCoreClusterQuery): Promise<TagoCoreClusterListInfo[]>;
    /**
     * Generate a new token for the TagoCore
     * @param clusterID TagoCore Cluster ID
     */
    clusterTokenCreate(clusterID: GenericID): Promise<string>;
    /**
     * Gets information about the TagoCore Cluster
     * @param clusterID TagoCore Cluster ID
     */
    clusterInfo(clusterID: GenericID): Promise<TagoCoreClusterInfo>;
    /**
     * Modify any property of the TagoCore Cluster.
     * @param clusterID TagoCore Cluster ID
     * @param updateObj TagoCore Cluster Object with data to replace
     */
    clusterEdit(clusterID: GenericID, updateObj: Partial<TagoCoreClusterInfo>): Promise<string>;
    /**
     * Generates and retrieves a new Cluster for the account
     * @param clusterObj Object with data to create new bucket
     */
    clusterCreate(clusterObj: TagoCoreClusterCreateInfo): Promise<{
        id: string;
        token: string;
    }>;
    /**
     * Deletes a TagoCore Cluster
     * @param clusterID TagoCore Cluster ID
     */
    clusterDelete(clusterID: GenericID): Promise<string>;
    /**
     * Get Info of the Device from a Standalone TagoCore instance.
     * @param tagoCoreID Standalone TagoCore ID
     * @param deviceID Device ID
     */
    standaloneDeviceInfo(tagoCoreID: GenericID, deviceID: GenericID): Promise<DeviceInfo>;
    /**
     * Get Info of the Device from a TagoCore Cluster.
     * @param clusterID TagoCore Cluster ID
     * @param deviceID Device ID
     */
    clusterDeviceInfo(clusterID: GenericID, deviceID: GenericID): Promise<DeviceInfo>;
    /**
     * Retrieves a list with all devices from a Standalone TagoCore instance.
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false,
     * }
     * @param tagoCoreID Standalone TagoCore ID
     * @param queryObj Search query params
     */
    standaloneDeviceList(tagoCoreID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]>;
    /**
     * Retrieves a list with all devices from a TagoCore Cluster.
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false,
     * }
     * @param clusterID TagoCore Cluster ID
     * @param queryObj Search query params
     */
    clusterDeviceList(clusterID: GenericID, queryObj?: DeviceQuery): Promise<DeviceListItem[]>;
}
export default TagoCores;
//# sourceMappingURL=TagoCores.d.ts.map