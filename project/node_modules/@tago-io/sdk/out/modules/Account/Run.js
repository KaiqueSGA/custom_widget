"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Run extends TagoIOModule_1.default {
    async info() {
        const result = await this.doRequest({
            path: "/run",
            method: "GET",
        });
        return result;
    }
    async edit(data) {
        const result = await this.doRequest({
            path: "/run",
            method: "PUT",
            body: data,
        });
        return result;
    }
    async listUsers(query) {
        let result = await this.doRequest({
            path: "/run/users",
            method: "GET",
            params: {
                page: query?.page || 1,
                fields: query?.fields || ["id", "name"],
                filter: query?.filter || {},
                amount: query?.amount || 20,
                orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "updated_at", "last_login"]));
        return result;
    }
    async userInfo(userID) {
        let result = await this.doRequest({
            path: `/run/users/${userID}`,
            method: "GET",
        });
        result = (0, dateParser_1.default)(result, ["created_at", "updated_at", "last_login"]);
        return result;
    }
    async userCreate(data) {
        const result = await this.doRequest({
            path: `/run/users`,
            method: "POST",
            body: data,
        });
        return result;
    }
    async userEdit(userID, data) {
        const result = await this.doRequest({
            path: `/run/users/${userID}`,
            method: "PUT",
            body: data,
        });
        return result;
    }
    async userDelete(userID) {
        const result = await this.doRequest({
            path: `/run/users/${userID}`,
            method: "DELETE",
        });
        return result;
    }
    async loginAsUser(userID, options) {
        let result = await this.doRequest({
            path: `/run/users/${userID}/login`,
            params: options,
            method: "GET",
        });
        result = (0, dateParser_1.default)(result, ["expire_date"]);
        return result;
    }
    async emailTest(data) {
        const result = await this.doRequest({
            path: `/run/email_test`,
            method: "POST",
            body: data,
        });
        return result;
    }
    async notificationList(userID) {
        const result = await this.doRequest({
            path: `/run/notification/${userID}`,
            method: "GET",
        });
        return result;
    }
    async notificationCreate(userID, data) {
        const result = await this.doRequest({
            path: `/run/notification/`,
            method: "POST",
            body: {
                run_user: userID,
                ...data,
            },
        });
        return result;
    }
    async notificationEdit(notificationID, data) {
        const result = await this.doRequest({
            path: `/run/notification/${notificationID}`,
            method: "PUT",
            body: data,
        });
        return result;
    }
    async notificationDelete(notificationID) {
        const result = await this.doRequest({
            path: `/run/notification/${notificationID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Get the SAML Single Sign-On information for the account's RUN.
     */
    async ssoSAMLInfo() {
        const result = await this.doRequest({
            path: "/run/sso/saml",
            method: "GET",
        });
        return result;
    }
    /**
     * Edit the SAML Single Sign-On metadata and mappings for the account's RUN.
     *
     * @param data Updated data for a RUN's SAML Single Sign-On configuration.
     */
    async ssoSAMLEdit(data) {
        const result = await this.doRequest({
            path: "/run/sso/saml",
            method: "PUT",
            body: data,
        });
        return result;
    }
    /**
     * Create a TagoRUN custom domain for the profile.
     *
     * @param profile_id ID of the profile
     * @param customDomainData query params
     * @returns Success message.
     */
    async createCustomDomain(profile_id, customDomainData) {
        const result = await this.doRequest({
            path: `/run/customdomain/${profile_id}`,
            body: customDomainData,
            method: "POST",
        });
        return result;
    }
    /**
     * Get details of TagoRun custom domain for the profile.
     *
     * @param profile_id ID of the profile
     * @returns Data for the profile's custom DNS configuration.
     */
    async getCustomDomain(profile_id) {
        const result = await this.doRequest({
            path: `/run/customdomain/${profile_id}`,
            method: "GET",
        });
        const parsedResult = (0, dateParser_1.default)(result, ["created_at"]);
        return parsedResult;
    }
    /**
     * delete a TagoRUN custom domain for the profile.
     *
     * @param profile_id ID of the profile
     * @returns Success message.
     */
    async deleteCustomDomain(profile_id) {
        const result = await this.doRequest({
            path: `/run/customdomain/${profile_id}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Regenerate a TagoRUN custom domain for the profile.
     *
     * @param profile_id ID of the profile
     * @returns Success message.
     */
    async regenerateCustomDomain(profile_id) {
        const result = await this.doRequest({
            path: `/run/customdomain/regenerate/${profile_id}`,
            method: "PUT",
        });
        return result;
    }
}
exports.default = Run;
//# sourceMappingURL=Run.js.map