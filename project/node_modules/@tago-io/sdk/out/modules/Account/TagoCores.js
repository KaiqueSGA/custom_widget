"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class TagoCores extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all TagoCores from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/tcore/instance",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "updated_at", "system_start_time", "tcore_start_time"]));
        return result;
    }
    /**
     * Gets information about the TagoCore
     * @param tagoCoreID TagoCore ID
     * @param summary Fetch summary from the instance if it is connected
     */
    async info(tagoCoreID, summary) {
        const result = await this.doRequest({
            path: `/tcore/instance/${tagoCoreID}`,
            method: "GET",
            params: { summary },
        });
        return result;
    }
    /**
     * Modify any property of the TagoCore.
     * @param tagoCoreID TagoCore ID
     * @param tagoCoreObj TagoCore Object with data to replace
     */
    async edit(tagoCoreID, tagoCoreObj) {
        const result = await this.doRequest({
            path: `/tcore/instance/${tagoCoreID}`,
            method: "PUT",
            body: tagoCoreObj,
        });
        return result;
    }
    /**
     * Generate a new token for the TagoCore
     * @param tagoCoreID TagoCore ID
     */
    async tokenGenerate(tagoCoreID) {
        const result = await this.doRequest({
            path: `/tcore/instance/${tagoCoreID}/token`,
            method: "GET",
        });
        return result;
    }
    /**
     * Deletes a TagoCore
     * @param tagoCoreID TagoCore ID
     */
    async delete(tagocoreID) {
        const result = await this.doRequest({
            path: `/tcore/instance/${tagocoreID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Retrieves a list with all TagoCore Clusters from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    async clusterList(queryObj) {
        let result = await this.doRequest({
            path: "/tcore/cluster",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Generate a new token for the TagoCore
     * @param clusterID TagoCore Cluster ID
     */
    async clusterTokenCreate(clusterID) {
        const result = await this.doRequest({
            path: `/tcore/cluster/${clusterID}/token`,
            method: "GET",
        });
        return result;
    }
    /**
     * Gets information about the TagoCore Cluster
     * @param clusterID TagoCore Cluster ID
     */
    async clusterInfo(clusterID) {
        const result = await this.doRequest({
            path: `/tcore/cluster/${clusterID}`,
            method: "GET",
        });
        return result;
    }
    /**
     * Modify any property of the TagoCore Cluster.
     * @param clusterID TagoCore Cluster ID
     * @param updateObj TagoCore Cluster Object with data to replace
     */
    async clusterEdit(clusterID, updateObj) {
        const result = await this.doRequest({
            path: `/tcore/cluster/${clusterID}`,
            method: "PUT",
            body: updateObj,
        });
        return result;
    }
    /**
     * Generates and retrieves a new Cluster for the account
     * @param clusterObj Object with data to create new bucket
     */
    async clusterCreate(clusterObj) {
        const result = await this.doRequest({
            path: "/tcore/cluster",
            method: "POST",
            body: clusterObj,
        });
        return result;
    }
    /**
     * Deletes a TagoCore Cluster
     * @param clusterID TagoCore Cluster ID
     */
    async clusterDelete(clusterID) {
        const result = await this.doRequest({
            path: `/tcore/cluster/${clusterID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Get Info of the Device from a Standalone TagoCore instance.
     * @param tagoCoreID Standalone TagoCore ID
     * @param deviceID Device ID
     */
    async standaloneDeviceInfo(tagoCoreID, deviceID) {
        let result = await this.doRequest({
            path: `/device/${deviceID}`,
            method: "GET",
            params: { tcore: tagoCoreID },
        });
        result = (0, dateParser_1.default)(result, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]);
        return result;
    }
    /**
     * Get Info of the Device from a TagoCore Cluster.
     * @param clusterID TagoCore Cluster ID
     * @param deviceID Device ID
     */
    async clusterDeviceInfo(clusterID, deviceID) {
        let result = await this.doRequest({
            path: `/device/${deviceID}`,
            method: "GET",
            params: { tcore_cluster: clusterID },
        });
        result = (0, dateParser_1.default)(result, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]);
        return result;
    }
    /**
     * Retrieves a list with all devices from a Standalone TagoCore instance.
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false,
     * }
     * @param tagoCoreID Standalone TagoCore ID
     * @param queryObj Search query params
     */
    async standaloneDeviceList(tagoCoreID, queryObj) {
        let result = await this.doRequest({
            path: "/device",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
                resolveBucketName: queryObj?.resolveBucketName || false,
                tcore: tagoCoreID || "",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]));
        return result;
    }
    /**
     * Retrieves a list with all devices from a TagoCore Cluster.
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false,
     * }
     * @param clusterID TagoCore Cluster ID
     * @param queryObj Search query params
     */
    async clusterDeviceList(clusterID, queryObj) {
        let result = await this.doRequest({
            path: "/device",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
                resolveBucketName: queryObj?.resolveBucketName || false,
                tcore_cluster: clusterID || "",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]));
        return result;
    }
}
exports.default = TagoCores;
//# sourceMappingURL=TagoCores.js.map