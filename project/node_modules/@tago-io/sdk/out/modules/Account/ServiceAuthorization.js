"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class ServiceAuthorization extends TagoIOModule_1.default {
    /**
     * Retrieves a list of all tokens
     * @example
     * Default Query: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param query Search query params
     */
    async tokenList(query) {
        let result = await this.doRequest({
            path: `/serviceauth`,
            method: "GET",
            params: {
                page: query?.page || 1,
                fields: query?.fields || ["name", "token", "permission"],
                filter: query?.filter || {},
                amount: query?.amount || 20,
                orderBy: query?.orderBy ? `${query.orderBy[0]},${query.orderBy[1]}` : "created_at,desc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "last_authorization", "expire_time"]));
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param tokenParams Token params to create new token
     */
    async tokenCreate(tokenParams) {
        let result = await this.doRequest({
            path: `/serviceauth`,
            method: "POST",
            body: tokenParams,
        });
        result = (0, dateParser_1.default)(result, ["expire_date"]);
        return result;
    }
    /**
     * Deletes a token
     * @param token Token
     */
    async tokenDelete(token) {
        const result = await this.doRequest({
            path: `/serviceauth/${token}`,
            method: "DELETE",
        });
        return result;
    }
    async tokenEdit(token, verificationCode) {
        const result = await this.doRequest({
            path: `/serviceauth/${token}`,
            method: "PUT",
            body: {
                verification_code: verificationCode,
            },
        });
        return result;
    }
}
exports.default = ServiceAuthorization;
//# sourceMappingURL=ServiceAuthorization.js.map