"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Profile extends TagoIOModule_1.default {
    /**
     * Lists all the profiles in your account
     */
    async list() {
        const result = await this.doRequest({
            path: "/profile",
            method: "GET",
        });
        return result;
    }
    /**
     * Get Profile info
     * @param profileID Profile identification
     */
    async info(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "GET",
        });
        if (result.info)
            result.info = (0, dateParser_1.default)(result.info, ["created_at", "updated_at"]);
        return result;
    }
    /**
     * Gets profile summary
     */
    async summary(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/summary`,
            method: "GET",
        });
        return result;
    }
    /**
     * Create a profile.
     *
     * If `allocate_free_resources` is passed as an option, all the free resources available
     * in allocation will be allocated to the new profile.
     *
     * @param profileObj Profile object with data to be created
     * @param options Options for the created profile.
     */
    async create(profileObj, options) {
        const { allocate_free_resources } = options || {};
        const params = {
            ...(allocate_free_resources && { allocate_free_resources }),
        };
        const result = await this.doRequest({
            path: `/profile/`,
            method: "POST",
            body: profileObj,
            params,
        });
        return result;
    }
    /**
     * Edits a profile
     * @param profileObj Profile object with data to be changed
     */
    async edit(profileID, profileObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "PUT",
            body: profileObj,
        });
        return result;
    }
    /**
     * Delete profile
     * @param profileID Profile identification
     */
    async delete(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * List all the usage statistics of a profile.
     *
     * Usage statistics are cumulative: if a service was not used in a time period,
     * the statistics for that time period will not be in the object.
     *
     * @param profileID Profile identification
     * @param dateObj Object with date and their timezone
     *
     * @returns Array of cumulative usage statistics.
     *
     * @example
     *
     * ```json
     * [
     *   { "time": "2022-01-01T00:00:00.000Z", "input": 5 },
     *   { "time": "2022-01-02T00:00:00.000Z", "input": 5, "output": 10 },
     *   { "time": "2022-01-03T00:00:00.000Z", "input": 10, "output": 15 },
     * ]
     * ```
     */
    async usageStatisticList(profileID, dateObj) {
        let result = await this.doRequest({
            path: `/profile/${profileID}/statistics`,
            method: "GET",
            params: {
                ...dateObj,
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["time"]));
        return result;
    }
    /**
     * Create a query for auditlog
     * @param profileID Profile identification
     * @param filterObj auditlog filter object
     */
    async auditLog(profileID, filterObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/auditlog`,
            method: "GET",
            params: filterObj || {},
        });
        result.events = result?.events.map((data) => (0, dateParser_1.default)(data, ["date"]));
        return result;
    }
    /**
     * Fetches the information from an auditlog query
     * @param profileID Profile identification
     * @param queryId auditlog queryId from auditLogCreate
     */
    async auditLogQuery(profileID, queryId) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/auditlog/${queryId}`,
            method: "GET",
        });
        result.events = result?.events.map((data) => (0, dateParser_1.default)(data, ["date"]));
        return result;
    }
    /**
     * Gets the information of addons for the profile
     * @param profileID Profile identification
     */
    async addonList(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "GET",
        });
        return result;
    }
    /**
     * Sets the information of addons for the profile
     * @param profileID Profile identification
     * @param addonObj
     */
    async addonEdit(profileID, addonObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "POST",
            body: addonObj,
        });
        return result;
    }
    /**
     * Sets the information of services for the profile. Services are the main resources
     * in your profile, for example data input, data output, etc...
     * @param profileID Profile identification
     * @param serviceObj
     */
    async serviceEdit(profileID, serviceObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/services`,
            method: "POST",
            body: serviceObj,
        });
        return result;
    }
    /**
     * Transforms the current token to another profile. The current profile will
     * no longer have the current token, as the current token will be acquired by the profile informed.
     * After this call is done, other requests using this token will work solely for the new profile, and
     * no longer for the current profile.
     * @param targetProfileID Profile identification
     */
    async transferTokenToAnotherProfile(targetProfileID) {
        const result = await this.doRequest({
            path: `/profile/switch/${targetProfileID}`,
            method: "PUT",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @param profileID Profile ID
     * @param queryObj Search query params
     */
    async tokenList(profileID, queryObj) {
        let result = await this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["name", "token", "permission"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "created_at,desc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["last_authorization", "expire_time", "created_at"]));
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param profileID Profile ID
     * @param tokenParams Token params for new token
     */
    async tokenCreate(profileID, tokenParams) {
        let result = await this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "POST",
            body: tokenParams,
        });
        result = (0, dateParser_1.default)(result, ["expire_date"]);
        return result;
    }
    /**
     * Deletes a token
     * @param token Token
     */
    async tokenDelete(token) {
        const result = await this.doRequest({
            path: `/profile/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Remove an add-on from a profile at the end of the billing cycle.
     *
     * @throws If profile ID is invalid.
     * @throws If profile doesn't have the add-on.
     *
     * @returns Success message.
     */
    async removeAddOn(profileId, addon) {
        const result = await this.doRequest({
            path: `/profile/${profileId}/${addon}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Profile;
//# sourceMappingURL=Profile.js.map