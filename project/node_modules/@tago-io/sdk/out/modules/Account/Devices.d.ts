import type { Data, DataEdit, GenericID, GenericToken, TokenCreateResponse, TokenData } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import type { DataQuery } from "../Device/device.types";
import type { ConfigurationParams, DeviceCreateInfo, DeviceCreateResponse, DeviceInfo, DeviceQuery, DeviceListItem, DeviceTokenDataList, ListDeviceTokenQuery, DeviceEditInfo, DeviceChunkData, DeviceChunkParams, DeviceChunkCopyResponse } from "./devices.types";
declare class Devices extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all devices from the account
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false
     * }
     * @param queryObj Search query params
     */
    list(queryObj?: DeviceQuery): Promise<DeviceListItem[]>;
    /**
     * Generates and retrieves a new action from the Device
     * @param deviceObj Object data to create new device
     */
    create(deviceObj: DeviceCreateInfo): Promise<DeviceCreateResponse>;
    /**
     * Modify any property of the device
     * @param deviceID Device ID
     * @param deviceObj Device object with fields to replace
     */
    edit(deviceID: GenericID, deviceObj: DeviceEditInfo): Promise<string>;
    /**
     * Deletes an device from the account
     * @param deviceID Device ID
     */
    delete(deviceID: GenericID): Promise<string>;
    /**
     * Get Info of the Device
     * @param deviceID Device ID
     */
    info(deviceID: GenericID): Promise<DeviceInfo>;
    /**
     * Create or edit param for the Device
     * @param deviceID Device ID
     * @param configObj Configuration Data
     * @param paramID Parameter ID
     */
    paramSet(deviceID: GenericID, configObj: Partial<ConfigurationParams>, paramID?: GenericID): Promise<string>;
    /**
     * List Params for the Device
     * @param deviceID Device ID
     * @param sentStatus True return only sent=true, False return only sent=false
     */
    paramList(deviceID: GenericID, sentStatus?: Boolean): Promise<ConfigurationParams[]>;
    /**
     * Remove param for the Device
     * @param deviceID Device ID
     * @param paramID Parameter ID
     */
    paramRemove(deviceID: GenericID, paramID: GenericID): Promise<string>;
    /**
     * Retrieves a list of all tokens
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param deviceID Device ID
     * @param queryObj Search query params
     */
    tokenList(deviceID: GenericID, queryObj?: ListDeviceTokenQuery): Promise<Partial<DeviceTokenDataList>[]>;
    /**
     * Generates and retrieves a new token
     * @param deviceID Device ID
     * @param tokenParams Params for new token
     */
    tokenCreate(deviceID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Delete a token
     * @param token Token
     */
    tokenDelete(token: GenericToken): Promise<string>;
    /**
     * Get data from all variables in the device.
     *
     * @param deviceId Device ID.
     * @param queryParams Query parameters to filter the results.
     *
     * @returns Array with the data values stored in the device.
     *
     * @example
     * ```ts
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const lastTenValues = await myDevice.getVariablesData("myDeviceId", { qty: 10 });
     * ```
     */
    getDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<Data[]>;
    /**
     * Empty all data in a device.
     *
     * @param deviceId Device ID.
     *
     * @returns Success message.
     */
    emptyDeviceData(deviceId: GenericID): Promise<string>;
    /**
     * Edit data records in a device using the profile token and device ID.
     *
     * The `updatedData` can be a single data record or an array of records to be updated,
     * each of the records must have the `id` of the record and the fields to be updated.
     *
     * @param deviceId Device ID.
     * @param updatedData A single or an array of updated data records.
     *
     * @returns Success message indicating amount of records updated (can be 0).
     *
     * @example
     * ```ts
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * await myDevice.editDeviceData("myDeviceId", { id: "idOfTheRecord", value: "new value", unit: "new unit" });
     * ```
     */
    editDeviceData(deviceId: GenericID, updatedData: DataEdit | DataEdit[]): Promise<string>;
    /**
     * Delete data records in a device using the profile token and device ID.
     *
     * See the example to understand how to use this method properly to have full control on what to delete.
     *
     * ! If query parameters are empty, all data for the device will be deleted.
     *
     * @param deviceId Device ID.
     * @param queryParams Parameters to specify what should be deleted on the device's data.
     *
     * @returns Success message indicating amount of records deleted (can be 0).
     *
     * @example
     * ```ts
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * await myDevice.deleteDeviceData("myDeviceId", { ids: ["recordIdToDelete", "anotherRecordIdToDelete" ] });
     * ```
     */
    deleteDeviceData(deviceId: GenericID, queryParams?: DataQuery): Promise<string>;
    /**
     * Get Info of the Device Chunks.
     * @experimental
     * @param deviceID Device ID
     */
    getChunk(deviceID: GenericID): Promise<DeviceChunkData[]>;
    /**
     * Delete the chunk data.
     * @experimental
     * @param deviceID Device ID
     * @param chunkID Chunk ID
     */
    deleteChunk(deviceID: GenericID, chunkID: GenericID): Promise<string>;
    /**
     * Schedule to export the Device Chunk's data to the TagoIO's files.
     * @experimental
     */
    copyChunk(params: DeviceChunkParams): Promise<DeviceChunkCopyResponse>;
}
export default Devices;
//# sourceMappingURL=Devices.d.ts.map