"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Actions extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all actions from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/action",
            method: "GET",
            params: {
                page: queryObj?.page || 1,
                fields: queryObj?.fields || ["id", "name"],
                filter: queryObj?.filter || {},
                amount: queryObj?.amount || 20,
                orderBy: queryObj?.orderBy ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => (0, dateParser_1.default)(data, ["created_at", "updated_at", "last_triggered"]));
        return result;
    }
    /**
     * Generates and retrieves a new action from the account
     * @param actionObj Object data to create new TagoIO Action
     */
    async create(actionObj) {
        const result = await this.doRequest({
            path: "/action",
            method: "POST",
            body: actionObj,
        });
        return result;
    }
    /**
     * Modify any property of the action.
     * @param actionID Action ID
     * @param actionObj Action Object with data to be replaced
     */
    async edit(actionID, actionObj) {
        const result = await this.doRequest({
            path: `/action/${actionID}`,
            method: "PUT",
            body: actionObj,
        });
        return result;
    }
    /**
     * Deletes an action from the account
     * @param actionID Action ID
     */
    async delete(actionID) {
        const result = await this.doRequest({
            path: `/action/${actionID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Gets information about the action
     * @param actionID Action ID
     */
    async info(actionID) {
        let result = await this.doRequest({
            path: `/action/${actionID}`,
            method: "GET",
        });
        result = (0, dateParser_1.default)(result, ["created_at", "updated_at", "last_triggered"]);
        return result;
    }
}
exports.default = Actions;
//# sourceMappingURL=Actions.js.map